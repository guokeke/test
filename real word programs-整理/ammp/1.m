frame(j,file1,file2,eval_echo,atom_highest,atom_lowest,a_m_serial_ap,a_m_serial_lastmatched,a_next_ap,getatomdata_fx,getatomdata_fy,getatomdata_fz,randf_buff,randf_ip,randf_jp,randf_kp,uselist_oldatomnumber,uselist_since,uselist_lsize,uselist_local,uselist_oldcutoff,fv_update_nonbon_dielecold,eval_inloop,angle_first,angle_last,first,last,atomNUMBER,atomUPDATE,bond_first,bond_last,nused,potentials, forces,hybrid_first,hybrid_last,ap,mom_list,in_mom_list,noel_first,noel_last,restrain_first,restrain_last,tether_first,tether_last,tg_first,torsion_first,torsion_last,variableFIRST,variableLAST) and (
struct ATOM {
float x,y,z and 
float fx,fy,fz and 
int serial and 
float q,a,b,mass and 
void *next$ and 
char active and 
char name[9] and 
float chi,jaa and 
float vx,vy,vz,vw,dx,dy,dz and 
float gx,gy,gz and 
float VP,px,py,pz,dpx,dpy,dpz and 
float qxx,qxy,qxz,qyy,qyz,qzz and 
void *close[200] and 
void *excluded[32] and 
char exkind[32] and 
int dontuse 
};
	 	 FILE* file1<==NULL and skip;
		 FILE* file2<==NULL and skip;
		 	 int j<==0 and skip;
   union struct$1 {
     float f and 
     int i 
 };
 struct VARIABLE {
 int type and 
 char name[7] and 
 struct$1  value and 
 void *next$ 
 };
       struct ANGLE {
     ATOM *atom1,*atom2,*atom3 and 
     float target,k and 
     void *next$ 
 };
 int eval_echo<==1 and skip;
 int eval_inloop<==1 and skip;

  function analyze (void (*vfs[])(float*, float, int RValue),int nfs,int ilow,int ihigh,FILE *op )
 {
     frame(analyze_V,analyze_T,analyze_vt,analyze_ifs,analyze_i,analyze_j) and ( 
     float analyze_V,analyze_T,analyze_vt and skip;
     int analyze_ifs and skip;
     int analyze_i,analyze_j and skip;
     analyze_i:=ilow;
     analyze_j:=ihigh;
     if(ihigh<ilow) then 
     {
         analyze_j:=ilow
     }
     else 
     {
          skip 
     };
     analyze_V:=0.0;
     analyze_ifs:=0;
     
     while(analyze_ifs<nfs)
     {
         analyze_vt:=0.0;
         if(vfs[analyze_ifs]=v_bond) then 
         {
             a_bond(&analyze_vt,0.0,analyze_i,analyze_j,op,RValue);
             fprintf(op," %f bond energy\n",analyze_vt,RValue) and skip
             
         }
         else
         {
             if(vfs[analyze_ifs]=v_mmbond) then 
             {
                 a_mmbond(&analyze_vt,0.0,analyze_i,analyze_j,op,RValue);
                 fprintf(op," %f mm bond energy\n",analyze_vt,RValue) and skip
             }
             else
             {
                 if(vfs[analyze_ifs]=v_mmangle) then 
                 {
                     a_mmangle(&analyze_vt,0.0,analyze_i,analyze_j,op,RValue);
                     fprintf(op," %f mm angle energy\n",analyze_vt,RValue) and skip
                 }
                 else
                 {
                     if(vfs[analyze_ifs]=v_angle) then 
                     {
                         a_angle(&analyze_vt,0.0,analyze_i,analyze_j,op,RValue);
                         fprintf(op," %f angle energy\n",analyze_vt,RValue) and skip
                     }
                     else
                     {
                         if(vfs[analyze_ifs]=v_noel) then 
                         {
                             a_noel(&analyze_vt,0.0,analyze_i,analyze_j,op,RValue);
                             fprintf(op," %f noel energy\n",analyze_vt,RValue) and skip
                         }
                         else
                         {
                             if(vfs[analyze_ifs]=v_ho_noel) then 
                             {
                                 a_noel(&analyze_vt,0.0,analyze_i,analyze_j,op,RValue);
                                 fprintf(op," %f noel energy\n",analyze_vt,RValue) and skip
                             }
                             else
                             {
                                 if(vfs[analyze_ifs]=u_v_nonbon) then 
                                 {
                                     a_nonbon(&analyze_vt,0.0,analyze_i,analyze_j,op,RValue);
                                     fprintf(op," %f non-bonded energy\n",analyze_vt,RValue) and skip
                                 }
                                 else
                                 {
                                     if(vfs[analyze_ifs]=v_nonbon) then 
                                     {
                                         a_nonbon(&analyze_vt,0.0,analyze_i,analyze_j,op,RValue);
                                         fprintf(op," %f non-bonded energy\n",analyze_vt,RValue) and skip
                                     }
                                     else
                                     {
                                         if(vfs[analyze_ifs]=v_torsion) then 
                                         {
                                             a_torsion(&analyze_vt,0.0,analyze_i,analyze_j,op,RValue);
                                             fprintf(op," %f torsion energy\n",analyze_vt,RValue) and skip
                                         }
                                         else
                                         {
                                             if(vfs[analyze_ifs]=v_hybrid) then 
                                             {
                                                 a_hybrid(&analyze_vt,0.0,analyze_i,analyze_j,op,RValue);
                                                 fprintf(op," %f hybrid energy\n",analyze_vt,RValue) and skip
                                             }
                                             else
                                             {
                                                 if(vfs[analyze_ifs]=v_tether) then 
                                                 {
                                                     a_tether(&analyze_vt,0.0,analyze_i,analyze_j,op,RValue);
                                                     fprintf(op," %f tether restraint energy\n",analyze_vt,RValue) and skip
                                                 }
                                                 else
                                                 {
                                                     if(vfs[analyze_ifs]=v_restrain) then 
                                                     {
                                                         a_restrain(&analyze_vt,0.0,analyze_i,analyze_j,op,RValue);
                                                         fprintf(op," %f restraint bond energy\n",analyze_vt,RValue) and skip
                                                         
                                                     }
                                                     else 
                                                     {
                                                          skip 
                                                     }
                                                 }
                                             }
                                         }
                                     }
                                 }
                             }
                         }
                     }
                 }
             }
         };
         analyze_V:=analyze_V+analyze_vt;
         analyze_vt:=0.0;
         analyze_ifs:=analyze_ifs+1
         
     };
     fprintf(op," %f total potential energy\n",analyze_V,RValue) and skip
     )
     }; 
	  ANGLE *angle_first<==NULL and skip;
 ANGLE *angle_last<==NULL and skip;
 function angle ( int p1,int p2,int p3,float fk,float bl,int RValue )
 {
     frame(angle_new,angle_ap1,angle_ap2,angle_ap3,angle_line,angle_i,angle_5_gotoexcluded1,return) and ( 
     int return<==0 and skip;
     ANGLE *angle_new and skip;
     ATOM *angle_ap1,*angle_ap2,*angle_ap3 and skip;
     char angle_line[80] and skip;
     int angle_i and skip;
     angle_ap1:=a_m_serial(p1,RValue);
     angle_ap2:=a_m_serial(p2,RValue);
     angle_ap3:=a_m_serial(p3,RValue);
     if((angle_ap1=NULL) OR (angle_ap2=NULL) OR (angle_ap3=NULL)) then 
     {
         sprintf(angle_line,"undefined atom in angle %d %d %d \0",p1,p2,p3,RValue) and skip;
         aaerror(angle_line,RValue);
         return<==1 and RValue:=0;
         skip
         
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         angle_new:=malloc(sizeof(ANGLE)) ;
         if((angle_new)=NULL) then 
         {
             return<==1 and RValue:=0;
             skip
             
         }
         else 
         {
              skip 
         };
         if(return=0)   then 
         {
             if(angle_first=NULL) then 
             {
                 angle_first:=angle_new
             }
             else 
             {
                  skip 
             };
             if(angle_last=NULL) then 
             {
                 angle_last:=angle_new
             }
             else 
             {
                  skip 
             };
             angle_new->atom1:=angle_ap1;
             angle_new->atom2:=angle_ap2;
             angle_new->atom3:=angle_ap3;
             angle_new->target:=bl;
             angle_new->k:=fk;
             angle_new->next$:=angle_new;
             if(angle_ap1->dontuse<32) then 
             {
                 int angle_5_gotoexcluded1<==0 and skip;
                 angle_i:=0;
                 
                 while( return=0 AND  angle_i<angle_ap1->dontuse)
                 {
                     if(angle_ap1->excluded[angle_i]=angle_ap3) then 
                     {
                         angle_5_gotoexcluded1:=1;
                         if(angle_ap3->dontuse<32) then 
                         {
                             angle_i:=0;
                             
                             while( return=0 AND  angle_i<angle_ap3->dontuse)
                             {
                                 if(angle_ap3->excluded[angle_i]=angle_ap1) then 
                                 {
                                     angle_last->next$:=angle_new;
                                     angle_last:=angle_new;
                                     return<==1 and RValue:=1;
                                     skip
                                     
                                 }
                                 else 
                                 {
                                      skip 
                                 };
                                 if(return=0)   then 
                                 {
                                     angle_i:=angle_i+1
                                 }
                                 else
                                 {
                                     skip
                                 }
                                 
                             };
                             if(return=0)   then 
                             {
                                 angle_ap3->excluded[angle_ap3->dontuse]:=angle_ap1;
                                 (angle_ap3->dontuse):=(angle_ap3->dontuse)+1
                             }
                             else
                             {
                                 aaerror(" too many bonds to an atom increase NEXCLUDE in ammp.h",RValue);
                                 exit(0) and skip 
                             }
                         }
                         else
                         {
                             skip
                         }
                         
                     }
                     else 
                     {
                          skip 
                     };
                     if(return=0)  then
                     {
                         angle_i:=angle_i+1
                     }
                     else
                     {
                         skip
                     }
                     
                 };
                 if(return=0)   then 
                 {
                     if(!angle_5_gotoexcluded1) then 
                     {
                         angle_ap1->excluded[angle_ap1->dontuse]:=angle_ap3;
                         (angle_ap1->dontuse):=(angle_ap1->dontuse)+1
                         
                     }
                     else 
                     {
                          skip 
                     }
                 }
                 else
                 {
                     skip
                 }
                 
             }
             else
             {
                 aaerror(" too many bonds to an atom increase NEXCLUDE in ammp.h",RValue);
                 exit(0) and skip 
             };
             if(return=0)  then
             {
                 if(angle_ap3->dontuse<32) then 
                 {
                     angle_i:=0;
                     
                     while( return=0 AND  angle_i<angle_ap3->dontuse)
                     {
                         if(angle_ap3->excluded[angle_i]=angle_ap1) then 
                         {
                             angle_last->next$:=angle_new;
                             angle_last:=angle_new;
                             return<==1 and RValue:=1;
                             skip
                             
                         }
                         else 
                         {
                              skip 
                         };
                         if(return=0)   then 
                         {
                             angle_i:=angle_i+1
                         }
                         else
                         {
                             skip
                         }
                         
                     };
                     if(return=0)   then 
                     {
                         angle_ap3->excluded[angle_ap3->dontuse]:=angle_ap1;
                         (angle_ap3->dontuse):=(angle_ap3->dontuse)+1
                     }
                     else
                     {
                         skip
                     }
                     
                 }
                 else
                 {
                     aaerror(" too many bonds to an atom increase NEXCLUDE in ammp.h",RValue);
                     exit(0) and skip 
                 };
                 if(return=0)  then
                 {
                     angle_last->next$:=angle_new;
                     angle_last:=angle_new;
                     return<==1 and RValue:=1;
                     skip
                 }
                 else
                 {
                     skip
                 }
             }
             else
             {
                 skip
             }
         }
         else
         {
             skip
         }
     }
     else
     {
         skip
     }
     )
     }; 
  function v_angle ( float *V,float lambda,int RValue )
 {
     frame(v_angle_bp,v_angle_r,v_angle_x1,v_angle_y1,v_angle_z1,v_angle_x2,v_angle_y2,v_angle_z2,v_angle_dp,v_angle_a1,v_angle_a2,v_angle_a3,return) and ( 
     int return<==0 and skip;
     ANGLE *v_angle_bp and skip;
     float v_angle_r,v_angle_x1,v_angle_y1,v_angle_z1,v_angle_x2,v_angle_y2,v_angle_z2 and skip;
     float v_angle_dp and skip;
     ATOM *v_angle_a1,*v_angle_a2,*v_angle_a3 and skip;
     v_angle_bp:=angle_first;
     if(v_angle_bp=NULL) then 
     {
         return<==1 and RValue:=1;
         skip
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         while( return=0 AND  1)
         {
             if(v_angle_bp=NULL) then 
             {
                 return<==1 and RValue:=0;
                 skip
             }
             else 
             {
                  skip 
             };
             if(return=0)   then 
             {
                 v_angle_a1:=v_angle_bp->atom1;
                 v_angle_a2:=v_angle_bp->atom2;
                 v_angle_a3:=v_angle_bp->atom3;
                 if(v_angle_a1->active OR v_angle_a2->active OR v_angle_a3->active) then 
                 {
                     v_angle_x1:=(v_angle_a1->x-v_angle_a2->x+lambda*(v_angle_a1->dx-v_angle_a2->dx));
                     v_angle_y1:=(v_angle_a1->y-v_angle_a2->y+lambda*(v_angle_a1->dy-v_angle_a2->dy));
                     v_angle_z1:=(v_angle_a1->z-v_angle_a2->z+lambda*(v_angle_a1->dz-v_angle_a2->dz));
                     v_angle_x2:=(v_angle_a3->x-v_angle_a2->x+lambda*(v_angle_a3->dx-v_angle_a2->dx));
                     v_angle_y2:=(v_angle_a3->y-v_angle_a2->y+lambda*(v_angle_a3->dy-v_angle_a2->dy));
                     v_angle_z2:=(v_angle_a3->z-v_angle_a2->z+lambda*(v_angle_a3->dz-v_angle_a2->dz));
                     v_angle_dp:=v_angle_x1*v_angle_x2+v_angle_y1*v_angle_y2+v_angle_z1*v_angle_z2;
                     v_angle_r:=((v_angle_x1*v_angle_x1+v_angle_y1*v_angle_y1+v_angle_z1*v_angle_z1)*(v_angle_x2*v_angle_x2+v_angle_y2*v_angle_y2+v_angle_z2*v_angle_z2));
                     if(v_angle_r>1.e-8) then 
                     {
                         v_angle_r:=sqrt(v_angle_r);
                         v_angle_dp:=v_angle_dp/ v_angle_r;
                         if(v_angle_dp>1.0) then 
                         {
                             v_angle_dp:=1.0
                         }
                         else 
                         {
                              skip 
                         };
                         if(v_angle_dp<-1.0) then 
                         {
                             v_angle_dp:=-1.0
                         }
                         else 
                         {
                              skip 
                         };
                         v_angle_dp:=acos(v_angle_dp);
                         * V:=* V+v_angle_bp->k*(v_angle_bp->target-v_angle_dp)*(v_angle_bp->target-v_angle_dp)
                         
                     }
                     else 
                     {
                          skip 
                     }
                     
                 }
                 else 
                 {
                      skip 
                 };
                 if(v_angle_bp=v_angle_bp->next$) then 
                 {
                     return<==1 and RValue:=1;
                     skip
                 }
                 else 
                 {
                      skip 
                 };
                 if(return=0)   then 
                 {
                     v_angle_bp:=v_angle_bp->next$
                 }
                 else
                 {
                     skip
                 }
             }
             else
             {
                 skip
             }
         }
     }
     else
     {
         skip
     }
     )
     }; 
  function f_angle ( float lambda,int RValue )
 {
     frame(f_angle_bp,f_angle_r,f_angle_k,f_angle_ux1,f_angle_uy1,f_angle_uz1,f_angle_ux2,f_angle_uy2,f_angle_uz2,f_angle_a1,f_angle_a2,f_angle_a3,f_angle_x1,f_angle_y1,f_angle_z1,f_angle_x2,f_angle_y2,f_angle_z2,f_angle_r1,f_angle_r2,f_angle_dtheta,f_angle_dp,f_angle_r11,f_angle_r22,f_angle_sdth,return,continue) and ( 
     int continue<==0 and skip;
     int return<==0 and skip;
     ANGLE *f_angle_bp and skip;
     float f_angle_r,f_angle_k,f_angle_ux1,f_angle_uy1,f_angle_uz1,f_angle_ux2,f_angle_uy2,f_angle_uz2 and skip;
     ATOM *f_angle_a1,*f_angle_a2,*f_angle_a3 and skip;
     float f_angle_x1,f_angle_y1,f_angle_z1,f_angle_x2,f_angle_y2,f_angle_z2 and skip;
     float f_angle_r1,f_angle_r2,f_angle_dtheta,f_angle_dp and skip;
     float f_angle_r11,f_angle_r22,f_angle_sdth and skip;
     f_angle_bp:=angle_first;
     if(f_angle_bp=NULL) then 
     {
         return<==1 and RValue:=1;
         skip
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         while( return=0 AND  1)
         {
             continue<==0 and skip;
             if(f_angle_bp=NULL) then 
             {
                 return<==1 and RValue:=0;
                 skip
             }
             else 
             {
                  skip 
             };
             if(return=0)   then 
             {
                 f_angle_k:=f_angle_bp->k;
                 f_angle_a1:=f_angle_bp->atom1;
                 f_angle_a2:=f_angle_bp->atom2;
                 f_angle_a3:=f_angle_bp->atom3;
                 if(f_angle_a1->active OR f_angle_a2->active OR f_angle_a3->active) then 
                 {
                     f_angle_x1:=(f_angle_a1->x-f_angle_a2->x+lambda*(f_angle_a1->dx-f_angle_a2->dx));
                     f_angle_y1:=(f_angle_a1->y-f_angle_a2->y+lambda*(f_angle_a1->dy-f_angle_a2->dy));
                     f_angle_z1:=(f_angle_a1->z-f_angle_a2->z+lambda*(f_angle_a1->dz-f_angle_a2->dz));
                     f_angle_x2:=(f_angle_a3->x-f_angle_a2->x+lambda*(f_angle_a3->dx-f_angle_a2->dx));
                     f_angle_y2:=(f_angle_a3->y-f_angle_a2->y+lambda*(f_angle_a3->dy-f_angle_a2->dy));
                     f_angle_z2:=(f_angle_a3->z-f_angle_a2->z+lambda*(f_angle_a3->dz-f_angle_a2->dz));
                     f_angle_dp:=f_angle_x1*f_angle_x2+f_angle_y1*f_angle_y2+f_angle_z1*f_angle_z2;
                     f_angle_r1:=sqrt(f_angle_x1*f_angle_x1+f_angle_y1*f_angle_y1+f_angle_z1*f_angle_z1);
                     f_angle_r2:=sqrt(f_angle_x2*f_angle_x2+f_angle_y2*f_angle_y2+f_angle_z2*f_angle_z2);
                     if(f_angle_r1<1.e-5 OR f_angle_r2<1.e-5) then 
                     {
                         if(f_angle_bp=f_angle_bp->next$) then 
                         {
                             return<==1 and RValue:=1;
                             skip
                         }
                         else 
                         {
                              skip 
                         };
                         if(return=0)   then 
                         {
                             f_angle_bp:=f_angle_bp->next$;
                             continue<==1 and skip
                          }
                         else
                         {
                             skip
                         }
                     }
                     else
                     {
                         skip
                     }
                     
                 }
                 else 
                 {
                      skip 
                 };
                 if(continue=0)   then 
                 {
                     if(return=0)  then
                     {
                         f_angle_r:=f_angle_r1*f_angle_r2;
                         if(f_angle_r>1.e-8) then 
                         {
                             f_angle_dp:=f_angle_dp/ f_angle_r;
                             if(f_angle_dp>1.0) then 
                             {
                                 f_angle_dp:=1.0
                             }
                             else 
                             {
                                  skip 
                             };
                             if(f_angle_dp<-1.0) then 
                             {
                                 f_angle_dp:=-1.0
                             }
                             else 
                             {
                                  skip 
                             };
                             f_angle_dtheta:=acos(f_angle_dp);
                             f_angle_sdth:=sin(f_angle_dtheta);
                             if(f_angle_sdth<1.e-3) then 
                             {
                                 f_angle_sdth:=1.e-3
                             }
                             else 
                             {
                                  skip 
                             };
                             f_angle_r11:=f_angle_r1*f_angle_sdth;
                             f_angle_r22:=f_angle_r2*f_angle_sdth;
                             f_angle_ux1:=f_angle_x2/ f_angle_r2-f_angle_dp*f_angle_x1/ f_angle_r1;
                             f_angle_uy1:=f_angle_y2/ f_angle_r2-f_angle_dp*f_angle_y1/ f_angle_r1;
                             f_angle_uz1:=f_angle_z2/ f_angle_r2-f_angle_dp*f_angle_z1/ f_angle_r1;
                             f_angle_ux2:=f_angle_x1/ f_angle_r1-f_angle_dp*f_angle_x2/ f_angle_r2;
                             f_angle_uy2:=f_angle_y1/ f_angle_r1-f_angle_dp*f_angle_y2/ f_angle_r2;
                             f_angle_uz2:=f_angle_z1/ f_angle_r1-f_angle_dp*f_angle_z2/ f_angle_r2;
                             f_angle_dtheta:=-2.0*f_angle_k*(f_angle_bp->target-f_angle_dtheta);
                             f_angle_ux1:=f_angle_ux1*f_angle_dtheta/ f_angle_r11;
                             f_angle_uy1:=f_angle_uy1*f_angle_dtheta/ f_angle_r11;
                             f_angle_uz1:=f_angle_uz1*f_angle_dtheta/ f_angle_r11;
                             f_angle_ux2:=f_angle_ux2*f_angle_dtheta/ f_angle_r22;
                             f_angle_uy2:=f_angle_uy2*f_angle_dtheta/ f_angle_r22;
                             f_angle_uz2:=f_angle_uz2*f_angle_dtheta/ f_angle_r22;
                             if(f_angle_a1->active) then 
                             {
                                 f_angle_a1->fx:=f_angle_a1->fx+f_angle_ux1;
                                 f_angle_a1->fy:=f_angle_a1->fy+f_angle_uy1;
                                 f_angle_a1->fz:=f_angle_a1->fz+f_angle_uz1
                                 
                             }
                             else 
                             {
                                  skip 
                             };
                             if(f_angle_a2->active) then 
                             {
                                 f_angle_a2->fx:=f_angle_a2->fx+-f_angle_ux1-f_angle_ux2;
                                 f_angle_a2->fy:=f_angle_a2->fy+-f_angle_uy1-f_angle_uy2;
                                 f_angle_a2->fz:=f_angle_a2->fz+-f_angle_uz1-f_angle_uz2
                                 
                             }
                             else 
                             {
                                  skip 
                             };
                             if(f_angle_a3->active) then 
                             {
                                 f_angle_a3->fx:=f_angle_a3->fx+f_angle_ux2;
                                 f_angle_a3->fy:=f_angle_a3->fy+f_angle_uy2;
                                 f_angle_a3->fz:=f_angle_a3->fz+f_angle_uz2
                                 
                             }
                             else 
                             {
                                  skip 
                             }
                             
                         }
                         else 
                         {
                              skip 
                         }
                     }
                     else
                     {
                         skip
                     }
                 }
                 else
                 {
                     skip
                 }
                 
             }
             else 
             {
                  skip 
             };
             if(continue=0)  then
             {
                 if(return=0)  then
                 {
                     if(f_angle_bp=f_angle_bp->next$) then 
                     {
                         return<==1 and RValue:=1;
                         skip
                     }
                     else 
                     {
                          skip 
                     };
                     if(return=0)   then 
                     {
                         f_angle_bp:=f_angle_bp->next$
                     }
                     else
                     {
                         skip
                     }
                 }
                 else
                 {
                     skip
                 }
             }
             else
             {
                 skip
             }
         };
         continue<==0 and skip
     }
     else
     {
         skip
     }
     )
     }; 
  function get_angle ( ATOM *a1,ATOM **bonded,int mbond,int *inbond )
 {
     frame(get_angle_mine,return) and ( 
     int return<==0 and skip;
     ANGLE *get_angle_mine and skip;
     get_angle_mine:=angle_first;
     * inbond:=0;
     while( return=0 AND  1)
     {
         if((get_angle_mine=NULL)) then 
         {
              return<==1 and skip
             
         }
         else 
         {
              skip 
         };
         if(return=0)   then 
         {
             if(get_angle_mine->atom1=a1) then 
             {
                 bonded[(* inbond)]:=get_angle_mine->atom3;
                 (* inbond):=(* inbond)+1
                 
             }
             else 
             {
                  skip 
             };
             if(get_angle_mine->atom3=a1) then 
             {
                 bonded[(* inbond)]:=get_angle_mine->atom1;
                 (* inbond):=(* inbond)+1
                 
             }
             else 
             {
                  skip 
             };
             if(get_angle_mine=get_angle_mine->next$) then 
             {
                  return<==1 and skip
             }
             else 
             {
                  skip 
             };
             if(return=0)   then 
             {
                 get_angle_mine:=get_angle_mine->next$;
                 if(* inbond=mbond) then 
                 {
                      return<==1 and skip
                 }
                 else 
                 {
                      skip 
                 }
             }
             else
             {
                 skip
             }
         }
         else
         {
             skip
         }
     }
     )
     }; 
  function dump_angles ( FILE *where )
 {
     frame(dump_angles_b,dump_angles_a1,dump_angles_a2,dump_angles_a3,dump_angles_rtodeg,return) and ( 
     int return<==0 and skip;
     ANGLE *dump_angles_b and skip;
     ATOM *dump_angles_a1,*dump_angles_a2,*dump_angles_a3 and skip;
     float dump_angles_rtodeg and skip;
     dump_angles_b:=angle_first;
     if(dump_angles_b=NULL) then 
     {
          return<==1 and skip
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         dump_angles_rtodeg:=180.0/ acos(-1.0);
         while( return=0 AND  (dump_angles_b->next$!=dump_angles_b))
         {
             if(dump_angles_b->next$=NULL) then 
             {
                  return<==1 and skip
             }
             else 
             {
                  skip 
             };
             if(return=0)   then 
             {
                 dump_angles_a1:=dump_angles_b->atom1;
                 dump_angles_a2:=dump_angles_b->atom2;
                 dump_angles_a3:=dump_angles_b->atom3;
                 fprintf(where,"angle %d %d %d %f %f ;\n",dump_angles_a1->serial,dump_angles_a2->serial,dump_angles_a3->serial,dump_angles_b->k,dump_angles_b->target*dump_angles_rtodeg,RValue) and skip;
                 dump_angles_b:=dump_angles_b->next$
             }
             else
             {
                 skip
             }
         };
         if(return=0)   then 
         {
             if(dump_angles_b->next$=NULL) then 
             {
                  return<==1 and skip
             }
             else 
             {
                  skip 
             };
             if(return=0)   then 
             {
                 dump_angles_a1:=dump_angles_b->atom1;
                 dump_angles_a2:=dump_angles_b->atom2;
                 dump_angles_a3:=dump_angles_b->atom3;
                 fprintf(where,"angle %d %d %d %f %f ;\n",dump_angles_a1->serial,dump_angles_a2->serial,dump_angles_a3->serial,dump_angles_b->k,dump_angles_b->target*dump_angles_rtodeg,RValue) and skip
             }
             else
             {
                 skip
             }
         }
         else
         {
             skip
         }
     }
     else
     {
         skip
     }
     )
     }; 
  function v_mmangle ( float *V,float lambda,int RValue )
 {
     frame(v_mmangle_bp,v_mmangle_r,v_mmangle_x1,v_mmangle_y1,v_mmangle_z1,v_mmangle_x2,v_mmangle_y2,v_mmangle_z2,v_mmangle_dp,v_mmangle_a1,v_mmangle_a2,v_mmangle_a3,return) and ( 
     int return<==0 and skip;
     ANGLE *v_mmangle_bp and skip;
     float v_mmangle_r,v_mmangle_x1,v_mmangle_y1,v_mmangle_z1,v_mmangle_x2,v_mmangle_y2,v_mmangle_z2 and skip;
     float v_mmangle_dp and skip;
     ATOM *v_mmangle_a1,*v_mmangle_a2,*v_mmangle_a3 and skip;
     v_mmangle_bp:=angle_first;
     if(v_mmangle_bp=NULL) then 
     {
         return<==1 and RValue:=1;
         skip
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         while( return=0 AND  1)
         {
             if(v_mmangle_bp=NULL) then 
             {
                 return<==1 and RValue:=0;
                 skip
             }
             else 
             {
                  skip 
             };
             if(return=0)   then 
             {
                 v_mmangle_a1:=v_mmangle_bp->atom1;
                 v_mmangle_a2:=v_mmangle_bp->atom2;
                 v_mmangle_a3:=v_mmangle_bp->atom3;
                 if(v_mmangle_a1->active OR v_mmangle_a2->active OR v_mmangle_a3->active) then 
                 {
                     v_mmangle_x1:=(v_mmangle_a1->x-v_mmangle_a2->x+lambda*(v_mmangle_a1->dx-v_mmangle_a2->dx));
                     v_mmangle_y1:=(v_mmangle_a1->y-v_mmangle_a2->y+lambda*(v_mmangle_a1->dy-v_mmangle_a2->dy));
                     v_mmangle_z1:=(v_mmangle_a1->z-v_mmangle_a2->z+lambda*(v_mmangle_a1->dz-v_mmangle_a2->dz));
                     v_mmangle_x2:=(v_mmangle_a3->x-v_mmangle_a2->x+lambda*(v_mmangle_a3->dx-v_mmangle_a2->dx));
                     v_mmangle_y2:=(v_mmangle_a3->y-v_mmangle_a2->y+lambda*(v_mmangle_a3->dy-v_mmangle_a2->dy));
                     v_mmangle_z2:=(v_mmangle_a3->z-v_mmangle_a2->z+lambda*(v_mmangle_a3->dz-v_mmangle_a2->dz));
                     v_mmangle_dp:=v_mmangle_x1*v_mmangle_x2+v_mmangle_y1*v_mmangle_y2+v_mmangle_z1*v_mmangle_z2;
                     v_mmangle_r:=((v_mmangle_x1*v_mmangle_x1+v_mmangle_y1*v_mmangle_y1+v_mmangle_z1*v_mmangle_z1)*(v_mmangle_x2*v_mmangle_x2+v_mmangle_y2*v_mmangle_y2+v_mmangle_z2*v_mmangle_z2));
                     if(v_mmangle_r>1.e-8) then 
                     {
                         v_mmangle_r:=sqrt(v_mmangle_r);
                         v_mmangle_dp:=v_mmangle_dp/ v_mmangle_r;
                         if(v_mmangle_dp>1.0) then 
                         {
                             v_mmangle_dp:=1.0
                         }
                         else 
                         {
                              skip 
                         };
                         if(v_mmangle_dp<-1.0) then 
                         {
                             v_mmangle_dp:=-1.0
                         }
                         else 
                         {
                              skip 
                         };
                         v_mmangle_dp:=acos(v_mmangle_dp);
                         v_mmangle_dp:=v_mmangle_dp-v_mmangle_bp->target;
                         * V:=* V+v_mmangle_bp->k*v_mmangle_dp*v_mmangle_dp*(1.0-0.014*v_mmangle_dp+5.6e-5*v_mmangle_dp*v_mmangle_dp-7.e-7*v_mmangle_dp*v_mmangle_dp*v_mmangle_dp+9e-10*v_mmangle_dp*v_mmangle_dp*v_mmangle_dp*v_mmangle_dp)
                         
                     }
                     else 
                     {
                          skip 
                     }
                     
                 }
                 else 
                 {
                      skip 
                 };
                 if(v_mmangle_bp=v_mmangle_bp->next$) then 
                 {
                     return<==1 and RValue:=1;
                     skip
                 }
                 else 
                 {
                      skip 
                 };
                 if(return=0)   then 
                 {
                     v_mmangle_bp:=v_mmangle_bp->next$
                 }
                 else
                 {
                     skip
                 }
             }
             else
             {
                 skip
             }
         }
     }
     else
     {
         skip
     }
     )
     }; 
  function f_mmangle ( float lambda,int RValue )
 {
     frame(f_mmangle_bp,f_mmangle_r,f_mmangle_k,f_mmangle_ux1,f_mmangle_uy1,f_mmangle_uz1,f_mmangle_ux2,f_mmangle_uy2,f_mmangle_uz2,f_mmangle_a1,f_mmangle_a2,f_mmangle_a3,f_mmangle_x1,f_mmangle_y1,f_mmangle_z1,f_mmangle_x2,f_mmangle_y2,f_mmangle_z2,f_mmangle_r1,f_mmangle_r2,f_mmangle_dtheta,f_mmangle_dp,f_mmangle_r11,f_mmangle_r22,f_mmangle_sdth,return,continue) and ( 
     int continue<==0 and skip;
     int return<==0 and skip;
     ANGLE *f_mmangle_bp and skip;
     float f_mmangle_r,f_mmangle_k,f_mmangle_ux1,f_mmangle_uy1,f_mmangle_uz1,f_mmangle_ux2,f_mmangle_uy2,f_mmangle_uz2 and skip;
     ATOM *f_mmangle_a1,*f_mmangle_a2,*f_mmangle_a3 and skip;
     float f_mmangle_x1,f_mmangle_y1,f_mmangle_z1,f_mmangle_x2,f_mmangle_y2,f_mmangle_z2 and skip;
     float f_mmangle_r1,f_mmangle_r2,f_mmangle_dtheta,f_mmangle_dp and skip;
     float f_mmangle_r11,f_mmangle_r22,f_mmangle_sdth and skip;
     f_mmangle_bp:=angle_first;
     if(f_mmangle_bp=NULL) then 
     {
         return<==1 and RValue:=1;
         skip
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         while( return=0 AND  1)
         {
             continue<==0 and skip;
             if(f_mmangle_bp=NULL) then 
             {
                 return<==1 and RValue:=0;
                 skip
             }
             else 
             {
                  skip 
             };
             if(return=0)   then 
             {
                 f_mmangle_k:=f_mmangle_bp->k;
                 f_mmangle_a1:=f_mmangle_bp->atom1;
                 f_mmangle_a2:=f_mmangle_bp->atom2;
                 f_mmangle_a3:=f_mmangle_bp->atom3;
                 if(f_mmangle_a1->active OR f_mmangle_a2->active OR f_mmangle_a3->active) then 
                 {
                     f_mmangle_x1:=(f_mmangle_a1->x-f_mmangle_a2->x+lambda*(f_mmangle_a1->dx-f_mmangle_a2->dx));
                     f_mmangle_y1:=(f_mmangle_a1->y-f_mmangle_a2->y+lambda*(f_mmangle_a1->dy-f_mmangle_a2->dy));
                     f_mmangle_z1:=(f_mmangle_a1->z-f_mmangle_a2->z+lambda*(f_mmangle_a1->dz-f_mmangle_a2->dz));
                     f_mmangle_x2:=(f_mmangle_a3->x-f_mmangle_a2->x+lambda*(f_mmangle_a3->dx-f_mmangle_a2->dx));
                     f_mmangle_y2:=(f_mmangle_a3->y-f_mmangle_a2->y+lambda*(f_mmangle_a3->dy-f_mmangle_a2->dy));
                     f_mmangle_z2:=(f_mmangle_a3->z-f_mmangle_a2->z+lambda*(f_mmangle_a3->dz-f_mmangle_a2->dz));
                     f_mmangle_dp:=f_mmangle_x1*f_mmangle_x2+f_mmangle_y1*f_mmangle_y2+f_mmangle_z1*f_mmangle_z2;
                     f_mmangle_r1:=sqrt(f_mmangle_x1*f_mmangle_x1+f_mmangle_y1*f_mmangle_y1+f_mmangle_z1*f_mmangle_z1);
                     f_mmangle_r2:=sqrt(f_mmangle_x2*f_mmangle_x2+f_mmangle_y2*f_mmangle_y2+f_mmangle_z2*f_mmangle_z2);
                     if(f_mmangle_r1<1.e-5 OR f_mmangle_r2<1.e-5) then 
                     {
                         if(f_mmangle_bp=f_mmangle_bp->next$) then 
                         {
                             return<==1 and RValue:=1;
                             skip
                         }
                         else 
                         {
                              skip 
                         };
                         if(return=0)   then 
                         {
                             f_mmangle_bp:=f_mmangle_bp->next$;
                             continue<==1 and skip
                          }
                         else
                         {
                             skip
                         }
                     }
                     else
                     {
                         skip
                     }
                     
                 }
                 else 
                 {
                      skip 
                 };
                 if(continue=0)   then 
                 {
                     if(return=0)  then
                     {
                         f_mmangle_r:=f_mmangle_r1*f_mmangle_r2;
                         if(f_mmangle_r>1.e-8) then 
                         {
                             f_mmangle_dp:=f_mmangle_dp/ f_mmangle_r;
                             if(f_mmangle_dp>1.0) then 
                             {
                                 f_mmangle_dp:=1.0
                             }
                             else 
                             {
                                  skip 
                             };
                             if(f_mmangle_dp<-1.0) then 
                             {
                                 f_mmangle_dp:=-1.0
                             }
                             else 
                             {
                                  skip 
                             };
                             f_mmangle_dtheta:=acos(f_mmangle_dp);
                             f_mmangle_sdth:=sin(f_mmangle_dtheta);
                             if(f_mmangle_sdth<1.e-3) then 
                             {
                                 f_mmangle_sdth:=1.e-3
                             }
                             else 
                             {
                                  skip 
                             };
                             f_mmangle_r11:=f_mmangle_r1*f_mmangle_sdth;
                             f_mmangle_r22:=f_mmangle_r2*f_mmangle_sdth;
                             f_mmangle_ux1:=f_mmangle_x2/ f_mmangle_r2-f_mmangle_dp*f_mmangle_x1/ f_mmangle_r1;
                             f_mmangle_uy1:=f_mmangle_y2/ f_mmangle_r2-f_mmangle_dp*f_mmangle_y1/ f_mmangle_r1;
                             f_mmangle_uz1:=f_mmangle_z2/ f_mmangle_r2-f_mmangle_dp*f_mmangle_z1/ f_mmangle_r1;
                             f_mmangle_ux2:=f_mmangle_x1/ f_mmangle_r1-f_mmangle_dp*f_mmangle_x2/ f_mmangle_r2;
                             f_mmangle_uy2:=f_mmangle_y1/ f_mmangle_r1-f_mmangle_dp*f_mmangle_y2/ f_mmangle_r2;
                             f_mmangle_uz2:=f_mmangle_z1/ f_mmangle_r1-f_mmangle_dp*f_mmangle_z2/ f_mmangle_r2;
                             f_mmangle_dp:=f_mmangle_dtheta-f_mmangle_bp->target;
                             f_mmangle_dtheta:=f_mmangle_k*f_mmangle_dp*(2.0-0.014*3*f_mmangle_dp+4*5.6e-5*f_mmangle_dp*f_mmangle_dp-5*7.e-7*f_mmangle_dp*f_mmangle_dp*f_mmangle_dp+6*9.e-10*f_mmangle_dp*f_mmangle_dp*f_mmangle_dp*f_mmangle_dp);
                             f_mmangle_ux1:=f_mmangle_ux1*f_mmangle_dtheta/ f_mmangle_r11;
                             f_mmangle_uy1:=f_mmangle_uy1*f_mmangle_dtheta/ f_mmangle_r11;
                             f_mmangle_uz1:=f_mmangle_uz1*f_mmangle_dtheta/ f_mmangle_r11;
                             f_mmangle_ux2:=f_mmangle_ux2*f_mmangle_dtheta/ f_mmangle_r22;
                             f_mmangle_uy2:=f_mmangle_uy2*f_mmangle_dtheta/ f_mmangle_r22;
                             f_mmangle_uz2:=f_mmangle_uz2*f_mmangle_dtheta/ f_mmangle_r22;
                             if(f_mmangle_a1->active) then 
                             {
                                 f_mmangle_a1->fx:=f_mmangle_a1->fx+f_mmangle_ux1;
                                 f_mmangle_a1->fy:=f_mmangle_a1->fy+f_mmangle_uy1;
                                 f_mmangle_a1->fz:=f_mmangle_a1->fz+f_mmangle_uz1
                                 
                             }
                             else 
                             {
                                  skip 
                             };
                             if(f_mmangle_a2->active) then 
                             {
                                 f_mmangle_a2->fx:=f_mmangle_a2->fx+-f_mmangle_ux1-f_mmangle_ux2;
                                 f_mmangle_a2->fy:=f_mmangle_a2->fy+-f_mmangle_uy1-f_mmangle_uy2;
                                 f_mmangle_a2->fz:=f_mmangle_a2->fz+-f_mmangle_uz1-f_mmangle_uz2
                                 
                             }
                             else 
                             {
                                  skip 
                             };
                             if(f_mmangle_a3->active) then 
                             {
                                 f_mmangle_a3->fx:=f_mmangle_a3->fx+f_mmangle_ux2;
                                 f_mmangle_a3->fy:=f_mmangle_a3->fy+f_mmangle_uy2;
                                 f_mmangle_a3->fz:=f_mmangle_a3->fz+f_mmangle_uz2
                                 
                             }
                             else 
                             {
                                  skip 
                             }
                             
                         }
                         else 
                         {
                              skip 
                         }
                     }
                     else
                     {
                         skip
                     }
                 }
                 else
                 {
                     skip
                 }
                 
             }
             else 
             {
                  skip 
             };
             if(continue=0)  then
             {
                 if(return=0)  then
                 {
                     if(f_mmangle_bp=f_mmangle_bp->next$) then 
                     {
                         return<==1 and RValue:=1;
                         skip
                     }
                     else 
                     {
                          skip 
                     };
                     if(return=0)   then 
                     {
                         f_mmangle_bp:=f_mmangle_bp->next$
                     }
                     else
                     {
                         skip
                     }
                 }
                 else
                 {
                     skip
                 }
             }
             else
             {
                 skip
             }
         };
         continue<==0 and skip
     }
     else
     {
         skip
     }
     )
     }; 
  function a_angle ( float *V,float lambda,int ilow,int ihigh,FILE *op,int RValue )
 {
     frame(a_angle_bp,a_angle_r,a_angle_x1,a_angle_y1,a_angle_z1,a_angle_x2,a_angle_y2,a_angle_z2,a_angle_dp,a_angle_a1,a_angle_a2,a_angle_a3,return) and ( 
     int return<==0 and skip;
     ANGLE *a_angle_bp and skip;
     float a_angle_r,a_angle_x1,a_angle_y1,a_angle_z1,a_angle_x2,a_angle_y2,a_angle_z2 and skip;
     float a_angle_dp and skip;
     ATOM *a_angle_a1,*a_angle_a2,*a_angle_a3 and skip;
     a_angle_bp:=angle_first;
     if(a_angle_bp=NULL) then 
     {
         return<==1 and RValue:=1;
         skip
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         while( return=0 AND  1)
         {
             if(a_angle_bp=NULL) then 
             {
                 return<==1 and RValue:=0;
                 skip
             }
             else 
             {
                  skip 
             };
             if(return=0)   then 
             {
                 a_angle_a1:=a_angle_bp->atom1;
                 a_angle_a2:=a_angle_bp->atom2;
                 a_angle_a3:=a_angle_bp->atom3;
                 if((a_angle_a1->serial>=ilow AND a_angle_a1->serial<=ihigh) OR (a_angle_a2->serial>=ilow AND a_angle_a2->serial<=ihigh) OR (a_angle_a3->serial>=ilow AND a_angle_a3->serial<=ihigh)) then 
                 {
                     a_angle_x1:=(a_angle_a1->x-a_angle_a2->x+lambda*(a_angle_a1->dx-a_angle_a2->dx));
                     a_angle_y1:=(a_angle_a1->y-a_angle_a2->y+lambda*(a_angle_a1->dy-a_angle_a2->dy));
                     a_angle_z1:=(a_angle_a1->z-a_angle_a2->z+lambda*(a_angle_a1->dz-a_angle_a2->dz));
                     a_angle_x2:=(a_angle_a3->x-a_angle_a2->x+lambda*(a_angle_a3->dx-a_angle_a2->dx));
                     a_angle_y2:=(a_angle_a3->y-a_angle_a2->y+lambda*(a_angle_a3->dy-a_angle_a2->dy));
                     a_angle_z2:=(a_angle_a3->z-a_angle_a2->z+lambda*(a_angle_a3->dz-a_angle_a2->dz));
                     a_angle_dp:=a_angle_x1*a_angle_x2+a_angle_y1*a_angle_y2+a_angle_z1*a_angle_z2;
                     a_angle_r:=((a_angle_x1*a_angle_x1+a_angle_y1*a_angle_y1+a_angle_z1*a_angle_z1)*(a_angle_x2*a_angle_x2+a_angle_y2*a_angle_y2+a_angle_z2*a_angle_z2));
                     if(a_angle_r>1.e-8) then 
                     {
                         a_angle_r:=sqrt(a_angle_r);
                         a_angle_dp:=a_angle_dp/ a_angle_r;
                         if(a_angle_dp>1.0) then 
                         {
                             a_angle_dp:=1.0
                         }
                         else 
                         {
                              skip 
                         };
                         if(a_angle_dp<-1.0) then 
                         {
                             a_angle_dp:=-1.0
                         }
                         else 
                         {
                              skip 
                         };
                         a_angle_dp:=acos(a_angle_dp);
                         a_angle_z2:=a_angle_bp->k*(a_angle_bp->target-a_angle_dp)*(a_angle_bp->target-a_angle_dp);
                         * V:=* V+a_angle_z2;
                         fprintf(op,"Angle %s %d %s %d %s %d E %f value %f error %f\n",a_angle_a1->name,a_angle_a1->serial,a_angle_a2->name,a_angle_a2->serial,a_angle_a3->name,a_angle_a3->serial,a_angle_z2,a_angle_dp*180.0/ 3.14159265,(a_angle_dp-a_angle_bp->target)*180.0/ 3.14159265,RValue) and skip
                         
                     }
                     else 
                     {
                          skip 
                     }
                     
                 }
                 else 
                 {
                      skip 
                 };
                 if(a_angle_bp=a_angle_bp->next$) then 
                 {
                     return<==1 and RValue:=1;
                     skip
                 }
                 else 
                 {
                      skip 
                 };
                 if(return=0)   then 
                 {
                     a_angle_bp:=a_angle_bp->next$
                 }
                 else
                 {
                     skip
                 }
             }
             else
             {
                 skip
             }
         }
     }
     else
     {
         skip
     }
     )
     }; 
  function a_mmangle ( float *V,float lambda,int ilow,int ihigh,FILE *op,int RValue )
 {
     frame(a_mmangle_bp,a_mmangle_r,a_mmangle_x1,a_mmangle_y1,a_mmangle_z1,a_mmangle_x2,a_mmangle_y2,a_mmangle_z2,a_mmangle_dp,a_mmangle_a1,a_mmangle_a2,a_mmangle_a3,return) and ( 
     int return<==0 and skip;
     ANGLE *a_mmangle_bp and skip;
     float a_mmangle_r,a_mmangle_x1,a_mmangle_y1,a_mmangle_z1,a_mmangle_x2,a_mmangle_y2,a_mmangle_z2 and skip;
     float a_mmangle_dp and skip;
     ATOM *a_mmangle_a1,*a_mmangle_a2,*a_mmangle_a3 and skip;
     a_mmangle_bp:=angle_first;
     if(a_mmangle_bp=NULL) then 
     {
         return<==1 and RValue:=1;
         skip
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         while( return=0 AND  1)
         {
             if(a_mmangle_bp=NULL) then 
             {
                 return<==1 and RValue:=0;
                 skip
             }
             else 
             {
                  skip 
             };
             if(return=0)   then 
             {
                 a_mmangle_a1:=a_mmangle_bp->atom1;
                 a_mmangle_a2:=a_mmangle_bp->atom2;
                 a_mmangle_a3:=a_mmangle_bp->atom3;
                 if((a_mmangle_a1->serial>=ilow AND a_mmangle_a1->serial<=ihigh) OR (a_mmangle_a2->serial>=ilow AND a_mmangle_a2->serial<=ihigh) OR (a_mmangle_a3->serial>=ilow AND a_mmangle_a3->serial<=ihigh)) then 
                 {
                     a_mmangle_x1:=(a_mmangle_a1->x-a_mmangle_a2->x+lambda*(a_mmangle_a1->dx-a_mmangle_a2->dx));
                     a_mmangle_y1:=(a_mmangle_a1->y-a_mmangle_a2->y+lambda*(a_mmangle_a1->dy-a_mmangle_a2->dy));
                     a_mmangle_z1:=(a_mmangle_a1->z-a_mmangle_a2->z+lambda*(a_mmangle_a1->dz-a_mmangle_a2->dz));
                     a_mmangle_x2:=(a_mmangle_a3->x-a_mmangle_a2->x+lambda*(a_mmangle_a3->dx-a_mmangle_a2->dx));
                     a_mmangle_y2:=(a_mmangle_a3->y-a_mmangle_a2->y+lambda*(a_mmangle_a3->dy-a_mmangle_a2->dy));
                     a_mmangle_z2:=(a_mmangle_a3->z-a_mmangle_a2->z+lambda*(a_mmangle_a3->dz-a_mmangle_a2->dz));
                     a_mmangle_dp:=a_mmangle_x1*a_mmangle_x2+a_mmangle_y1*a_mmangle_y2+a_mmangle_z1*a_mmangle_z2;
                     a_mmangle_r:=((a_mmangle_x1*a_mmangle_x1+a_mmangle_y1*a_mmangle_y1+a_mmangle_z1*a_mmangle_z1)*(a_mmangle_x2*a_mmangle_x2+a_mmangle_y2*a_mmangle_y2+a_mmangle_z2*a_mmangle_z2));
                     if(a_mmangle_r>1.e-8) then 
                     {
                         a_mmangle_r:=sqrt(a_mmangle_r);
                         a_mmangle_dp:=a_mmangle_dp/ a_mmangle_r;
                         if(a_mmangle_dp>1.0) then 
                         {
                             a_mmangle_dp:=1.0
                         }
                         else 
                         {
                              skip 
                         };
                         if(a_mmangle_dp<-1.0) then 
                         {
                             a_mmangle_dp:=-1.0
                         }
                         else 
                         {
                              skip 
                         };
                         a_mmangle_dp:=acos(a_mmangle_dp);
                         a_mmangle_dp:=a_mmangle_dp-a_mmangle_bp->target;
                         a_mmangle_z2:=a_mmangle_bp->k*a_mmangle_dp*a_mmangle_dp*(1.0-0.014*a_mmangle_dp+5.6e-5*a_mmangle_dp*a_mmangle_dp-7.e-7*a_mmangle_dp*a_mmangle_dp*a_mmangle_dp+9e-10*a_mmangle_dp*a_mmangle_dp*a_mmangle_dp*a_mmangle_dp);
                         * V:=* V+a_mmangle_z2;
                         a_mmangle_dp:=a_mmangle_dp+a_mmangle_bp->target;
                         fprintf(op,"mmAngle %s %d %s %d %s %d E %f value %f error %f\n",a_mmangle_a1->name,a_mmangle_a1->serial,a_mmangle_a2->name,a_mmangle_a2->serial,a_mmangle_a3->name,a_mmangle_a3->serial,a_mmangle_z2,a_mmangle_dp*180.0/ 3.14159265,(a_mmangle_dp-a_mmangle_bp->target)*180.0/ 3.14159265,RValue) and skip
                         
                     }
                     else 
                     {
                          skip 
                     }
                     
                 }
                 else 
                 {
                      skip 
                 };
                 if(a_mmangle_bp=a_mmangle_bp->next$) then 
                 {
                     return<==1 and RValue:=1;
                     skip
                 }
                 else 
                 {
                      skip 
                 };
                 if(return=0)   then 
                 {
                     a_mmangle_bp:=a_mmangle_bp->next$
                 }
                 else
                 {
                     skip
                 }
             }
             else
             {
                 skip
             }
         }
     }
     else
     {
         skip
     }
     )
     }; 
  function v_c_angle ( float *V,float lambda,int RValue )
 {
     frame(v_c_angle_bp,v_c_angle_r,v_c_angle_x1,v_c_angle_y1,v_c_angle_z1,v_c_angle_x2,v_c_angle_y2,v_c_angle_z2,v_c_angle_dp,v_c_angle_a1,v_c_angle_a2,v_c_angle_a3,v_c_angle_C0,v_c_angle_C1,v_c_angle_C2,return) and ( 
     int return<==0 and skip;
     ANGLE *v_c_angle_bp and skip;
     float v_c_angle_r,v_c_angle_x1,v_c_angle_y1,v_c_angle_z1,v_c_angle_x2,v_c_angle_y2,v_c_angle_z2 and skip;
     float v_c_angle_dp and skip;
     ATOM *v_c_angle_a1,*v_c_angle_a2,*v_c_angle_a3 and skip;
     float v_c_angle_C0,v_c_angle_C1,v_c_angle_C2 and skip;
     v_c_angle_bp:=angle_first;
     if(v_c_angle_bp=NULL) then 
     {
         return<==1 and RValue:=1;
         skip
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         while( return=0 AND  1)
         {
             if(v_c_angle_bp=NULL) then 
             {
                 return<==1 and RValue:=0;
                 skip
             }
             else 
             {
                  skip 
             };
             if(return=0)   then 
             {
                 v_c_angle_a1:=v_c_angle_bp->atom1;
                 v_c_angle_a2:=v_c_angle_bp->atom2;
                 v_c_angle_a3:=v_c_angle_bp->atom3;
                 if(v_c_angle_a1->active OR v_c_angle_a2->active OR v_c_angle_a3->active) then 
                 {
                     v_c_angle_x1:=(v_c_angle_a1->x-v_c_angle_a2->x+lambda*(v_c_angle_a1->dx-v_c_angle_a2->dx));
                     v_c_angle_y1:=(v_c_angle_a1->y-v_c_angle_a2->y+lambda*(v_c_angle_a1->dy-v_c_angle_a2->dy));
                     v_c_angle_z1:=(v_c_angle_a1->z-v_c_angle_a2->z+lambda*(v_c_angle_a1->dz-v_c_angle_a2->dz));
                     v_c_angle_x2:=(v_c_angle_a3->x-v_c_angle_a2->x+lambda*(v_c_angle_a3->dx-v_c_angle_a2->dx));
                     v_c_angle_y2:=(v_c_angle_a3->y-v_c_angle_a2->y+lambda*(v_c_angle_a3->dy-v_c_angle_a2->dy));
                     v_c_angle_z2:=(v_c_angle_a3->z-v_c_angle_a2->z+lambda*(v_c_angle_a3->dz-v_c_angle_a2->dz));
                     v_c_angle_dp:=v_c_angle_x1*v_c_angle_x2+v_c_angle_y1*v_c_angle_y2+v_c_angle_z1*v_c_angle_z2;
                     v_c_angle_r:=((v_c_angle_x1*v_c_angle_x1+v_c_angle_y1*v_c_angle_y1+v_c_angle_z1*v_c_angle_z1)*(v_c_angle_x2*v_c_angle_x2+v_c_angle_y2*v_c_angle_y2+v_c_angle_z2*v_c_angle_z2));
                     if(v_c_angle_r>1.e-8) then 
                     {
                         v_c_angle_r:=sqrt(v_c_angle_r);
                         v_c_angle_dp:=v_c_angle_dp/ v_c_angle_r;
                         if(v_c_angle_dp>1.0) then 
                         {
                             v_c_angle_dp:=1.0
                         }
                         else 
                         {
                              skip 
                         };
                         if(v_c_angle_dp<-1.0) then 
                         {
                             v_c_angle_dp:=-1.0
                         }
                         else 
                         {
                              skip 
                         };
                         v_c_angle_r:=v_c_angle_dp;
                         v_c_angle_dp:=acos(v_c_angle_dp);
                         v_c_angle_C0:=cos(v_c_angle_bp->target);
                         v_c_angle_C2:=1.0/ (4.0-4*v_c_angle_C0*v_c_angle_C0);
                         v_c_angle_C1:=-4.0*v_c_angle_C2*v_c_angle_C0;
                         v_c_angle_C0:=v_c_angle_C2*(2*v_c_angle_C0*v_c_angle_C0+1);
                         * V:=* V+2*v_c_angle_bp->k*(v_c_angle_C0+v_c_angle_C1*v_c_angle_r+v_c_angle_C2*cos(v_c_angle_dp*2))
                         
                     }
                     else 
                     {
                          skip 
                     }
                     
                 }
                 else 
                 {
                      skip 
                 };
                 if(v_c_angle_bp=v_c_angle_bp->next$) then 
                 {
                     return<==1 and RValue:=1;
                     skip
                 }
                 else 
                 {
                      skip 
                 };
                 if(return=0)   then 
                 {
                     v_c_angle_bp:=v_c_angle_bp->next$
                 }
                 else
                 {
                     skip
                 }
             }
             else
             {
                 skip
             }
         }
     }
     else
     {
         skip
     }
     )
     }; 
  function f_c_angle ( float lambda,int RValue )
 {
     frame(f_c_angle_bp,f_c_angle_r,f_c_angle_k,f_c_angle_ux1,f_c_angle_uy1,f_c_angle_uz1,f_c_angle_ux2,f_c_angle_uy2,f_c_angle_uz2,f_c_angle_a1,f_c_angle_a2,f_c_angle_a3,f_c_angle_x1,f_c_angle_y1,f_c_angle_z1,f_c_angle_x2,f_c_angle_y2,f_c_angle_z2,f_c_angle_r1,f_c_angle_r2,f_c_angle_dtheta,f_c_angle_dp,f_c_angle_r11,f_c_angle_r22,f_c_angle_sdth,f_c_angle_C0,f_c_angle_C1,f_c_angle_C2,return,continue) and ( 
     int continue<==0 and skip;
     int return<==0 and skip;
     ANGLE *f_c_angle_bp and skip;
     float f_c_angle_r,f_c_angle_k,f_c_angle_ux1,f_c_angle_uy1,f_c_angle_uz1,f_c_angle_ux2,f_c_angle_uy2,f_c_angle_uz2 and skip;
     ATOM *f_c_angle_a1,*f_c_angle_a2,*f_c_angle_a3 and skip;
     float f_c_angle_x1,f_c_angle_y1,f_c_angle_z1,f_c_angle_x2,f_c_angle_y2,f_c_angle_z2 and skip;
     float f_c_angle_r1,f_c_angle_r2,f_c_angle_dtheta,f_c_angle_dp and skip;
     float f_c_angle_r11,f_c_angle_r22,f_c_angle_sdth and skip;
     float f_c_angle_C0,f_c_angle_C1,f_c_angle_C2 and skip;
     f_c_angle_bp:=angle_first;
     if(f_c_angle_bp=NULL) then 
     {
         return<==1 and RValue:=1;
         skip
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         while( return=0 AND  1)
         {
             continue<==0 and skip;
             if(f_c_angle_bp=NULL) then 
             {
                 return<==1 and RValue:=0;
                 skip
             }
             else 
             {
                  skip 
             };
             if(return=0)   then 
             {
                 f_c_angle_k:=f_c_angle_bp->k;
                 f_c_angle_a1:=f_c_angle_bp->atom1;
                 f_c_angle_a2:=f_c_angle_bp->atom2;
                 f_c_angle_a3:=f_c_angle_bp->atom3;
                 if(f_c_angle_a1->active OR f_c_angle_a2->active OR f_c_angle_a3->active) then 
                 {
                     f_c_angle_x1:=(f_c_angle_a1->x-f_c_angle_a2->x+lambda*(f_c_angle_a1->dx-f_c_angle_a2->dx));
                     f_c_angle_y1:=(f_c_angle_a1->y-f_c_angle_a2->y+lambda*(f_c_angle_a1->dy-f_c_angle_a2->dy));
                     f_c_angle_z1:=(f_c_angle_a1->z-f_c_angle_a2->z+lambda*(f_c_angle_a1->dz-f_c_angle_a2->dz));
                     f_c_angle_x2:=(f_c_angle_a3->x-f_c_angle_a2->x+lambda*(f_c_angle_a3->dx-f_c_angle_a2->dx));
                     f_c_angle_y2:=(f_c_angle_a3->y-f_c_angle_a2->y+lambda*(f_c_angle_a3->dy-f_c_angle_a2->dy));
                     f_c_angle_z2:=(f_c_angle_a3->z-f_c_angle_a2->z+lambda*(f_c_angle_a3->dz-f_c_angle_a2->dz));
                     f_c_angle_dp:=f_c_angle_x1*f_c_angle_x2+f_c_angle_y1*f_c_angle_y2+f_c_angle_z1*f_c_angle_z2;
                     f_c_angle_r1:=sqrt(f_c_angle_x1*f_c_angle_x1+f_c_angle_y1*f_c_angle_y1+f_c_angle_z1*f_c_angle_z1);
                     f_c_angle_r2:=sqrt(f_c_angle_x2*f_c_angle_x2+f_c_angle_y2*f_c_angle_y2+f_c_angle_z2*f_c_angle_z2);
                     if(f_c_angle_r1<1.e-5 OR f_c_angle_r2<1.e-5) then 
                     {
                         if(f_c_angle_bp=f_c_angle_bp->next$) then 
                         {
                             return<==1 and RValue:=1;
                             skip
                         }
                         else 
                         {
                              skip 
                         };
                         if(return=0)   then 
                         {
                             f_c_angle_bp:=f_c_angle_bp->next$;
                             continue<==1 and skip
                          }
                         else
                         {
                             skip
                         }
                     }
                     else
                     {
                         skip
                     }
                     
                 }
                 else 
                 {
                      skip 
                 };
                 if(continue=0)   then 
                 {
                     if(return=0)  then
                     {
                         f_c_angle_r:=f_c_angle_r1*f_c_angle_r2;
                         if(f_c_angle_r>1.e-8) then 
                         {
                             f_c_angle_dp:=f_c_angle_dp/ f_c_angle_r;
                             if(f_c_angle_dp>1.0) then 
                             {
                                 f_c_angle_dp:=1.0
                             }
                             else 
                             {
                                  skip 
                             };
                             if(f_c_angle_dp<-1.0) then 
                             {
                                 f_c_angle_dp:=-1.0
                             }
                             else 
                             {
                                  skip 
                             };
                             f_c_angle_dtheta:=acos(f_c_angle_dp);
                             f_c_angle_sdth:=sin(f_c_angle_dtheta);
                             if(f_c_angle_sdth<1.e-3) then 
                             {
                                 f_c_angle_sdth:=1.e-3
                             }
                             else 
                             {
                                  skip 
                             };
                             f_c_angle_r11:=f_c_angle_r1*f_c_angle_sdth;
                             f_c_angle_r22:=f_c_angle_r2*f_c_angle_sdth;
                             f_c_angle_ux1:=f_c_angle_x2/ f_c_angle_r2-f_c_angle_dp*f_c_angle_x1/ f_c_angle_r1;
                             f_c_angle_uy1:=f_c_angle_y2/ f_c_angle_r2-f_c_angle_dp*f_c_angle_y1/ f_c_angle_r1;
                             f_c_angle_uz1:=f_c_angle_z2/ f_c_angle_r2-f_c_angle_dp*f_c_angle_z1/ f_c_angle_r1;
                             f_c_angle_ux2:=f_c_angle_x1/ f_c_angle_r1-f_c_angle_dp*f_c_angle_x2/ f_c_angle_r2;
                             f_c_angle_uy2:=f_c_angle_y1/ f_c_angle_r1-f_c_angle_dp*f_c_angle_y2/ f_c_angle_r2;
                             f_c_angle_uz2:=f_c_angle_z1/ f_c_angle_r1-f_c_angle_dp*f_c_angle_z2/ f_c_angle_r2;
                             f_c_angle_C0:=cos(f_c_angle_bp->target);
                             f_c_angle_C2:=1.0/ (4.0-4*f_c_angle_C0*f_c_angle_C0);
                             f_c_angle_C1:=-4.0*f_c_angle_C2*f_c_angle_C0;
                             f_c_angle_C0:=f_c_angle_C2*(2*f_c_angle_C0*f_c_angle_C0+1);
                             f_c_angle_dtheta:=-2.0*f_c_angle_bp->k*(f_c_angle_C1*f_c_angle_sdth+2*f_c_angle_C2*sin(f_c_angle_dtheta*2));
                             f_c_angle_ux1:=f_c_angle_ux1*f_c_angle_dtheta/ f_c_angle_r11;
                             f_c_angle_uy1:=f_c_angle_uy1*f_c_angle_dtheta/ f_c_angle_r11;
                             f_c_angle_uz1:=f_c_angle_uz1*f_c_angle_dtheta/ f_c_angle_r11;
                             f_c_angle_ux2:=f_c_angle_ux2*f_c_angle_dtheta/ f_c_angle_r22;
                             f_c_angle_uy2:=f_c_angle_uy2*f_c_angle_dtheta/ f_c_angle_r22;
                             f_c_angle_uz2:=f_c_angle_uz2*f_c_angle_dtheta/ f_c_angle_r22;
                             if(f_c_angle_a1->active) then 
                             {
                                 f_c_angle_a1->fx:=f_c_angle_a1->fx+f_c_angle_ux1;
                                 f_c_angle_a1->fy:=f_c_angle_a1->fy+f_c_angle_uy1;
                                 f_c_angle_a1->fz:=f_c_angle_a1->fz+f_c_angle_uz1
                                 
                             }
                             else 
                             {
                                  skip 
                             };
                             if(f_c_angle_a2->active) then 
                             {
                                 f_c_angle_a2->fx:=f_c_angle_a2->fx+-f_c_angle_ux1-f_c_angle_ux2;
                                 f_c_angle_a2->fy:=f_c_angle_a2->fy+-f_c_angle_uy1-f_c_angle_uy2;
                                 f_c_angle_a2->fz:=f_c_angle_a2->fz+-f_c_angle_uz1-f_c_angle_uz2
                                 
                             }
                             else 
                             {
                                  skip 
                             };
                             if(f_c_angle_a3->active) then 
                             {
                                 f_c_angle_a3->fx:=f_c_angle_a3->fx+f_c_angle_ux2;
                                 f_c_angle_a3->fy:=f_c_angle_a3->fy+f_c_angle_uy2;
                                 f_c_angle_a3->fz:=f_c_angle_a3->fz+f_c_angle_uz2
                                 
                             }
                             else 
                             {
                                  skip 
                             }
                             
                         }
                         else 
                         {
                              skip 
                         }
                     }
                     else
                     {
                         skip
                     }
                 }
                 else
                 {
                     skip
                 }
                 
             }
             else 
             {
                  skip 
             };
             if(continue=0)  then
             {
                 if(return=0)  then
                 {
                     if(f_c_angle_bp=f_c_angle_bp->next$) then 
                     {
                         return<==1 and RValue:=1;
                         skip
                     }
                     else 
                     {
                          skip 
                     };
                     if(return=0)   then 
                     {
                         f_c_angle_bp:=f_c_angle_bp->next$
                     }
                     else
                     {
                         skip
                     }
                 }
                 else
                 {
                     skip
                 }
             }
             else
             {
                 skip
             }
         };
         continue<==0 and skip
     }
     else
     {
         skip
     }
     )
     }; 
  function a_c_angle ( float *V,float lambda,int ilow,int ihigh,FILE *op,int RValue )
 {
     frame(a_c_angle_bp,a_c_angle_r,a_c_angle_x1,a_c_angle_y1,a_c_angle_z1,a_c_angle_x2,a_c_angle_y2,a_c_angle_z2,a_c_angle_dp,a_c_angle_a1,a_c_angle_a2,a_c_angle_a3,a_c_angle_C0,a_c_angle_C1,a_c_angle_C2,return) and ( 
     int return<==0 and skip;
     ANGLE *a_c_angle_bp and skip;
     float a_c_angle_r,a_c_angle_x1,a_c_angle_y1,a_c_angle_z1,a_c_angle_x2,a_c_angle_y2,a_c_angle_z2 and skip;
     float a_c_angle_dp and skip;
     ATOM *a_c_angle_a1,*a_c_angle_a2,*a_c_angle_a3 and skip;
     float a_c_angle_C0,a_c_angle_C1,a_c_angle_C2 and skip;
     a_c_angle_bp:=angle_first;
     if(a_c_angle_bp=NULL) then 
     {
         return<==1 and RValue:=1;
         skip
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         while( return=0 AND  1)
         {
             if(a_c_angle_bp=NULL) then 
             {
                 return<==1 and RValue:=0;
                 skip
             }
             else 
             {
                  skip 
             };
             if(return=0)   then 
             {
                 a_c_angle_a1:=a_c_angle_bp->atom1;
                 a_c_angle_a2:=a_c_angle_bp->atom2;
                 a_c_angle_a3:=a_c_angle_bp->atom3;
                 if((a_c_angle_a1->serial>=ilow AND a_c_angle_a1->serial<=ihigh) OR (a_c_angle_a2->serial>=ilow AND a_c_angle_a2->serial<=ihigh) OR (a_c_angle_a3->serial>=ilow AND a_c_angle_a3->serial<=ihigh)) then 
                 {
                     a_c_angle_x1:=(a_c_angle_a1->x-a_c_angle_a2->x+lambda*(a_c_angle_a1->dx-a_c_angle_a2->dx));
                     a_c_angle_y1:=(a_c_angle_a1->y-a_c_angle_a2->y+lambda*(a_c_angle_a1->dy-a_c_angle_a2->dy));
                     a_c_angle_z1:=(a_c_angle_a1->z-a_c_angle_a2->z+lambda*(a_c_angle_a1->dz-a_c_angle_a2->dz));
                     a_c_angle_x2:=(a_c_angle_a3->x-a_c_angle_a2->x+lambda*(a_c_angle_a3->dx-a_c_angle_a2->dx));
                     a_c_angle_y2:=(a_c_angle_a3->y-a_c_angle_a2->y+lambda*(a_c_angle_a3->dy-a_c_angle_a2->dy));
                     a_c_angle_z2:=(a_c_angle_a3->z-a_c_angle_a2->z+lambda*(a_c_angle_a3->dz-a_c_angle_a2->dz));
                     a_c_angle_dp:=a_c_angle_x1*a_c_angle_x2+a_c_angle_y1*a_c_angle_y2+a_c_angle_z1*a_c_angle_z2;
                     a_c_angle_r:=((a_c_angle_x1*a_c_angle_x1+a_c_angle_y1*a_c_angle_y1+a_c_angle_z1*a_c_angle_z1)*(a_c_angle_x2*a_c_angle_x2+a_c_angle_y2*a_c_angle_y2+a_c_angle_z2*a_c_angle_z2));
                     if(a_c_angle_r>1.e-8) then 
                     {
                         a_c_angle_r:=sqrt(a_c_angle_r);
                         a_c_angle_dp:=a_c_angle_dp/ a_c_angle_r;
                         if(a_c_angle_dp>1.0) then 
                         {
                             a_c_angle_dp:=1.0
                         }
                         else 
                         {
                              skip 
                         };
                         if(a_c_angle_dp<-1.0) then 
                         {
                             a_c_angle_dp:=-1.0
                         }
                         else 
                         {
                              skip 
                         };
                         a_c_angle_r:=a_c_angle_dp;
                         a_c_angle_dp:=acos(a_c_angle_dp);
                         a_c_angle_C0:=cos(a_c_angle_bp->target);
                         a_c_angle_C2:=1.0/ (4.0-4*a_c_angle_C0*a_c_angle_C0);
                         a_c_angle_C1:=-4.0*a_c_angle_C2*a_c_angle_C0;
                         a_c_angle_C0:=a_c_angle_C2*(2*a_c_angle_C0*a_c_angle_C0+1);
                         * V:=* V+2*a_c_angle_bp->k*(a_c_angle_C0+a_c_angle_C1*a_c_angle_r+a_c_angle_C2*cos(a_c_angle_dp*2));
                         fprintf(op,"c Angle %s %d %s %d %s %d E %f value %f error %f\n",a_c_angle_a1->name,a_c_angle_a1->serial,a_c_angle_a2->name,a_c_angle_a2->serial,a_c_angle_a3->name,a_c_angle_a3->serial,a_c_angle_z2,a_c_angle_dp*180.0/ 3.14159265,(a_c_angle_dp-a_c_angle_bp->target)*180.0/ 3.14159265,RValue) and skip
                         
                     }
                     else 
                     {
                          skip 
                     }
                     
                 }
                 else 
                 {
                      skip 
                 };
                 if(a_c_angle_bp=a_c_angle_bp->next$) then 
                 {
                     return<==1 and RValue:=1;
                     skip
                 }
                 else 
                 {
                      skip 
                 };
                 if(return=0)   then 
                 {
                     a_c_angle_bp:=a_c_angle_bp->next$
                 }
                 else
                 {
                     skip
                 }
             }
             else
             {
                 skip
             }
         }
     }
     else
     {
         skip
     }
     )
     }; 
  function gsdg_angle ( ATOM *who,int RValue )
 {
     frame(gsdg_angle_bp,gsdg_angle_ap,gsdg_angle_ap1,gsdg_angle_r,gsdg_angle_r1,gsdg_angle_theta,return) and ( 
     int return<==0 and skip;
     ANGLE *gsdg_angle_bp and skip;
     ATOM *gsdg_angle_ap,*gsdg_angle_ap1 and skip;
     float gsdg_angle_r,gsdg_angle_r1,gsdg_angle_theta and skip;
     gsdg_angle_bp:=angle_first;
     while( return=0 AND  1)
     {
         if(gsdg_angle_bp=NULL) then 
         {
             return<==1 and RValue:=0;
             skip
         }
         else 
         {
              skip 
         };
         if(return=0)   then 
         {
             if(gsdg_angle_bp->atom1=who) then 
             {
                 gsdg_angle_ap1:=gsdg_angle_bp->atom2;
                 gsdg_angle_ap:=gsdg_angle_bp->atom3;
                 gsdg_angle_r:=bond_length(who,gsdg_angle_ap1,RValue);
                 gsdg_angle_r1:=bond_length(gsdg_angle_ap1,gsdg_angle_ap,RValue);
                 gsdg_angle_theta:=gsdg_angle_r*gsdg_angle_r+gsdg_angle_r1*gsdg_angle_r1-2*cos(gsdg_angle_bp->target)*gsdg_angle_r*gsdg_angle_r1;
                 gsdg_angle_ap->vx:=gsdg_angle_theta;
                 gsdg_angle_ap->vy:=gsdg_angle_bp->k
                 
             }
             else 
             {
                  skip 
             };
             if(gsdg_angle_bp->atom3=who) then 
             {
                 gsdg_angle_ap1:=gsdg_angle_bp->atom2;
                 gsdg_angle_ap:=gsdg_angle_bp->atom1;
                 gsdg_angle_r:=bond_length(who,gsdg_angle_ap1,RValue);
                 gsdg_angle_r1:=bond_length(gsdg_angle_ap1,gsdg_angle_ap,RValue);
                 gsdg_angle_theta:=gsdg_angle_r*gsdg_angle_r+gsdg_angle_r1*gsdg_angle_r1-2*cos(gsdg_angle_bp->target)*gsdg_angle_r*gsdg_angle_r1;
                 gsdg_angle_ap->vx:=gsdg_angle_theta;
                 gsdg_angle_ap->vy:=gsdg_angle_bp->k
                 
             }
             else 
             {
                  skip 
             };
             if(gsdg_angle_bp=gsdg_angle_bp->next$) then 
             {
                 return<==1 and RValue:=0;
                 skip
             }
             else 
             {
                  skip 
             };
             if(return=0)   then 
             {
                 gsdg_angle_bp:=gsdg_angle_bp->next$
             }
             else
             {
                 skip
             }
         }
         else
         {
             skip
         }
     }
     )
     }; 
  function v_ho_angle ( float *V,float lambda,int RValue )
 {
     frame(v_ho_angle_bp,v_ho_angle_r,v_ho_angle_x1,v_ho_angle_y1,v_ho_angle_z1,v_ho_angle_x2,v_ho_angle_y2,v_ho_angle_z2,v_ho_angle_dp,v_ho_angle_a1,v_ho_angle_a2,v_ho_angle_a3,v_ho_angle_hol,v_ho_angle_target,return) and ( 
     int return<==0 and skip;
     ANGLE *v_ho_angle_bp and skip;
     float v_ho_angle_r,v_ho_angle_x1,v_ho_angle_y1,v_ho_angle_z1,v_ho_angle_x2,v_ho_angle_y2,v_ho_angle_z2 and skip;
     float v_ho_angle_dp and skip;
     ATOM *v_ho_angle_a1,*v_ho_angle_a2,*v_ho_angle_a3 and skip;
     float v_ho_angle_hol,v_ho_angle_target and skip;
     v_ho_angle_hol:=get_f_variable("lambda",RValue);
     if(v_ho_angle_hol<0.0) then 
     {
         v_ho_angle_hol:=0.0
     }
     else 
     {
          skip 
     };
     if(v_ho_angle_hol>1.0) then 
     {
         v_ho_angle_hol:=1.0
     }
     else 
     {
          skip 
     };
     v_ho_angle_bp:=angle_first;
     if(v_ho_angle_bp=NULL) then 
     {
         return<==1 and RValue:=1;
         skip
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         while( return=0 AND  1)
         {
             if(v_ho_angle_bp=NULL) then 
             {
                 return<==1 and RValue:=0;
                 skip
             }
             else 
             {
                  skip 
             };
             if(return=0)   then 
             {
                 v_ho_angle_a1:=v_ho_angle_bp->atom1;
                 v_ho_angle_a2:=v_ho_angle_bp->atom2;
                 v_ho_angle_a3:=v_ho_angle_bp->atom3;
                 if(v_ho_angle_a1->active OR v_ho_angle_a2->active OR v_ho_angle_a3->active) then 
                 {
                     v_ho_angle_x1:=(v_ho_angle_a1->x-v_ho_angle_a2->x+lambda*(v_ho_angle_a1->dx-v_ho_angle_a2->dx));
                     v_ho_angle_y1:=(v_ho_angle_a1->y-v_ho_angle_a2->y+lambda*(v_ho_angle_a1->dy-v_ho_angle_a2->dy));
                     v_ho_angle_z1:=(v_ho_angle_a1->z-v_ho_angle_a2->z+lambda*(v_ho_angle_a1->dz-v_ho_angle_a2->dz));
                     v_ho_angle_x2:=(v_ho_angle_a3->x-v_ho_angle_a2->x+lambda*(v_ho_angle_a3->dx-v_ho_angle_a2->dx));
                     v_ho_angle_y2:=(v_ho_angle_a3->y-v_ho_angle_a2->y+lambda*(v_ho_angle_a3->dy-v_ho_angle_a2->dy));
                     v_ho_angle_z2:=(v_ho_angle_a3->z-v_ho_angle_a2->z+lambda*(v_ho_angle_a3->dz-v_ho_angle_a2->dz));
                     v_ho_angle_dp:=v_ho_angle_x1*v_ho_angle_x2+v_ho_angle_y1*v_ho_angle_y2+v_ho_angle_z1*v_ho_angle_z2;
                     v_ho_angle_r:=((v_ho_angle_x1*v_ho_angle_x1+v_ho_angle_y1*v_ho_angle_y1+v_ho_angle_z1*v_ho_angle_z1)*(v_ho_angle_x2*v_ho_angle_x2+v_ho_angle_y2*v_ho_angle_y2+v_ho_angle_z2*v_ho_angle_z2));
                     if(v_ho_angle_r>1.e-8) then 
                     {
                         v_ho_angle_r:=sqrt(v_ho_angle_r);
                         v_ho_angle_dp:=v_ho_angle_dp/ v_ho_angle_r;
                         if(v_ho_angle_dp>1.0) then 
                         {
                             v_ho_angle_dp:=1.0
                         }
                         else 
                         {
                              skip 
                         };
                         if(v_ho_angle_dp<-1.0) then 
                         {
                             v_ho_angle_dp:=-1.0
                         }
                         else 
                         {
                              skip 
                         };
                         v_ho_angle_dp:=acos(v_ho_angle_dp);
                         v_ho_angle_target:=v_ho_angle_hol*v_ho_angle_dp+(1.0-v_ho_angle_hol)*v_ho_angle_bp->target;
                         * V:=* V+v_ho_angle_bp->k*(v_ho_angle_target-v_ho_angle_dp)*(v_ho_angle_target-v_ho_angle_dp)
                         
                     }
                     else 
                     {
                          skip 
                     }
                     
                 }
                 else 
                 {
                      skip 
                 };
                 if(v_ho_angle_bp=v_ho_angle_bp->next$) then 
                 {
                     return<==1 and RValue:=1;
                     skip
                 }
                 else 
                 {
                      skip 
                 };
                 if(return=0)   then 
                 {
                     v_ho_angle_bp:=v_ho_angle_bp->next$
                 }
                 else
                 {
                     skip
                 }
             }
             else
             {
                 skip
             }
         }
     }
     else
     {
         skip
     }
     )
     }; 
  function f_ho_angle ( float lambda,int RValue )
 {
     frame(f_ho_angle_bp,f_ho_angle_r,f_ho_angle_k,f_ho_angle_ux1,f_ho_angle_uy1,f_ho_angle_uz1,f_ho_angle_ux2,f_ho_angle_uy2,f_ho_angle_uz2,f_ho_angle_a1,f_ho_angle_a2,f_ho_angle_a3,f_ho_angle_x1,f_ho_angle_y1,f_ho_angle_z1,f_ho_angle_x2,f_ho_angle_y2,f_ho_angle_z2,f_ho_angle_r1,f_ho_angle_r2,f_ho_angle_dtheta,f_ho_angle_dp,f_ho_angle_r11,f_ho_angle_r22,f_ho_angle_sdth,f_ho_angle_hol,f_ho_angle_target,return,continue) and ( 
     int continue<==0 and skip;
     int return<==0 and skip;
     ANGLE *f_ho_angle_bp and skip;
     float f_ho_angle_r,f_ho_angle_k,f_ho_angle_ux1,f_ho_angle_uy1,f_ho_angle_uz1,f_ho_angle_ux2,f_ho_angle_uy2,f_ho_angle_uz2 and skip;
     ATOM *f_ho_angle_a1,*f_ho_angle_a2,*f_ho_angle_a3 and skip;
     float f_ho_angle_x1,f_ho_angle_y1,f_ho_angle_z1,f_ho_angle_x2,f_ho_angle_y2,f_ho_angle_z2 and skip;
     float f_ho_angle_r1,f_ho_angle_r2,f_ho_angle_dtheta,f_ho_angle_dp and skip;
     float f_ho_angle_r11,f_ho_angle_r22,f_ho_angle_sdth and skip;
     float f_ho_angle_hol,f_ho_angle_target and skip;
     f_ho_angle_hol:=get_f_variable("lambda",RValue);
     if(f_ho_angle_hol<0.0) then 
     {
         f_ho_angle_hol:=0.0
     }
     else 
     {
          skip 
     };
     if(f_ho_angle_hol>1.0) then 
     {
         f_ho_angle_hol:=1.0
     }
     else 
     {
          skip 
     };
     f_ho_angle_bp:=angle_first;
     if(f_ho_angle_bp=NULL) then 
     {
         return<==1 and RValue:=1;
         skip
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         while( return=0 AND  1)
         {
             continue<==0 and skip;
             if(f_ho_angle_bp=NULL) then 
             {
                 return<==1 and RValue:=0;
                 skip
             }
             else 
             {
                  skip 
             };
             if(return=0)   then 
             {
                 f_ho_angle_k:=f_ho_angle_bp->k;
                 f_ho_angle_a1:=f_ho_angle_bp->atom1;
                 f_ho_angle_a2:=f_ho_angle_bp->atom2;
                 f_ho_angle_a3:=f_ho_angle_bp->atom3;
                 if(f_ho_angle_a1->active OR f_ho_angle_a2->active OR f_ho_angle_a3->active) then 
                 {
                     f_ho_angle_x1:=(f_ho_angle_a1->x-f_ho_angle_a2->x+lambda*(f_ho_angle_a1->dx-f_ho_angle_a2->dx));
                     f_ho_angle_y1:=(f_ho_angle_a1->y-f_ho_angle_a2->y+lambda*(f_ho_angle_a1->dy-f_ho_angle_a2->dy));
                     f_ho_angle_z1:=(f_ho_angle_a1->z-f_ho_angle_a2->z+lambda*(f_ho_angle_a1->dz-f_ho_angle_a2->dz));
                     f_ho_angle_x2:=(f_ho_angle_a3->x-f_ho_angle_a2->x+lambda*(f_ho_angle_a3->dx-f_ho_angle_a2->dx));
                     f_ho_angle_y2:=(f_ho_angle_a3->y-f_ho_angle_a2->y+lambda*(f_ho_angle_a3->dy-f_ho_angle_a2->dy));
                     f_ho_angle_z2:=(f_ho_angle_a3->z-f_ho_angle_a2->z+lambda*(f_ho_angle_a3->dz-f_ho_angle_a2->dz));
                     f_ho_angle_dp:=f_ho_angle_x1*f_ho_angle_x2+f_ho_angle_y1*f_ho_angle_y2+f_ho_angle_z1*f_ho_angle_z2;
                     f_ho_angle_r1:=sqrt(f_ho_angle_x1*f_ho_angle_x1+f_ho_angle_y1*f_ho_angle_y1+f_ho_angle_z1*f_ho_angle_z1);
                     f_ho_angle_r2:=sqrt(f_ho_angle_x2*f_ho_angle_x2+f_ho_angle_y2*f_ho_angle_y2+f_ho_angle_z2*f_ho_angle_z2);
                     if(f_ho_angle_r1<1.e-5 OR f_ho_angle_r2<1.e-5) then 
                     {
                         if(f_ho_angle_bp=f_ho_angle_bp->next$) then 
                         {
                             return<==1 and RValue:=1;
                             skip
                         }
                         else 
                         {
                              skip 
                         };
                         if(return=0)   then 
                         {
                             f_ho_angle_bp:=f_ho_angle_bp->next$;
                             continue<==1 and skip
                          }
                         else
                         {
                             skip
                         }
                     }
                     else
                     {
                         skip
                     }
                     
                 }
                 else 
                 {
                      skip 
                 };
                 if(continue=0)   then 
                 {
                     if(return=0)  then
                     {
                         f_ho_angle_r:=f_ho_angle_r1*f_ho_angle_r2;
                         if(f_ho_angle_r>1.e-8) then 
                         {
                             f_ho_angle_dp:=f_ho_angle_dp/ f_ho_angle_r;
                             if(f_ho_angle_dp>1.0) then 
                             {
                                 f_ho_angle_dp:=1.0
                             }
                             else 
                             {
                                  skip 
                             };
                             if(f_ho_angle_dp<-1.0) then 
                             {
                                 f_ho_angle_dp:=-1.0
                             }
                             else 
                             {
                                  skip 
                             };
                             f_ho_angle_dtheta:=acos(f_ho_angle_dp);
                             f_ho_angle_target:=f_ho_angle_hol*f_ho_angle_dtheta+(1.0-f_ho_angle_hol)*f_ho_angle_bp->target;
                             f_ho_angle_sdth:=sin(f_ho_angle_dtheta);
                             if(f_ho_angle_sdth<1.e-3) then 
                             {
                                 f_ho_angle_sdth:=1.e-3
                             }
                             else 
                             {
                                  skip 
                             };
                             f_ho_angle_r11:=f_ho_angle_r1*f_ho_angle_sdth;
                             f_ho_angle_r22:=f_ho_angle_r2*f_ho_angle_sdth;
                             f_ho_angle_ux1:=f_ho_angle_x2/ f_ho_angle_r2-f_ho_angle_dp*f_ho_angle_x1/ f_ho_angle_r1;
                             f_ho_angle_uy1:=f_ho_angle_y2/ f_ho_angle_r2-f_ho_angle_dp*f_ho_angle_y1/ f_ho_angle_r1;
                             f_ho_angle_uz1:=f_ho_angle_z2/ f_ho_angle_r2-f_ho_angle_dp*f_ho_angle_z1/ f_ho_angle_r1;
                             f_ho_angle_ux2:=f_ho_angle_x1/ f_ho_angle_r1-f_ho_angle_dp*f_ho_angle_x2/ f_ho_angle_r2;
                             f_ho_angle_uy2:=f_ho_angle_y1/ f_ho_angle_r1-f_ho_angle_dp*f_ho_angle_y2/ f_ho_angle_r2;
                             f_ho_angle_uz2:=f_ho_angle_z1/ f_ho_angle_r1-f_ho_angle_dp*f_ho_angle_z2/ f_ho_angle_r2;
                             f_ho_angle_dtheta:=-2.0*f_ho_angle_k*(f_ho_angle_target-f_ho_angle_dtheta)*(1.0-f_ho_angle_hol);
                             f_ho_angle_ux1:=f_ho_angle_ux1*f_ho_angle_dtheta/ f_ho_angle_r11;
                             f_ho_angle_uy1:=f_ho_angle_uy1*f_ho_angle_dtheta/ f_ho_angle_r11;
                             f_ho_angle_uz1:=f_ho_angle_uz1*f_ho_angle_dtheta/ f_ho_angle_r11;
                             f_ho_angle_ux2:=f_ho_angle_ux2*f_ho_angle_dtheta/ f_ho_angle_r22;
                             f_ho_angle_uy2:=f_ho_angle_uy2*f_ho_angle_dtheta/ f_ho_angle_r22;
                             f_ho_angle_uz2:=f_ho_angle_uz2*f_ho_angle_dtheta/ f_ho_angle_r22;
                             if(f_ho_angle_a1->active) then 
                             {
                                 f_ho_angle_a1->fx:=f_ho_angle_a1->fx+f_ho_angle_ux1;
                                 f_ho_angle_a1->fy:=f_ho_angle_a1->fy+f_ho_angle_uy1;
                                 f_ho_angle_a1->fz:=f_ho_angle_a1->fz+f_ho_angle_uz1
                                 
                             }
                             else 
                             {
                                  skip 
                             };
                             if(f_ho_angle_a2->active) then 
                             {
                                 f_ho_angle_a2->fx:=f_ho_angle_a2->fx+-f_ho_angle_ux1-f_ho_angle_ux2;
                                 f_ho_angle_a2->fy:=f_ho_angle_a2->fy+-f_ho_angle_uy1-f_ho_angle_uy2;
                                 f_ho_angle_a2->fz:=f_ho_angle_a2->fz+-f_ho_angle_uz1-f_ho_angle_uz2
                                 
                             }
                             else 
                             {
                                  skip 
                             };
                             if(f_ho_angle_a3->active) then 
                             {
                                 f_ho_angle_a3->fx:=f_ho_angle_a3->fx+f_ho_angle_ux2;
                                 f_ho_angle_a3->fy:=f_ho_angle_a3->fy+f_ho_angle_uy2;
                                 f_ho_angle_a3->fz:=f_ho_angle_a3->fz+f_ho_angle_uz2
                                 
                             }
                             else 
                             {
                                  skip 
                             }
                             
                         }
                         else 
                         {
                              skip 
                         }
                     }
                     else
                     {
                         skip
                     }
                 }
                 else
                 {
                     skip
                 }
                 
             }
             else 
             {
                  skip 
             };
             if(continue=0)  then
             {
                 if(return=0)  then
                 {
                     if(f_ho_angle_bp=f_ho_angle_bp->next$) then 
                     {
                         return<==1 and RValue:=1;
                         skip
                     }
                     else 
                     {
                          skip 
                     };
                     if(return=0)   then 
                     {
                         f_ho_angle_bp:=f_ho_angle_bp->next$
                     }
                     else
                     {
                         skip
                     }
                 }
                 else
                 {
                     skip
                 }
             }
             else
             {
                 skip
             }
         };
         continue<==0 and skip
     }
     else
     {
         skip
     }
     )
     }; 
  function v_maxwell ( float T,float dx,float dy,float dz,int RValue )
 {
     frame(v_maxwell_ap,v_maxwell_bonded,v_maxwell_iflag,v_maxwell_inbond,v_maxwell_vmag,v_maxwell_R,return) and ( 
     int return<==0 and skip;
     ATOM *v_maxwell_ap,*v_maxwell_bonded[10] and skip;
     int v_maxwell_iflag,v_maxwell_inbond and skip;
     float v_maxwell_vmag and skip;
     float v_maxwell_R and skip;
     v_maxwell_R:=1.987;
     v_maxwell_iflag:=-1;
     v_maxwell_ap:=a_next(v_maxwell_iflag,RValue) ;
     while((v_maxwell_ap)!=NULL)
     {
         v_maxwell_iflag:=v_maxwell_iflag+1;
         v_maxwell_iflag:=1;
         if(v_maxwell_ap->mass>0.0) then 
         {
             v_maxwell_vmag:=sqrt(3.0*v_maxwell_R*T/ v_maxwell_ap->mass*4.184*1000.0)*randg(RValue);
             rand3(&v_maxwell_ap->vx,&v_maxwell_ap->vy,&v_maxwell_ap->vz,RValue);
             if(v_maxwell_ap->active) then 
             {
                 v_maxwell_ap->vx:=v_maxwell_ap->vx*v_maxwell_vmag+dx;
                 v_maxwell_ap->vy:=v_maxwell_ap->vy*v_maxwell_vmag+dy;
                 v_maxwell_ap->vz:=v_maxwell_ap->vz*v_maxwell_vmag+dz
             }
             else
             {
                 v_maxwell_ap->vx:=0.0;
                 v_maxwell_ap->vy:=0.0;
                 v_maxwell_ap->vz:=0.0
             }
             
         }
         else 
         {
              skip 
         };
         v_maxwell_ap:=a_next(v_maxwell_iflag,RValue) 
     };
     v_maxwell_iflag:=-1;
     v_maxwell_ap:=a_next(v_maxwell_iflag,RValue) ;
     while((v_maxwell_ap)!=NULL)
     {
         v_maxwell_iflag:=1;
         if(v_maxwell_ap->mass<=0.0) then 
         {
             get_bond(v_maxwell_ap,v_maxwell_bonded,10,&v_maxwell_inbond,RValue);
             if(v_maxwell_inbond>=0) then 
             {
                 v_maxwell_ap->vx:=v_maxwell_bonded[0]->vx;
                 v_maxwell_ap->vy:=v_maxwell_bonded[0]->vy;
                 v_maxwell_ap->vz:=v_maxwell_bonded[0]->vz
                 
             }
             else 
             {
                  skip 
             }
             
         }
         else 
         {
              skip 
         };
         v_maxwell_ap:=a_next(v_maxwell_iflag,RValue) 
     };
     return<==1 and RValue:=1;
     skip
     )
     }; 
  function v_rescale ( float T,int RValue )
 {
     frame(v_rescale_ap,v_rescale_iflag,v_rescale_a_number,v_rescale_vmag,v_rescale_KE,v_rescale_target,v_rescale_R,return) and ( 
     int return<==0 and skip;
     ATOM *v_rescale_ap and skip;
     int v_rescale_iflag,v_rescale_a_number and skip;
     float v_rescale_vmag,v_rescale_KE,v_rescale_target and skip;
     float v_rescale_R and skip;
     v_rescale_R:=1.987;
     v_rescale_target:=0.0;
     v_rescale_target:=v_rescale_target+0.5*(3.0*v_rescale_R*T)*4.184*1000*a_number(RValue);
     v_rescale_KE:=0.0;
     v_rescale_iflag:=-1;
     v_rescale_ap:=a_next(v_rescale_iflag,RValue) ;
     while((v_rescale_ap)!=NULL)
     {
         v_rescale_iflag:=v_rescale_iflag+1;
         v_rescale_iflag:=1;
         if(v_rescale_ap->mass>0.0) then 
         {
             v_rescale_vmag:=v_rescale_ap->vx*v_rescale_ap->vx+v_rescale_ap->vy*v_rescale_ap->vy+v_rescale_ap->vz*v_rescale_ap->vz;
             v_rescale_KE:=v_rescale_KE+v_rescale_ap->mass*v_rescale_vmag
             
         }
         else 
         {
              skip 
         };
         v_rescale_ap:=a_next(v_rescale_iflag,RValue) 
     };
     v_rescale_KE:=v_rescale_KE*0.5;
     if(v_rescale_KE=0.0) then 
     {
         aaerror(" Cannot rescale a zero velocity field -use v_maxwell",RValue);
         return<==1 and RValue:=0;
         skip
         
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         v_rescale_vmag:=sqrt(v_rescale_target/ v_rescale_KE);
         v_rescale_iflag:=-1;
         v_rescale_ap:=a_next(v_rescale_iflag,RValue) ;
         while((v_rescale_ap)!=NULL)
         {
             v_rescale_iflag:=v_rescale_iflag+1;
             v_rescale_iflag:=1;
             v_rescale_ap->vx:=v_rescale_ap->vx*v_rescale_vmag;
             v_rescale_ap->vy:=v_rescale_ap->vy*v_rescale_vmag;
             v_rescale_ap->vz:=v_rescale_ap->vz*v_rescale_vmag;
             v_rescale_ap:=a_next(v_rescale_iflag,RValue) 
         };
         return<==1 and RValue:=1;
         skip
     }
     else
     {
         skip
     }
     )
     }; 
  function verlet (void (*forces[])(float f, int RValue),int nforces,int nstep,float dtime,int RValue )
 {
     frame(verlet_bp,verlet_ap,verlet_bonded,verlet_inbond,verlet_iflag,verlet_istep,verlet_iforces,verlet_i,verlet_imax,return) and ( 
     int return<==0 and skip;
     ATOM *verlet_bp,*verlet_ap,*verlet_bonded[10] and skip;
     int verlet_inbond,verlet_iflag and skip;
     int verlet_istep,verlet_iforces and skip;
     int verlet_i,verlet_imax and skip;
     verlet_istep:=0.0;
     
     while(verlet_istep<nstep)
     {
         a_f_zero(RValue);
         verlet_iforces:=0;
         
         while(verlet_iforces<nforces)
         {
             forces[verlet_iforces](0.0,RValue);
             verlet_iforces:=verlet_iforces+1
             
         };
         verlet_imax:=a_number(RValue);
         verlet_ap:=a_next(-1,RValue);
         verlet_bp:=verlet_ap;
         verlet_i:=0;
         
         while(verlet_i<verlet_imax)
         {
             verlet_bp:=a_next(1,RValue);
             if(verlet_ap->mass>0.0) then 
             {
                 verlet_ap->vx:=verlet_ap->vx+verlet_ap->fx/ verlet_ap->mass*dtime*4.184e6;
                 verlet_ap->vy:=verlet_ap->vy+verlet_ap->fy/ verlet_ap->mass*dtime*4.184e6;
                 verlet_ap->vz:=verlet_ap->vz+verlet_ap->fz/ verlet_ap->mass*dtime*4.184e6
                 
             }
             else 
             {
                  skip 
             };
             verlet_i:=verlet_i+1 and verlet_ap:=verlet_bp
             
         };
         verlet_imax:=a_number(RValue);
         verlet_ap:=a_next(-1,RValue);
         verlet_bp:=verlet_ap;
         verlet_i:=0;
         
         while(verlet_i<verlet_imax)
         {
             verlet_bp:=a_next(1,RValue);
             if(verlet_ap->mass<=0.0) then 
             {
                 get_bond(verlet_ap,verlet_bonded,10,&verlet_inbond,RValue);
                 if(verlet_inbond>=0) then 
                 {
                     verlet_ap->vx:=verlet_bonded[0]->vx;
                     verlet_ap->vy:=verlet_bonded[0]->vy;
                     verlet_ap->vz:=verlet_bonded[0]->vz
                     
                 }
                 else 
                 {
                      skip 
                 }
                 
             }
             else 
             {
                  skip 
             };
             verlet_i:=verlet_i+1 and verlet_ap:=verlet_bp
             
         };
         a_inc_v(dtime,RValue);
         verlet_istep:=verlet_istep+1
         
     };
     return<==1 and RValue:=1;
     skip
     )
     
	 }; 
  function pac (void (*forces[])(float f,int RValue),int nforces,int nstep,float dtime,int RValue )
 {
     frame(pac_ap,pac_bp,pac_bonded,pac_inbond,pac_iflag,pac_istep,pac_iforces,pac_i,pac_imax,return) and ( 
     int return<==0 and skip;
     ATOM *pac_ap,*pac_bp,*pac_bonded[10] and skip;
     int pac_inbond,pac_iflag and skip;
     int pac_istep,pac_iforces and skip;
     int pac_i,pac_imax and skip;
     pac_istep:=0.0;
     
     while(pac_istep<nstep)
     {
         pac_imax:=a_number(RValue);
         pac_ap:=a_next(-1,RValue);
         pac_bp:=pac_ap;
         pac_i:=0;
         
         while(pac_i<pac_imax)
         {
             pac_bp:=a_next(1,RValue);
             pac_ap->dx:=pac_ap->vx;
             pac_ap->dy:=pac_ap->vy;
             pac_ap->dz:=pac_ap->vz;
             pac_i:=pac_i+1 and pac_ap:=pac_bp
             
         };
         a_f_zero(RValue);
         pac_iforces:=0;
         
         while(pac_iforces<nforces)
         {
             forces[pac_iforces](dtime/ 2.0,RValue);
             pac_iforces:=pac_iforces+1
             
         };
         pac_imax:=a_number(RValue);
         pac_ap:=a_next(-1,RValue);
         pac_bp:=pac_ap;
         pac_i:=0;
         
         while(pac_i<pac_imax)
         {
             pac_bp:=a_next(1,RValue);
             if(pac_ap->mass>0.0) then 
             {
                 pac_ap->vx:=pac_ap->dx+pac_ap->fx/ pac_ap->mass*dtime*4.184e6;
                 pac_ap->vy:=pac_ap->dy+pac_ap->fy/ pac_ap->mass*dtime*4.184e6;
                 pac_ap->vz:=pac_ap->dz+pac_ap->fz/ pac_ap->mass*dtime*4.184e6
                 
             }
             else 
             {
                  skip 
             };
             pac_i:=pac_i+1 and pac_ap:=pac_bp
             
         };
         pac_imax:=a_number(RValue);
         pac_ap:=a_next(-1,RValue);
         pac_bp:=pac_ap;
         pac_i:=0;
         
         while(pac_i<pac_imax)
         {
             pac_bp:=a_next(1,RValue);
             if(pac_ap->mass<=0.0) then 
             {
                 get_bond(pac_ap,pac_bonded,10,&pac_inbond,RValue);
                 if(pac_inbond>=0) then 
                 {
                     pac_ap->vx:=pac_bonded[0]->vx;
                     pac_ap->vy:=pac_bonded[0]->vy;
                     pac_ap->vz:=pac_bonded[0]->vz
                     
                 }
                 else 
                 {
                      skip 
                 }
                 
             }
             else 
             {
                  skip 
             };
             pac_i:=pac_i+1 and pac_ap:=pac_bp
             
         };
         pac_imax:=a_number(RValue);
         pac_ap:=a_next(-1,RValue);
         pac_bp:=pac_ap;
         pac_i:=0;
         
         while(pac_i<pac_imax)
         {
             pac_bp:=a_next(1,RValue);
             pac_iflag:=1;
             pac_ap->x:=pac_ap->x+0.5*(pac_ap->vx+pac_ap->dx)*dtime;
             pac_ap->y:=pac_ap->y+0.5*(pac_ap->vy+pac_ap->dy)*dtime;
             pac_ap->z:=pac_ap->z+0.5*(pac_ap->vz+pac_ap->dz)*dtime;
             pac_i:=pac_i+1 and pac_ap:=pac_bp
             
         };
         pac_istep:=pac_istep+1
         
     };
     return<==1 and RValue:=1;
     skip
     )
     }; 
  function tpac (void (*forces[])(float f, int RValue),int nforces,int nstep,float dtime_real,float T,int RValue )
 {
     frame(tpac_ap,tpac_bp,tpac_bonded,tpac_ke,tpac_Tke,tpac_R,tpac_alpha,tpac_dtime,tpac_inbond,tpac_iflag,tpac_istep,tpac_iforces,tpac_i,tpac_imax,return,continue) and ( 
     int continue<==0 and skip;
     int return<==0 and skip;
     ATOM *tpac_ap,*tpac_bp,*tpac_bonded[10] and skip;
     float tpac_ke,tpac_Tke,tpac_R and skip;
     float tpac_alpha and skip;
     float tpac_dtime and skip;
     int tpac_inbond,tpac_iflag and skip;
     int tpac_istep,tpac_iforces and skip;
     int tpac_i,tpac_imax and skip;
     tpac_R:=1.987;
     continue<==0 and skip;
     tpac_istep:=0.0;
     
     while(tpac_istep<nstep)
     {
          continue<==0 and skip;
         tpac_ke:=0.0;
         tpac_imax:=a_number(RValue);
         tpac_ap:=a_next(-1,RValue);
         tpac_bp:=tpac_ap;
         tpac_i:=0;
         
         while(tpac_i<tpac_imax)
         {
             tpac_bp:=a_next(1,RValue);
             tpac_ke:=tpac_ke+tpac_ap->mass*(tpac_ap->vx*tpac_ap->vx+tpac_ap->vy*tpac_ap->vy+tpac_ap->vz*tpac_ap->vz);
             tpac_ap->dx:=tpac_ap->vx;
             tpac_ap->dy:=tpac_ap->vy;
             tpac_ap->dz:=tpac_ap->vz;
             tpac_i:=tpac_i+1 and tpac_ap:=tpac_bp
             
         };
         tpac_Tke:=3*tpac_imax*tpac_R*4.184*1000;
         tpac_Tke:=tpac_ke/ tpac_Tke;
         tpac_dtime:=dtime_real;
         if(tpac_Tke>1.e-6) then 
         {
             tpac_ke:=sqrt(T/ tpac_Tke);
             tpac_dtime:=dtime_real/ tpac_ke;
             if(tpac_dtime>0.000020) then 
             {
                 tpac(forces,nforces,1,dtime_real*0.5,T,RValue);
                 tpac(forces,nforces,1,dtime_real*0.5,T,RValue);
                 continue<==1 and skip
                  
             }
             else 
             {
                  skip 
             };
             if(continue=0)   then 
             {
                 tpac_ap:=a_next(-1,RValue);
                 tpac_bp:=tpac_ap;
                 tpac_i:=0;
                 
                 while(tpac_i<tpac_imax)
                 {
                     tpac_bp:=a_next(1,RValue);
                     tpac_ap->dx:=tpac_ap->dx*tpac_ke;
                     tpac_ap->dy:=tpac_ap->dy*tpac_ke;
                     tpac_ap->dz:=tpac_ap->dz*tpac_ke;
                     tpac_i:=tpac_i+1 and tpac_ap:=tpac_bp
                     
                 }
             }
             else
             {
                 skip
             }
             
         }
         else 
         {
              skip 
         };
         if(continue=0)  then
         {
             a_f_zero(RValue);
             tpac_iforces:=0;
             
             while(tpac_iforces<nforces)
             {
                 forces[tpac_iforces](tpac_dtime/ 2.0,RValue);
                 tpac_iforces:=tpac_iforces+1
                 
             };
             tpac_imax:=a_number(RValue);
             tpac_ap:=a_next(-1,RValue);
             tpac_bp:=tpac_ap;
             tpac_i:=0;
             
             while(tpac_i<tpac_imax)
             {
                 tpac_bp:=a_next(1,RValue);
                 if(tpac_ap->mass>0.0) then 
                 {
                     tpac_ap->vx:=tpac_ap->dx+tpac_ap->fx/ tpac_ap->mass*tpac_dtime*4.184e6;
                     tpac_ap->vy:=tpac_ap->dy+tpac_ap->fy/ tpac_ap->mass*tpac_dtime*4.184e6;
                     tpac_ap->vz:=tpac_ap->dz+tpac_ap->fz/ tpac_ap->mass*tpac_dtime*4.184e6
                     
                 }
                 else 
                 {
                      skip 
                 };
                 tpac_i:=tpac_i+1 and tpac_ap:=tpac_bp
                 
             };
             tpac_imax:=a_number(RValue);
             tpac_ap:=a_next(-1,RValue);
             tpac_bp:=tpac_ap;
             tpac_i:=0;
             
             while(tpac_i<tpac_imax)
             {
                 tpac_bp:=a_next(1,RValue);
                 if(tpac_ap->mass<=0.0) then 
                 {
                     get_bond(tpac_ap,tpac_bonded,10,&tpac_inbond,RValue);
                     if(tpac_inbond>=0) then 
                     {
                         tpac_ap->vx:=tpac_bonded[0]->vx;
                         tpac_ap->vy:=tpac_bonded[0]->vy;
                         tpac_ap->vz:=tpac_bonded[0]->vz
                         
                     }
                     else 
                     {
                          skip 
                     }
                     
                 }
                 else 
                 {
                      skip 
                 };
                 tpac_i:=tpac_i+1 and tpac_ap:=tpac_bp
                 
             };
             tpac_imax:=a_number(RValue);
             tpac_ap:=a_next(-1,RValue);
             tpac_bp:=tpac_ap;
             tpac_i:=0;
             
             while(tpac_i<tpac_imax)
             {
                 tpac_bp:=a_next(1,RValue);
                 tpac_iflag:=1;
                 tpac_ap->x:=tpac_ap->x+0.5*(tpac_ap->vx+tpac_ap->dx)*tpac_dtime;
                 tpac_ap->y:=tpac_ap->y+0.5*(tpac_ap->vy+tpac_ap->dy)*tpac_dtime;
                 tpac_ap->z:=tpac_ap->z+0.5*(tpac_ap->vz+tpac_ap->dz)*tpac_dtime;
                 tpac_i:=tpac_i+1 and tpac_ap:=tpac_bp
                 
             };
             tpac_istep:=tpac_istep+1
         }
         else
         {
             skip
         }
         
     };
     continue<==0 and skip;
     return<==1 and RValue:=1;
     skip
     )
     }; 
  function pacpac (void (*forces[])(float f, int RValue),int nforces,int nstep,float dtime,int RValue )
 {
     frame(pacpac_ap,pacpac_bp,pacpac_bonded,pacpac_inbond,pacpac_iflag,pacpac_istep,pacpac_iforces,pacpac_icorrect,pacpac_i,pacpac_imax,return) and ( 
     int return<==0 and skip;
     ATOM *pacpac_ap,*pacpac_bp,*pacpac_bonded[10] and skip;
     int pacpac_inbond,pacpac_iflag and skip;
     int pacpac_istep,pacpac_iforces,pacpac_icorrect and skip;
     int pacpac_i,pacpac_imax and skip;
     pacpac_istep:=0.0;
     
     while(pacpac_istep<nstep)
     {
         pacpac_iflag:=-1;
         pacpac_ap:=a_next(pacpac_iflag,RValue) ;
         while((pacpac_ap)!=NULL)
         {
             pacpac_iflag:=1;
             pacpac_ap->dx:=pacpac_ap->vx;
             pacpac_ap->dy:=pacpac_ap->vy;
             pacpac_ap->dz:=pacpac_ap->vz;
             pacpac_ap:=a_next(pacpac_iflag,RValue) 
         };
         a_f_zero(RValue);
         pacpac_iforces:=0;
         
         while(pacpac_iforces<nforces)
         {
             forces[pacpac_iforces](dtime/ 2.0,RValue);
             pacpac_iforces:=pacpac_iforces+1
             
         };
         pacpac_iflag:=-1;
         pacpac_ap:=a_next(pacpac_iflag,RValue) ;
         while((pacpac_ap)!=NULL)
         {
             pacpac_iflag:=1;
             if(pacpac_ap->mass>0.0) then 
             {
                 pacpac_ap->gx:=pacpac_ap->vx;
                 pacpac_ap->gy:=pacpac_ap->vy;
                 pacpac_ap->gz:=pacpac_ap->vz;
                 pacpac_ap->vx:=pacpac_ap->vx+pacpac_ap->fx/ pacpac_ap->mass*dtime*4.184e6;
                 pacpac_ap->vy:=pacpac_ap->vy+pacpac_ap->fy/ pacpac_ap->mass*dtime*4.184e6;
                 pacpac_ap->vz:=pacpac_ap->vz+pacpac_ap->fz/ pacpac_ap->mass*dtime*4.184e6
                 
             }
             else 
             {
                  skip 
             };
             pacpac_ap:=a_next(pacpac_iflag,RValue) 
         };
         pacpac_iflag:=-1;
         pacpac_ap:=a_next(pacpac_iflag,RValue) ;
         while((pacpac_ap)!=NULL)
         {
             pacpac_iflag:=1;
             if(pacpac_ap->mass<=0.0) then 
             {
                 pacpac_ap->gx:=pacpac_ap->vx;
                 pacpac_ap->gy:=pacpac_ap->vy;
                 pacpac_ap->gz:=pacpac_ap->vz;
                 get_bond(pacpac_ap,pacpac_bonded,10,&pacpac_inbond,RValue);
                 if(pacpac_inbond>=0) then 
                 {
                     pacpac_ap->vx:=pacpac_bonded[0]->vx;
                     pacpac_ap->vy:=pacpac_bonded[0]->vy;
                     pacpac_ap->vz:=pacpac_bonded[0]->vz
                     
                 }
                 else 
                 {
                      skip 
                 }
                 
             }
             else 
             {
                  skip 
             };
             pacpac_ap:=a_next(pacpac_iflag,RValue) 
         };
         pacpac_imax:=a_number(RValue);
         pacpac_ap:=a_next(-1,RValue);
         pacpac_bp:=pacpac_ap;
         pacpac_i:=0;
         
         while(pacpac_i<pacpac_imax)
         {
             pacpac_bp:=a_next(1,RValue);
             pacpac_ap->dx:=pacpac_ap->vx+pacpac_ap->gx;
             pacpac_ap->dy:=pacpac_ap->vy+pacpac_ap->gy;
             pacpac_ap->dz:=pacpac_ap->vz+pacpac_ap->gz;
             pacpac_i:=pacpac_i+1 and pacpac_ap:=pacpac_bp
             
         };
         pacpac_icorrect:=0;
         
         while(pacpac_icorrect<2)
         {
             a_f_zero(RValue);
             pacpac_iforces:=0;
             
             while(pacpac_iforces<nforces)
             {
                 forces[pacpac_iforces](dtime/ 4.0,RValue);
                 pacpac_iforces:=pacpac_iforces+1
                 
             };
             pacpac_imax:=a_number(RValue);
             pacpac_ap:=a_next(-1,RValue);
             pacpac_bp:=pacpac_ap;
             pacpac_i:=0;
             
             while(pacpac_i<pacpac_imax)
             {
                 pacpac_bp:=a_next(1,RValue);
                 if(pacpac_ap->mass>0.0) then 
                 {
                     pacpac_ap->vx:=pacpac_ap->gx+pacpac_ap->fx/ pacpac_ap->mass*dtime*4.184e6;
                     pacpac_ap->vy:=pacpac_ap->gy+pacpac_ap->fy/ pacpac_ap->mass*dtime*4.184e6;
                     pacpac_ap->vz:=pacpac_ap->gz+pacpac_ap->fz/ pacpac_ap->mass*dtime*4.184e6
                     
                 }
                 else 
                 {
                      skip 
                 };
                 pacpac_i:=pacpac_i+1 and pacpac_ap:=pacpac_bp
                 
             };
             pacpac_imax:=a_number(RValue);
             pacpac_ap:=a_next(-1,RValue);
             pacpac_bp:=pacpac_ap;
             pacpac_i:=0;
             
             while(pacpac_i<pacpac_imax)
             {
                 pacpac_bp:=a_next(1,RValue);
                 if(pacpac_ap->mass<=0.0) then 
                 {
                     get_bond(pacpac_ap,pacpac_bonded,10,&pacpac_inbond,RValue);
                     if(pacpac_inbond>=0) then 
                     {
                         pacpac_ap->vx:=pacpac_bonded[0]->vx;
                         pacpac_ap->vy:=pacpac_bonded[0]->vy;
                         pacpac_ap->vz:=pacpac_bonded[0]->vz
                         
                     }
                     else 
                     {
                          skip 
                     }
                     
                 }
                 else 
                 {
                      skip 
                 };
                 pacpac_i:=pacpac_i+1 and pacpac_ap:=pacpac_bp
                 
             };
             pacpac_imax:=a_number(RValue);
             pacpac_ap:=a_next(-1,RValue);
             pacpac_bp:=pacpac_ap;
             pacpac_i:=0;
             
             while(pacpac_i<pacpac_imax)
             {
                 pacpac_bp:=a_next(1,RValue);
                 pacpac_ap->dx:=pacpac_ap->vx+pacpac_ap->gx;
                 pacpac_ap->dy:=pacpac_ap->vy+pacpac_ap->gy;
                 pacpac_ap->dz:=pacpac_ap->vz+pacpac_ap->gz;
                 pacpac_i:=pacpac_i+1 and pacpac_ap:=pacpac_bp
                 
             };
             pacpac_icorrect:=pacpac_icorrect+1
             
         };
         pacpac_imax:=a_number(RValue);
         pacpac_ap:=a_next(-1,RValue);
         pacpac_bp:=pacpac_ap;
         pacpac_i:=0;
         
         while(pacpac_i<pacpac_imax)
         {
             pacpac_bp:=a_next(1,RValue);
             pacpac_ap->x:=pacpac_ap->x+0.5*(pacpac_ap->vx+pacpac_ap->gx)*dtime;
             pacpac_ap->y:=pacpac_ap->y+0.5*(pacpac_ap->vy+pacpac_ap->gy)*dtime;
             pacpac_ap->z:=pacpac_ap->z+0.5*(pacpac_ap->vz+pacpac_ap->gz)*dtime;
             pacpac_i:=pacpac_i+1 and pacpac_ap:=pacpac_bp
             
         };
         pacpac_istep:=pacpac_istep+1
         
     };
     return<==1 and RValue:=1;
     skip
     )
     }; 
  function hpac (void (*forces[])(float f, int RValue), void (*poten[])(float * fp, float f, int RValue),int nforces,int nstep,float dtime_real,float H,int RValue )
 {
     frame(hpac_ap,hpac_bp,hpac_bonded,hpac_ke,hpac_Tke,hpac_alpha,hpac_dtime,hpac_inbond,hpac_iflag,hpac_istep,hpac_iforces,hpac_i,hpac_imax,return,continue) and ( 
     int continue<==0 and skip;
     int return<==0 and skip;
     ATOM *hpac_ap,*hpac_bp,*hpac_bonded[10] and skip;
     float hpac_ke,hpac_Tke and skip;
     float hpac_alpha and skip;
     float hpac_dtime and skip;
     int hpac_inbond,hpac_iflag and skip;
     int hpac_istep,hpac_iforces and skip;
     int hpac_i,hpac_imax and skip;
     continue<==0 and skip;
     hpac_istep:=0.0;
     
     while(hpac_istep<nstep)
     {
          continue<==0 and skip;
         hpac_ke:=0.0;
         hpac_imax:=a_number(RValue);
         hpac_ap:=a_next(-1,RValue);
         hpac_bp:=hpac_ap;
         hpac_i:=0;
         
         while(hpac_i<hpac_imax)
         {
             hpac_bp:=a_next(1,RValue);
             hpac_ke:=hpac_ke+hpac_ap->mass*(hpac_ap->vx*hpac_ap->vx+hpac_ap->vy*hpac_ap->vy+hpac_ap->vz*hpac_ap->vz);
             hpac_ap->dx:=hpac_ap->vx;
             hpac_ap->dy:=hpac_ap->vy;
             hpac_ap->dz:=hpac_ap->vz;
             hpac_i:=hpac_i+1 and hpac_ap:=hpac_bp
             
         };
         hpac_ke:=hpac_ke*0.5/ 4.184/ 1000/ 1000;
         hpac_Tke:=0.0;
         hpac_i:=0;
         
         while(hpac_i<nforces)
         {
             poten[hpac_i](&hpac_Tke,0.0,RValue);
             hpac_i:=hpac_i+1
             
         };
         hpac_dtime:=dtime_real;
         if(hpac_Tke<H) then 
         {
             hpac_ke:=sqrt((H-hpac_Tke)/ hpac_ke);
             hpac_dtime:=dtime_real/ hpac_ke;
             if(hpac_dtime>0.000020) then 
             {
                 hpac(forces,poten,nforces,1,dtime_real*0.5,H,RValue);
                 hpac(forces,poten,nforces,1,dtime_real*0.5,H,RValue);
                 continue<==1 and skip
                  
             }
             else 
             {
                  skip 
             };
             if(continue=0)   then 
             {
                 hpac_ap:=a_next(-1,RValue);
                 hpac_bp:=hpac_ap;
                 hpac_i:=0;
                 
                 while(hpac_i<hpac_imax)
                 {
                     hpac_bp:=a_next(1,RValue);
                     hpac_ap->dx:=hpac_ap->dx*hpac_ke;
                     hpac_ap->dy:=hpac_ap->dy*hpac_ke;
                     hpac_ap->dz:=hpac_ap->dz*hpac_ke;
                     hpac_i:=hpac_i+1 and hpac_ap:=hpac_bp
                     
                 }
             }
             else
             {
                 skip
             }
             
         }
         else
         {
             aaerror("Warning in Hpac, Potential energy higher than target\n",RValue);
             a_v_zero(RValue);
             a_d_zero(RValue)
         };
         if(continue=0)  then 
         {
             a_f_zero(RValue);
             hpac_iforces:=0;
             
             while(hpac_iforces<nforces)
             {
                 forces[hpac_iforces](hpac_dtime/ 2.0,RValue);
                 hpac_iforces:=hpac_iforces+1
                 
             };
             hpac_imax:=a_number(RValue);
             hpac_ap:=a_next(-1,RValue);
             hpac_bp:=hpac_ap;
             hpac_i:=0;
             
             while(hpac_i<hpac_imax)
             {
                 hpac_bp:=a_next(1,RValue);
                 if(hpac_ap->mass>0.0) then 
                 {
                     hpac_ap->vx:=hpac_ap->dx+hpac_ap->fx/ hpac_ap->mass*hpac_dtime*4.184e6;
                     hpac_ap->vy:=hpac_ap->dy+hpac_ap->fy/ hpac_ap->mass*hpac_dtime*4.184e6;
                     hpac_ap->vz:=hpac_ap->dz+hpac_ap->fz/ hpac_ap->mass*hpac_dtime*4.184e6
                     
                 }
                 else 
                 {
                      skip 
                 };
                 hpac_i:=hpac_i+1 and hpac_ap:=hpac_bp
                 
             };
             hpac_imax:=a_number(RValue);
             hpac_ap:=a_next(-1,RValue);
             hpac_bp:=hpac_ap;
             hpac_i:=0;
             
             while(hpac_i<hpac_imax)
             {
                 hpac_bp:=a_next(1,RValue);
                 if(hpac_ap->mass<=0.0) then 
                 {
                     get_bond(hpac_ap,hpac_bonded,10,&hpac_inbond,RValue);
                     if(hpac_inbond>=0) then 
                     {
                         hpac_ap->vx:=hpac_bonded[0]->vx;
                         hpac_ap->vy:=hpac_bonded[0]->vy;
                         hpac_ap->vz:=hpac_bonded[0]->vz
                         
                     }
                     else 
                     {
                          skip 
                     }
                     
                 }
                 else 
                 {
                      skip 
                 };
                 hpac_i:=hpac_i+1 and hpac_ap:=hpac_bp
                 
             };
             hpac_imax:=a_number(RValue);
             hpac_ap:=a_next(-1,RValue);
             hpac_bp:=hpac_ap;
             hpac_i:=0;
             
             while(hpac_i<hpac_imax)
             {
                 hpac_bp:=a_next(1,RValue);
                 hpac_iflag:=1;
                 hpac_ap->x:=hpac_ap->x+0.5*(hpac_ap->vx+hpac_ap->dx)*hpac_dtime;
                 hpac_ap->y:=hpac_ap->y+0.5*(hpac_ap->vy+hpac_ap->dy)*hpac_dtime;
                 hpac_ap->z:=hpac_ap->z+0.5*(hpac_ap->vz+hpac_ap->dz)*hpac_dtime;
                 hpac_i:=hpac_i+1 and hpac_ap:=hpac_bp
                 
             };
             hpac_istep:=hpac_istep+1
         }
         else
         {
             skip
         }
         
     };
     continue<==0 and skip;
     return<==1 and RValue:=1;
     skip
     )
     }; 
  function ppac ( void (*forces[])(float f, int RValue),int nforces,int nstep,float dtime_real,float P,int RValue )
 {
     frame(ppac_ap,ppac_bp,ppac_bonded,ppac_p,ppac_Tp,ppac_R,ppac_dtime,ppac_cx,ppac_cy,ppac_cz,ppac_alpha,ppac_inbond,ppac_iflag,ppac_istep,ppac_iforces,ppac_i,ppac_imax,return) and ( 
     int return<==0 and skip;
     ATOM *ppac_ap,*ppac_bp,*ppac_bonded[10] and skip;
     float ppac_p,ppac_Tp,ppac_R and skip;
     float ppac_dtime,ppac_cx,ppac_cy,ppac_cz and skip;
     float ppac_alpha and skip;
     int ppac_inbond,ppac_iflag and skip;
     int ppac_istep,ppac_iforces and skip;
     int ppac_i,ppac_imax and skip;
     ppac_R:=1.987;
     ppac_imax:=a_number(RValue);
     if(ppac_imax<=0) then 
     {
         return<==1 and RValue:=0;
         skip
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         ppac_istep:=0.0;
         
         while(ppac_istep<nstep)
         {
             ppac_cx:=0.0;
             ppac_cy:=0.0;
             ppac_cz:=0.0;
             ppac_ap:=a_next(-1,RValue);
             ppac_bp:=ppac_ap;
             ppac_i:=0;
             
             while(ppac_i<ppac_imax)
             {
                 ppac_bp:=a_next(1,RValue);
                 ppac_ap->dx:=ppac_ap->vx;
                 ppac_ap->dy:=ppac_ap->vy;
                 ppac_ap->dz:=ppac_ap->vz;
                 ppac_cx:=ppac_cx+ppac_ap->x;
                 ppac_cy:=ppac_cy+ppac_ap->y;
                 ppac_cz:=ppac_cz+ppac_ap->z;
                 ppac_i:=ppac_i+1 and ppac_ap:=ppac_bp
                 
             };
             ppac_cx:=ppac_cx/ ppac_imax;
             ppac_cy:=ppac_cy/ ppac_imax;
             ppac_cz:=ppac_cz/ ppac_imax;
             ppac_p:=0.0;
             ppac_Tp:=0.0;
             ppac_ap:=a_next(-1,RValue);
             ppac_bp:=ppac_ap;
             ppac_i:=0;
             
             while(ppac_i<ppac_imax)
             {
                 ppac_bp:=a_next(1,RValue);
                 ppac_p:=ppac_p+ppac_ap->vx*ppac_ap->vx*ppac_ap->mass;
                 ppac_p:=ppac_p+ppac_ap->vy*ppac_ap->vy*ppac_ap->mass;
                 ppac_p:=ppac_p+ppac_ap->vz*ppac_ap->vz*ppac_ap->mass;
                 ppac_Tp:=ppac_Tp+(ppac_ap->x-ppac_cx)*(ppac_ap->x-ppac_cx);
                 ppac_Tp:=ppac_Tp+(ppac_ap->y-ppac_cy)*(ppac_ap->y-ppac_cy);
                 ppac_Tp:=ppac_Tp+(ppac_ap->z-ppac_cz)*(ppac_ap->z-ppac_cz);
                 ppac_i:=ppac_i+1 and ppac_ap:=ppac_bp
                 
             };
             ppac_Tp:=sqrt(ppac_Tp/ ppac_imax);
             ppac_Tp:=4*3.14/ 3*ppac_Tp*ppac_Tp*ppac_Tp;
             ppac_p:=ppac_p/ ppac_imax/ ppac_Tp*0.5;
             output ("P ",P," p ",ppac_p," Tp ",ppac_Tp,"\n") and skip;
             ppac_dtime:=dtime_real;
             ppac_p:=(1.0+0.1*pow(ppac_p/ P,1.0/ 3.0))/ 1.1;
             ppac_ap:=a_next(-1,RValue);
             ppac_bp:=ppac_ap;
             ppac_i:=0;
             
             while(ppac_i<ppac_imax)
             {
                 ppac_bp:=a_next(1,RValue);
                 ppac_ap->x:=ppac_ap->x*ppac_p;
                 ppac_ap->y:=ppac_ap->y*ppac_p;
                 ppac_ap->z:=ppac_ap->z*ppac_p;
                 ppac_i:=ppac_i+1 and ppac_ap:=ppac_bp
                 
             };
             a_f_zero(RValue);
             ppac_iforces:=0;
             
             while(ppac_iforces<nforces)
             {
                 forces[ppac_iforces](ppac_dtime/ 2.0,RValue);
                 ppac_iforces:=ppac_iforces+1
                 
             };
             ppac_imax:=a_number(RValue);
             ppac_ap:=a_next(-1,RValue);
             ppac_bp:=ppac_ap;
             ppac_i:=0;
             
             while(ppac_i<ppac_imax)
             {
                 ppac_bp:=a_next(1,RValue);
                 if(ppac_ap->mass>0.0) then 
                 {
                     ppac_ap->vx:=ppac_ap->dx+ppac_ap->fx/ ppac_ap->mass*ppac_dtime*4.184e6;
                     ppac_ap->vy:=ppac_ap->dy+ppac_ap->fy/ ppac_ap->mass*ppac_dtime*4.184e6;
                     ppac_ap->vz:=ppac_ap->dz+ppac_ap->fz/ ppac_ap->mass*ppac_dtime*4.184e6
                     
                 }
                 else 
                 {
                      skip 
                 };
                 ppac_i:=ppac_i+1 and ppac_ap:=ppac_bp
                 
             };
             ppac_imax:=a_number(RValue);
             ppac_ap:=a_next(-1,RValue);
             ppac_bp:=ppac_ap;
             ppac_i:=0;
             
             while(ppac_i<ppac_imax)
             {
                 ppac_bp:=a_next(1,RValue);
                 if(ppac_ap->mass<=0.0) then 
                 {
                     get_bond(ppac_ap,ppac_bonded,10,&ppac_inbond,RValue);
                     if(ppac_inbond>=0) then 
                     {
                         ppac_ap->vx:=ppac_bonded[0]->vx;
                         ppac_ap->vy:=ppac_bonded[0]->vy;
                         ppac_ap->vz:=ppac_bonded[0]->vz
                         
                     }
                     else 
                     {
                          skip 
                     }
                     
                 }
                 else 
                 {
                      skip 
                 };
                 ppac_i:=ppac_i+1 and ppac_ap:=ppac_bp
                 
             };
             ppac_imax:=a_number(RValue);
             ppac_ap:=a_next(-1,RValue);
             ppac_bp:=ppac_ap;
             ppac_i:=0;
             
             while(ppac_i<ppac_imax)
             {
                 ppac_bp:=a_next(1,RValue);
                 ppac_iflag:=1;
                 ppac_ap->x:=ppac_ap->x+0.5*(ppac_ap->vx+ppac_ap->dx)*ppac_dtime;
                 ppac_ap->y:=ppac_ap->y+0.5*(ppac_ap->vy+ppac_ap->dy)*ppac_dtime;
                 ppac_ap->z:=ppac_ap->z+0.5*(ppac_ap->vz+ppac_ap->dz)*ppac_dtime;
                 ppac_i:=ppac_i+1 and ppac_ap:=ppac_bp
                 
             };
             ppac_istep:=ppac_istep+1
             
         };
         return<==1 and RValue:=1;
         skip
     }
     else
     {
         skip
     }
     )
     }; 
  function ptpac ( void (*forces[])(float f, int RValue),int nforces,int nstep,float dtime_real,float P,float T,int RValue )
 {
     frame(ptpac_ap,ptpac_bp,ptpac_bonded,ptpac_p,ptpac_Tp,ptpac_R,ptpac_Tk,ptpac_dtime,ptpac_cx,ptpac_cy,ptpac_cz,ptpac_alpha,ptpac_inbond,ptpac_iflag,ptpac_istep,ptpac_iforces,ptpac_i,ptpac_imax,return,continue) and ( 
     int continue<==0 and skip;
     int return<==0 and skip;
     ATOM *ptpac_ap,*ptpac_bp,*ptpac_bonded[10] and skip;
     float ptpac_p,ptpac_Tp,ptpac_R and skip;
     float ptpac_Tk and skip;
     float ptpac_dtime,ptpac_cx,ptpac_cy,ptpac_cz and skip;
     float ptpac_alpha and skip;
     int ptpac_inbond,ptpac_iflag and skip;
     int ptpac_istep,ptpac_iforces and skip;
     int ptpac_i,ptpac_imax and skip;
     ptpac_R:=1.987;
     ptpac_imax:=a_number(RValue);
     if(ptpac_imax<=0) then 
     {
         return<==1 and RValue:=0;
         skip
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         continue<==0 and skip;
         ptpac_istep:=0.0;
         
         while(ptpac_istep<nstep)
         {
              continue<==0 and skip;
             ptpac_cx:=0.0;
             ptpac_cy:=0.0;
             ptpac_cz:=0.0;
             ptpac_ap:=a_next(-1,RValue);
             ptpac_bp:=ptpac_ap;
             ptpac_i:=0;
             
             while(ptpac_i<ptpac_imax)
             {
                 ptpac_bp:=a_next(1,RValue);
                 ptpac_ap->dx:=ptpac_ap->vx;
                 ptpac_ap->dy:=ptpac_ap->vy;
                 ptpac_ap->dz:=ptpac_ap->vz;
                 ptpac_cx:=ptpac_cx+ptpac_ap->x;
                 ptpac_cy:=ptpac_cy+ptpac_ap->y;
                 ptpac_cz:=ptpac_cz+ptpac_ap->z;
                 ptpac_i:=ptpac_i+1 and ptpac_ap:=ptpac_bp
                 
             };
             ptpac_cx:=ptpac_cx/ ptpac_imax;
             ptpac_cy:=ptpac_cy/ ptpac_imax;
             ptpac_cz:=ptpac_cz/ ptpac_imax;
             ptpac_p:=0.0;
             ptpac_Tp:=0.0;
             ptpac_ap:=a_next(-1,RValue);
             ptpac_bp:=ptpac_ap;
             ptpac_i:=0;
             
             while(ptpac_i<ptpac_imax)
             {
                 ptpac_bp:=a_next(1,RValue);
                 ptpac_p:=ptpac_p+ptpac_ap->vx*ptpac_ap->vx*ptpac_ap->mass;
                 ptpac_p:=ptpac_p+ptpac_ap->vy*ptpac_ap->vy*ptpac_ap->mass;
                 ptpac_p:=ptpac_p+ptpac_ap->vz*ptpac_ap->vz*ptpac_ap->mass;
                 ptpac_Tp:=ptpac_Tp+(ptpac_ap->x-ptpac_cx)*(ptpac_ap->x-ptpac_cx);
                 ptpac_Tp:=ptpac_Tp+(ptpac_ap->y-ptpac_cy)*(ptpac_ap->y-ptpac_cy);
                 ptpac_Tp:=ptpac_Tp+(ptpac_ap->z-ptpac_cz)*(ptpac_ap->z-ptpac_cz);
                 ptpac_i:=ptpac_i+1 and ptpac_ap:=ptpac_bp
                 
             };
             ptpac_Tp:=sqrt(ptpac_Tp/ ptpac_imax);
             ptpac_Tp:=4*3.14/ 3*ptpac_Tp*ptpac_Tp*ptpac_Tp;
             ptpac_Tk:=3*ptpac_imax*ptpac_R*4.184*1000;
             ptpac_Tk:=ptpac_p/ ptpac_Tk;
             if(ptpac_Tk<1.e-5) then 
             {
                 ptpac_Tk:=1.0
             }
             else 
             {
                  skip 
             };
             ptpac_p:=ptpac_p/ ptpac_imax/ ptpac_Tp*0.5;
             output ("P ",P," p ",ptpac_p," Tp ",ptpac_Tp,"\n") and skip;
             ptpac_Tk:=sqrt(T/ ptpac_Tk);
             ptpac_dtime:=dtime_real/ ptpac_Tk;
             if(ptpac_dtime>0.000020) then 
             {
                 ptpac(forces,nforces,1,dtime_real*0.5,P,T,RValue);
                 ptpac(forces,nforces,1,dtime_real*0.5,P,T,RValue);
                 continue<==1 and skip
                  
             }
             else 
             {
                  skip 
             };
             if(continue=0)   then 
             {
                 ptpac_p:=(1.0+0.1*pow(ptpac_p/ P,1.0/ 3.0))/ 1.1;
                 ptpac_ap:=a_next(-1,RValue);
                 ptpac_bp:=ptpac_ap;
                 ptpac_i:=0;
                 
                 while(ptpac_i<ptpac_imax)
                 {
                     ptpac_bp:=a_next(1,RValue);
                     ptpac_ap->vx:=ptpac_ap->vx*ptpac_Tk;
                     ptpac_ap->vy:=ptpac_ap->vy*ptpac_Tk;
                     ptpac_ap->vz:=ptpac_ap->vz*ptpac_Tk;
                     ptpac_ap->dx:=ptpac_ap->dx*ptpac_Tk;
                     ptpac_ap->dy:=ptpac_ap->dy*ptpac_Tk;
                     ptpac_ap->dz:=ptpac_ap->dz*ptpac_Tk;
                     ptpac_ap->x:=ptpac_ap->x*ptpac_p;
                     ptpac_ap->y:=ptpac_ap->y*ptpac_p;
                     ptpac_ap->z:=ptpac_ap->z*ptpac_p;
                     ptpac_i:=ptpac_i+1 and ptpac_ap:=ptpac_bp
                     
                 };
                 a_f_zero(RValue);
                 ptpac_iforces:=0;
                 
                 while(ptpac_iforces<nforces)
                 {
                     forces[ptpac_iforces](ptpac_dtime/ 2.0,RValue);
                     ptpac_iforces:=ptpac_iforces+1
                     
                 };
                 ptpac_imax:=a_number(RValue);
                 ptpac_ap:=a_next(-1,RValue);
                 ptpac_bp:=ptpac_ap;
                 ptpac_i:=0;
                 
                 while(ptpac_i<ptpac_imax)
                 {
                     ptpac_bp:=a_next(1,RValue);
                     if(ptpac_ap->mass>0.0) then 
                     {
                         ptpac_ap->vx:=ptpac_ap->dx+ptpac_ap->fx/ ptpac_ap->mass*ptpac_dtime*4.184e6;
                         ptpac_ap->vy:=ptpac_ap->dy+ptpac_ap->fy/ ptpac_ap->mass*ptpac_dtime*4.184e6;
                         ptpac_ap->vz:=ptpac_ap->dz+ptpac_ap->fz/ ptpac_ap->mass*ptpac_dtime*4.184e6
                         
                     }
                     else 
                     {
                          skip 
                     };
                     ptpac_i:=ptpac_i+1 and ptpac_ap:=ptpac_bp
                     
                 };
                 ptpac_imax:=a_number(RValue);
                 ptpac_ap:=a_next(-1,RValue);
                 ptpac_bp:=ptpac_ap;
                 ptpac_i:=0;
                 
                 while(ptpac_i<ptpac_imax)
                 {
                     ptpac_bp:=a_next(1,RValue);
                     if(ptpac_ap->mass<=0.0) then 
                     {
                         get_bond(ptpac_ap,ptpac_bonded,10,&ptpac_inbond,RValue);
                         if(ptpac_inbond>=0) then 
                         {
                             ptpac_ap->vx:=ptpac_bonded[0]->vx;
                             ptpac_ap->vy:=ptpac_bonded[0]->vy;
                             ptpac_ap->vz:=ptpac_bonded[0]->vz
                             
                         }
                         else 
                         {
                              skip 
                         }
                         
                     }
                     else 
                     {
                          skip 
                     };
                     ptpac_i:=ptpac_i+1 and ptpac_ap:=ptpac_bp
                     
                 };
                 ptpac_imax:=a_number(RValue);
                 ptpac_ap:=a_next(-1,RValue);
                 ptpac_bp:=ptpac_ap;
                 ptpac_i:=0;
                 
                 while(ptpac_i<ptpac_imax)
                 {
                     ptpac_bp:=a_next(1,RValue);
                     ptpac_iflag:=1;
                     ptpac_ap->x:=ptpac_ap->x+0.5*(ptpac_ap->vx+ptpac_ap->dx)*ptpac_dtime;
                     ptpac_ap->y:=ptpac_ap->y+0.5*(ptpac_ap->vy+ptpac_ap->dy)*ptpac_dtime;
                     ptpac_ap->z:=ptpac_ap->z+0.5*(ptpac_ap->vz+ptpac_ap->dz)*ptpac_dtime;
                     ptpac_i:=ptpac_i+1 and ptpac_ap:=ptpac_bp
                     
                 };
                 ptpac_istep:=ptpac_istep+1
             }
             else
             {
                 skip
             }
             
         };
         continue<==0 and skip;
         return<==1 and RValue:=1;
         skip
     }
     else
     {
         skip
     }
     )
     }; 
  function a_nonbon ( float *V,float lambda,int ilow,int ihigh,FILE *op,int RValue )
 {
     frame(a_nonbon_r,a_nonbon_r0,a_nonbon_xt,a_nonbon_yt,a_nonbon_zt,a_nonbon_lcutoff,a_nonbon_cutoff,a_nonbon_inbond,a_nonbon_inangle,a_nonbon_i,a_nonbon_ii,a_nonbon_a1,a_nonbon_a2,a_nonbon_dielectric,a_nonbon_ve,a_nonbon_va,a_nonbon_vh,a_nonbon_vel,a_nonbon_val,a_nonbon_vhl,a_nonbon_vtint,a_nonbon_vtout,a_nonbon_vtt,a_nonbon_4_gotoskip,return,break$,continue) and ( 
     int continue<==0 and skip;
     int break$<==0 and skip;
     int return<==0 and skip;
     float a_nonbon_r,a_nonbon_r0,a_nonbon_xt,a_nonbon_yt,a_nonbon_zt and skip;
     float a_nonbon_lcutoff,a_nonbon_cutoff and skip;
     int a_nonbon_inbond,a_nonbon_inangle,a_nonbon_i,a_nonbon_ii and skip;
     ATOM *a_nonbon_a1,*a_nonbon_a2 and skip;
     float a_nonbon_dielectric,a_nonbon_ve,a_nonbon_va,a_nonbon_vh and skip;
     float a_nonbon_vel,a_nonbon_val,a_nonbon_vhl and skip;
     float a_nonbon_vtint,a_nonbon_vtout,a_nonbon_vtt and skip;
     a_nonbon_dielectric:=get_f_variable("dielec",RValue);
     if(a_nonbon_dielectric<1.0) then 
     {
         a_nonbon_dielectric:=1.0
     }
     else 
     {
          skip 
     };
     a_nonbon_dielectric:=332.17752/ a_nonbon_dielectric;
     a_nonbon_cutoff:=get_f_variable("cutoff",RValue);
     if(a_nonbon_cutoff<1.0) then 
     {
         a_nonbon_cutoff:=1.e10
     }
     else 
     {
          skip 
     };
     a_nonbon_lcutoff:=-a_nonbon_cutoff;
     a_nonbon_vtint:=0.0;
     a_nonbon_vtout:=0.0;
     a_nonbon_vtt:=0.0;
     continue<==0 and skip;
     a_nonbon_ii:=ilow;
     
     while(a_nonbon_ii<=ihigh)
     {
          continue<==0 and skip;
         a_nonbon_a1:=a_m_serial(a_nonbon_ii,RValue);
         if(a_nonbon_a1=NULL) then 
         {
             a_nonbon_i:=a_nonbon_i;
             continue<==1 and skip;
              a_nonbon_ii:=a_nonbon_ii+1
         }
         else 
         {
              skip 
         };
         if(continue=0)   then 
         {
             a_nonbon_ve:=0.0;
             a_nonbon_va:=0.0;
             a_nonbon_vh:=0.0;
             a_nonbon_vel:=0.0;
             a_nonbon_val:=0.0;
             a_nonbon_vhl:=0.0;
             a_nonbon_a2:=a_next(-1,RValue);
             break$<==0 and skip;
             while( break$=0 AND  (a_nonbon_a2->next$!=NULL))
             {
                 continue<==0 and skip;
                 int a_nonbon_4_gotoskip<==0 and skip;
                 break$<==0 and skip;
                 a_nonbon_i:=0;
                 
                 while( break$=0 AND  a_nonbon_i<a_nonbon_a1->dontuse)
                 {
                     if(a_nonbon_a2=a_nonbon_a1->excluded[a_nonbon_i]) then 
                     {
                         a_nonbon_4_gotoskip:=1;
                         break$<==1 and skip
                          
                     }
                     else 
                     {
                          skip 
                     };
                     if(break$=0)   then
                     {
                         a_nonbon_i:=a_nonbon_i+1
                     }
                     else
                     {
                         skip
                     }
                     
                 };
                 break$<==0 and skip;
                 if(a_nonbon_4_gotoskip) then 
                 {
                     if(a_nonbon_a2->next$=a_nonbon_a2) then 
                     {
                         break$<==1 and skip
                      }
                     else 
                     {
                          skip 
                     };
                     if(break$=0)   then
                     {
                         a_nonbon_a2:=a_nonbon_a2->next$;
                         continue<==1 and skip;
                          a_nonbon_ii:=a_nonbon_ii+1}
                         else
                         {
                             skip
                         }
                         
                     }
                     else 
                     {
                          skip 
                     };
                     if(break$=0)   then 
                     {
                         if(continue=0)   then 
                         {
                             if(lambda=0.0) then 
                             {
                                 a_nonbon_xt:=(a_nonbon_a1->x-a_nonbon_a2->x);
                                 if((a_nonbon_xt>a_nonbon_cutoff) OR (a_nonbon_xt<a_nonbon_lcutoff)) then 
                                 {
                                     if(a_nonbon_a2->next$=a_nonbon_a2) then 
                                     {
                                         break$<==1 and skip
                                      }
                                     else 
                                     {
                                          skip 
                                     };
                                     if(break$=0)   then
                                     {
                                         a_nonbon_a2:=a_nonbon_a2->next$;
                                         continue<==1 and skip;
                                          a_nonbon_ii:=a_nonbon_ii+1}
                                         else
                                         {
                                             skip
                                         }
                                         
                                     }
                                     else 
                                     {
                                          skip 
                                     };
                                     if(break$=0)   then 
                                     {
                                         if(continue=0)   then 
                                         {
                                             a_nonbon_yt:=(a_nonbon_a1->y-a_nonbon_a2->y);
                                             if((a_nonbon_yt>a_nonbon_cutoff) OR (a_nonbon_yt<a_nonbon_lcutoff)) then 
                                             {
                                                 if(a_nonbon_a2->next$=a_nonbon_a2) then 
                                                 {
                                                     break$<==1 and skip
                                                  }
                                                 else 
                                                 {
                                                      skip 
                                                 };
                                                 if(break$=0)   then
                                                 {
                                                     a_nonbon_a2:=a_nonbon_a2->next$;
                                                     continue<==1 and skip;
                                                      a_nonbon_ii:=a_nonbon_ii+1}
                                                     else
                                                     {
                                                         skip
                                                     }
                                                     
                                                 }
                                                 else 
                                                 {
                                                      skip 
                                                 };
                                                 if(break$=0)   then 
                                                 {
                                                     if(continue=0)   then 
                                                     {
                                                         a_nonbon_zt:=(a_nonbon_a1->z-a_nonbon_a2->z);
                                                         if((a_nonbon_zt>a_nonbon_cutoff) OR (a_nonbon_zt<a_nonbon_lcutoff)) then 
                                                         {
                                                             if(a_nonbon_a2->next$=a_nonbon_a2) then 
                                                             {
                                                                 break$<==1 and skip
                                                              }
                                                             else 
                                                             {
                                                                  skip 
                                                             };
                                                             if(break$=0)   then
                                                             {
                                                                 a_nonbon_a2:=a_nonbon_a2->next$;
                                                                 continue<==1 and skip;
                                                                  a_nonbon_ii:=a_nonbon_ii+1}
                                                                 else
                                                                 {
                                                                     skip
                                                                 }
                                                             }
                                                             else
                                                             {
                                                                 skip
                                                             }
                                                         }
                                                         else
                                                         {
                                                             skip
                                                         }
                                                     }
                                                     else
                                                     {
                                                         skip
                                                     }
                                                 }
                                                 else
                                                 {
                                                     skip
                                                 }
                                                 
                                             }
                                             else 
                                             {
                                                  skip 
                                             }
                                             
                                         }
                                         else
                                         {
                                             a_nonbon_xt:=(a_nonbon_a1->x-a_nonbon_a2->x+lambda*(a_nonbon_a1->dx-a_nonbon_a2->dx));
                                             if((a_nonbon_xt>a_nonbon_cutoff) OR (a_nonbon_xt<a_nonbon_lcutoff)) then 
                                             {
                                                 if(a_nonbon_a2->next$=a_nonbon_a2) then 
                                                 {
                                                     break$<==1 and skip
                                                  }
                                                 else 
                                                 {
                                                      skip 
                                                 };
                                                 if(break$=0)   then
                                                 {
                                                     a_nonbon_a2:=a_nonbon_a2->next$;
                                                     continue<==1 and skip;
                                                      a_nonbon_ii:=a_nonbon_ii+1}
                                                     else
                                                     {
                                                         skip
                                                     }
                                                     
                                                 }
                                                 else 
                                                 {
                                                      skip 
                                                 };
                                                 if(break$=0)   then 
                                                 {
                                                     if(continue=0)   then 
                                                     {
                                                         a_nonbon_yt:=(a_nonbon_a1->y-a_nonbon_a2->y+lambda*(a_nonbon_a1->dy-a_nonbon_a2->dy));
                                                         if((a_nonbon_yt>a_nonbon_cutoff) OR (a_nonbon_yt<a_nonbon_lcutoff)) then 
                                                         {
                                                             if(a_nonbon_a2->next$=a_nonbon_a2) then 
                                                             {
                                                                 break$<==1 and skip
                                                              }
                                                             else 
                                                             {
                                                                  skip 
                                                             };
                                                             if(break$=0)   then
                                                             {
                                                                 a_nonbon_a2:=a_nonbon_a2->next$;
                                                                 continue<==1 and skip;
                                                                  a_nonbon_ii:=a_nonbon_ii+1}
                                                                 else
                                                                 {
                                                                     skip
                                                                 }
                                                                 
                                                             }
                                                             else 
                                                             {
                                                                  skip 
                                                             };
                                                             if(break$=0)   then 
                                                             {
                                                                 if(continue=0)   then 
                                                                 {
                                                                     a_nonbon_zt:=(a_nonbon_a1->z-a_nonbon_a2->z+lambda*(a_nonbon_a1->dz-a_nonbon_a2->dz));
                                                                     if((a_nonbon_zt>a_nonbon_cutoff) OR (a_nonbon_zt<a_nonbon_lcutoff)) then 
                                                                     {
                                                                         if(a_nonbon_a2->next$=a_nonbon_a2) then 
                                                                         {
                                                                             break$<==1 and skip
                                                                          }
                                                                         else 
                                                                         {
                                                                              skip 
                                                                         };
                                                                         if(break$=0)   then
                                                                         {
                                                                             a_nonbon_a2:=a_nonbon_a2->next$;
                                                                             continue<==1 and skip;
                                                                              a_nonbon_ii:=a_nonbon_ii+1}
                                                                             else
                                                                             {
                                                                                 skip
                                                                             }
                                                                         }
                                                                         else
                                                                         {
                                                                             skip
                                                                         }
                                                                     }
                                                                     else
                                                                     {
                                                                         skip
                                                                     }
                                                                 }
                                                                 else
                                                                 {
                                                                     skip
                                                                 }
                                                             }
                                                             else
                                                             {
                                                                 skip
                                                             }
                                                             
                                                         }
                                                         else 
                                                         {
                                                              skip 
                                                         }
                                                     };
                                                     if(break$=0)  then 
                                                     {
                                                         if(continue=0)  then 
                                                         {
                                                             a_nonbon_r:=a_nonbon_xt*a_nonbon_xt+a_nonbon_yt*a_nonbon_yt+a_nonbon_zt*a_nonbon_zt;
                                                             a_nonbon_r0:=sqrt(a_nonbon_r);
                                                             a_nonbon_r:=a_nonbon_r*a_nonbon_r*a_nonbon_r;
                                                             a_nonbon_ve:=a_nonbon_ve+a_nonbon_dielectric*a_nonbon_a1->q*a_nonbon_a2->q/ a_nonbon_r0;
                                                             a_nonbon_va:=a_nonbon_va-a_nonbon_a1->a*a_nonbon_a2->a/ a_nonbon_r;
                                                             a_nonbon_vh:=a_nonbon_vh+a_nonbon_a1->b*a_nonbon_a2->b/ a_nonbon_r/ a_nonbon_r;
                                                             if(a_nonbon_a2->serial<ilow OR a_nonbon_a2->serial>ihigh) then 
                                                             {
                                                                 a_nonbon_vel:=a_nonbon_vel+a_nonbon_dielectric*a_nonbon_a1->q*a_nonbon_a2->q/ a_nonbon_r0;
                                                                 a_nonbon_val:=a_nonbon_val-a_nonbon_a1->a*a_nonbon_a2->a/ a_nonbon_r;
                                                                 a_nonbon_vhl:=a_nonbon_vhl+a_nonbon_a1->b*a_nonbon_a2->b/ a_nonbon_r/ a_nonbon_r
                                                                 
                                                             }
                                                             else 
                                                             {
                                                                  skip 
                                                             };
                                                             if(a_nonbon_a2->next$=a_nonbon_a2) then 
                                                             {
                                                                 break$<==1 and skip
                                                              }
                                                             else 
                                                             {
                                                                  skip 
                                                             };
                                                             if(break$=0)   then
                                                             {
                                                                 a_nonbon_a2:=a_nonbon_a2->next$
                                                             }
                                                             else
                                                             {
                                                                 skip
                                                             }
                                                         }
                                                         else
                                                         {
                                                             skip
                                                         }
                                                     }
                                                     else
                                                     {
                                                         skip
                                                     }
                                                 }
                                                 else
                                                 {
                                                     skip
                                                 }
                                             }
                                             else
                                             {
                                                 skip
                                             }
                                         };
                                         break$<==0 and skip;
                                         continue<==0 and skip;
                                         fprintf(op,"Vnonbon internal %s %d Eq %f E6 %f E12 %f\n",a_nonbon_a1->name,a_nonbon_ii,a_nonbon_ve-a_nonbon_vel,a_nonbon_va-a_nonbon_val,a_nonbon_vh-a_nonbon_vhl,RValue) and skip;
                                         fprintf(op,"Vnonbon external %s %d Eq %f E6 %f E12 %f\n",a_nonbon_a1->name,a_nonbon_ii,a_nonbon_vel,a_nonbon_val,a_nonbon_vhl,RValue) and skip;
                                         fprintf(op,"Vnonbon total    %s %d Eq %f E6 %f E12 %f\n",a_nonbon_a1->name,a_nonbon_ii,a_nonbon_ve,a_nonbon_va,a_nonbon_vh,RValue) and skip;
                                         * V:=* V+a_nonbon_ve+a_nonbon_va+a_nonbon_vh;
                                         a_nonbon_vtint:=a_nonbon_vtint+a_nonbon_ve-a_nonbon_vel+a_nonbon_va-a_nonbon_val+a_nonbon_vh-a_nonbon_vhl;
                                         a_nonbon_vtout:=a_nonbon_vtout+a_nonbon_vel+a_nonbon_val+a_nonbon_vhl;
                                         a_nonbon_vtt:=a_nonbon_vtt+a_nonbon_ve+a_nonbon_va+a_nonbon_vh;
                                         a_nonbon_i:=a_nonbon_i;
                                         a_nonbon_ii:=a_nonbon_ii+1
                                     }
                                     else
                                     {
                                         skip
                                     }
                                     
                                 };
                                 continue<==0 and skip;
                                 fprintf(op," Vnonbon total internal %f \n",a_nonbon_vtint,RValue) and skip;
                                 fprintf(op," Vnonbon total external %f \n",a_nonbon_vtout,RValue) and skip;
                                 fprintf(op," Vnonbon total          %f \n",a_nonbon_vtt,RValue) and skip;
                                 return<==1 and RValue:=1;
                                 skip
                                 )
                                 }; 
                                  ATOM *first<==NULL and skip;
                                 ATOM *last<==NULL and skip;
                                 int atomNUMBER<==0,atomUPDATE<==0 and skip;
								  int atom_highest<==-1,atom_lowest<==-1 and skip;
 function atom ( float x,float y,float z,int serial,float q,float a,float b,float mass,char *name,int RValue )
 {
     frame(atom_i,atom_new,atom_ctemp,return,break$) and ( 
     int break$<==0 and skip;
     int return<==0 and skip;
     int atom_i and skip;
    
     ATOM *atom_new and skip;
     char *atom_ctemp and skip;
     atom_new:=NULL;
     if(atom_highest>=serial AND atom_lowest<=serial) then 
     {
         atom_new:=a_m_serial(serial,RValue)
     }
     else 
     {
          skip 
     };
     if(atom_new=NULL) then 
     {
         atom_new:=malloc(sizeof(ATOM)) ;
         if((atom_new)=NULL) then 
         {
             return<==1 and RValue:=0;
             skip
             
         }
         else 
         {
              skip 
         };
         if(return=0)   then 
         {
             atom_new->dontuse:=0;
             atom_new->dontuse:=1;
             atom_new->excluded[0]:=atom_new;
             atom_new->active:=1;
             atom_i:=0;
             
             while(atom_i<32)
             {
                 atom_new->exkind[atom_i]:=0;
                 atom_i:=atom_i+1
                 
             };
             atom_new->next$:=NULL
         }
         else
         {
             skip
         }
         
     }
     else 
     {
          skip 
     };
     if(return=0)  then
     {
         if(first=NULL) then 
         {
             first:=atom_new;
             atom_highest:=serial;
             atom_lowest:=serial
             
         }
         else 
         {
              skip 
         };
         if(last=NULL) then 
         {
             last:=atom_new
         }
         else 
         {
              skip 
         };
         atom_new->x:=x;
         atom_new->y:=y;
         atom_new->z:=z;
         atom_new->fx:=0.0;
         atom_new->fy:=0.0;
         atom_new->fz:=0.0;
         atom_new->dx:=0.0;
         atom_new->dy:=0.0;
         atom_new->dz:=0.0;
         atom_new->vx:=0.0;
         atom_new->vy:=0.0;
         atom_new->vz:=0.0;
         atom_new->jaa:=-1;
         atom_new->chi:=-1;
         atom_new->px:=10e10;
         atom_new->py:=10e10;
         atom_new->pz:=10e10;
         atom_new->q:=q;
         atom_new->a:=a;
         atom_new->b:=b;
         atom_new->serial:=serial;
         atom_new->mass:=mass;
         break$<==0 and skip;
         atom_i:=0;
         
         while( break$=0 AND  atom_i<8)
         {
             atom_new->name[atom_i]:=* name;
             atom_new->name[atom_i+1]:='\0';
             if(* name='\0') then 
             {
                 break$<==1 and skip
              }
             else 
             {
                  skip 
             };
             if(break$=0)   then
             {
                 name:=name+1;
                 atom_i:=atom_i+1
             }
             else
             {
                 skip
             }
             
         };
         break$<==0 and skip;
         if(atom_new->next$=NULL) then 
         {
             atom_new->next$:=atom_new;
             last->next$:=atom_new;
             last:=atom_new
             
         }
         else 
         {
              skip 
         };
         atomUPDATE:=1;
         if(atom_highest<serial) then 
         {
             atom_highest:=serial
         }
         else 
         {
              skip 
         };
         if(atom_lowest>serial) then 
         {
             atom_lowest:=serial
         }
         else 
         {
              skip 
         };
         return<==1 and RValue:=1;
         skip
     }
     else
     {
         skip
     }
     )
     }; 
  function a_number ( int RValue )
 {
     frame(a_number_ap,return,break$) and ( 
     int break$<==0 and skip;
     int return<==0 and skip;
     ATOM *a_number_ap and skip;
     if(atomUPDATE) then 
     {
         atomUPDATE:=0;
         atomNUMBER:=0;
         if(first=NULL) then 
         {
             return<==1 and RValue:=0;
             skip
         }
         else 
         {
              skip 
         };
         if(return=0)   then 
         {
             a_number_ap:=first;
             break$<==0 and skip;
             while( break$=0 AND 1)
             {
                 if(a_number_ap->next$=NULL) then 
                 {
                     break$<==1 and skip
                  }
                 else 
                 {
                      skip 
                 };
                 if(break$=0)   then
                 {
                     atomNUMBER:=atomNUMBER+1;
                     if(a_number_ap->next$=a_number_ap) then 
                     {
                         break$<==1 and skip
                      }
                     else 
                     {
                          skip 
                     };
                     if(break$=0)   then
                     {
                         a_number_ap:=a_number_ap->next$
                     }
                     else
                     {
                         skip
                     }
                 }
                 else
                 {
                     skip
                 }
             };
             break$<==0 and skip
         }
         else
         {
             skip
         }
         
     }
     else 
     {
          skip 
     };
     if(return=0)  then
     {
         return<==1 and RValue:=atomNUMBER;
         skip
     }
     else
     {
         skip
     }
     )
     }; 
	 ATOM *a_m_serial_ap<==NULL and skip;
     ATOM *a_m_serial_lastmatched<==NULL and skip;
  function a_m_serial ( int serial,ATOM* RValue )
 {
     frame(a_m_serial_i,a_m_serial_n,return) and ( 
     int return<==0 and skip;
     
     int a_m_serial_i,a_m_serial_n and skip;
     if(atomUPDATE) then 
     {
         a_m_serial_n:=a_number(RValue)
     }
     else
     {
         a_m_serial_n:=atomNUMBER
     };
     a_m_serial_ap:=first;
     if(a_m_serial_ap=NULL) then 
     {
         return<==1 and RValue:=NULL;
         skip
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         if(a_m_serial_lastmatched=NULL) then 
         {
             a_m_serial_lastmatched:=first
         }
         else 
         {
              skip 
         };
         if(serial=a_m_serial_lastmatched->serial) then 
         {
             return<==1 and RValue:=a_m_serial_lastmatched;
             skip
         }
         else 
         {
              skip 
         };
         if(return=0)   then 
         {
             if(serial>a_m_serial_lastmatched->serial) then 
             {
                 a_m_serial_ap:=a_m_serial_lastmatched
             }
             else 
             {
                  skip 
             };
             a_m_serial_i:=0;
             
             while( return=0 AND  a_m_serial_i<a_m_serial_n)
             {
                 if(a_m_serial_ap->serial=serial) then 
                 {
                     a_m_serial_lastmatched:=a_m_serial_ap;
                     return<==1 and RValue:=a_m_serial_ap;
                     skip
                     
                 }
                 else 
                 {
                      skip 
                 };
                 if(return=0)   then 
                 {
                     if(a_m_serial_ap=a_m_serial_ap->next$) then 
                     {
                         a_m_serial_ap:=first
                     }
                     else
                     {
                         a_m_serial_ap:=a_m_serial_ap->next$
                     };
                     a_m_serial_i:=a_m_serial_i+1
                 }
                 else
                 {
                     skip
                 }
                 
             };
             if(return=0)   then 
             {
                 return<==1 and RValue:=NULL;
                 skip
             }
             else
             {
                 skip
             }
         }
         else
         {
             skip
         }
     }
     else
     {
         skip
     }
     )
     }; 
  

  function a_m_serial ( int serial,ATOM* RValue )
 {
     frame(a_m_serial_ap,a_m_serial_lastmatched,a_m_serial_i,a_m_serial_n,return) and ( 
     int return<==0 and skip;
     ATOM *a_m_serial_ap<==NULL and skip;
     ATOM *a_m_serial_lastmatched<==NULL and skip;
     int a_m_serial_i,a_m_serial_n and skip;
     if(atomUPDATE) then 
     {
         a_m_serial_n:=a_number(RValue)
     }
     else
     {
         a_m_serial_n:=atomNUMBER
     };
     a_m_serial_ap:=first;
     if(a_m_serial_ap=NULL) then 
     {
         return<==1 and RValue:=NULL;
         skip
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         if(a_m_serial_lastmatched=NULL) then 
         {
             a_m_serial_lastmatched:=first
         }
         else 
         {
              skip 
         };
         if(serial=a_m_serial_lastmatched->serial) then 
         {
             return<==1 and RValue:=a_m_serial_lastmatched;
             skip
         }
         else 
         {
              skip 
         };
         if(return=0)   then 
         {
             if(serial>a_m_serial_lastmatched->serial) then 
             {
                 a_m_serial_ap:=a_m_serial_lastmatched
             }
             else 
             {
                  skip 
             };
             a_m_serial_i:=0;
             
             while( return=0 AND  a_m_serial_i<a_m_serial_n)
             {
                 if(a_m_serial_ap->serial=serial) then 
                 {
                     a_m_serial_lastmatched:=a_m_serial_ap;
                     return<==1 and RValue:=a_m_serial_ap;
                     skip
                     
                 }
                 else 
                 {
                      skip 
                 };
                 if(return=0)   then 
                 {
                     if(a_m_serial_ap=a_m_serial_ap->next$) then 
                     {
                         a_m_serial_ap:=first
                     }
                     else
                     {
                         a_m_serial_ap:=a_m_serial_ap->next$
                     };
                     a_m_serial_i:=a_m_serial_i+1
                 }
                 else
                 {
                     skip
                 }
                 
             };
             if(return=0)   then 
             {
                 return<==1 and RValue:=NULL;
                 skip
             }
             else
             {
                 skip
             }
         }
         else
         {
             skip
         }
     }
     else
     {
         skip
     }
     )
     }; 
	 ATOM *a_next_ap<==NULL and skip;
  function a_next ( int flag,ATOM* RValue )
 {
     frame(return) and ( 
     int return<==0 and skip;
     
     if(a_next_ap=NULL) then 
     {
         a_next_ap:=first
     }
     else 
     {
          skip 
     };
     if(a_next_ap=NULL) then 
     {
         return<==1 and RValue:=NULL;
         skip
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         if(flag<=0) then 
         {
             a_next_ap:=first;
             return<==1 and RValue:=a_next_ap;
             skip
             
         }
         else 
         {
              skip 
         };
         if(return=0)   then 
         {
             if(a_next_ap=a_next_ap->next$) then 
             {
                 return<==1 and RValue:=NULL;
                 skip
             }
             else 
             {
                  skip 
             };
             if(return=0)   then 
             {
                 a_next_ap:=a_next_ap->next$;
                 return<==1 and RValue:=a_next_ap;
                 skip
             }
             else
             {
                 skip
             }
         }
         else
         {
             skip
         }
     }
     else
     {
         skip
     }
     )
     }; 
  function a_f_zero ( int RValue )
 {
     frame(a_f_zero_ap,return) and ( 
     int return<==0 and skip;
     ATOM *a_f_zero_ap and skip;
     a_f_zero_ap:=first;
     while( return=0 AND  1)
     {
         if(a_f_zero_ap->next$=NULL) then 
         {
             return<==1 and RValue:=0;
             skip
         }
         else 
         {
              skip 
         };
         if(return=0)   then 
         {
             a_f_zero_ap->fx:=0.0;
             a_f_zero_ap->fy:=0.0;
             a_f_zero_ap->fz:=0.0;
             if(a_f_zero_ap=a_f_zero_ap->next$) then 
             {
                 return<==1 and RValue:=1;
                 skip
             }
             else 
             {
                  skip 
             };
             if(return=0)   then 
             {
                 a_f_zero_ap:=a_f_zero_ap->next$
             }
             else
             {
                 skip
             }
         }
         else
         {
             skip
         }
     }
     )
     }; 
  function a_d_zero ( int RValue )
 {
     frame(a_d_zero_ap,return) and ( 
     int return<==0 and skip;
     ATOM *a_d_zero_ap and skip;
     a_d_zero_ap:=first;
     if(a_d_zero_ap=NULL) then 
     {
         return<==1 and RValue:=0;
         skip
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         while( return=0 AND  1)
         {
             if(a_d_zero_ap->next$=NULL) then 
             {
                 return<==1 and RValue:=0;
                 skip
             }
             else 
             {
                  skip 
             };
             if(return=0)   then 
             {
                 a_d_zero_ap->dx:=0.0;
                 a_d_zero_ap->dy:=0.0;
                 a_d_zero_ap->dz:=0.0;
                 if(a_d_zero_ap=a_d_zero_ap->next$) then 
                 {
                     return<==1 and RValue:=1;
                     skip
                 }
                 else 
                 {
                      skip 
                 };
                 if(return=0)   then 
                 {
                     a_d_zero_ap:=a_d_zero_ap->next$
                 }
                 else
                 {
                     skip
                 }
             }
             else
             {
                 skip
             }
         }
     }
     else
     {
         skip
     }
     )
     }; 
  function a_g_zero ( int RValue )
 {
     frame(a_g_zero_ap,return) and ( 
     int return<==0 and skip;
     ATOM *a_g_zero_ap and skip;
     a_g_zero_ap:=first;
     if(a_g_zero_ap=NULL) then 
     {
         return<==1 and RValue:=0;
         skip
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         while( return=0 AND  1)
         {
             if(a_g_zero_ap->next$=NULL) then 
             {
                 return<==1 and RValue:=0;
                 skip
             }
             else 
             {
                  skip 
             };
             if(return=0)   then 
             {
                 a_g_zero_ap->gx:=0.0;
                 a_g_zero_ap->gy:=0.0;
                 a_g_zero_ap->gz:=0.0;
                 if(a_g_zero_ap=a_g_zero_ap->next$) then 
                 {
                     return<==1 and RValue:=1;
                     skip
                 }
                 else 
                 {
                      skip 
                 };
                 if(return=0)   then 
                 {
                     a_g_zero_ap:=a_g_zero_ap->next$
                 }
                 else
                 {
                     skip
                 }
             }
             else
             {
                 skip
             }
         }
     }
     else
     {
         skip
     }
     )
     }; 
  function a_v_zero ( int RValue )
 {
     frame(a_v_zero_ap,return) and ( 
     int return<==0 and skip;
     ATOM *a_v_zero_ap and skip;
     a_v_zero_ap:=first;
     if(a_v_zero_ap=NULL) then 
     {
         return<==1 and RValue:=0;
         skip
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         while( return=0 AND  1)
         {
             if(a_v_zero_ap->next$=NULL) then 
             {
                 return<==1 and RValue:=0;
                 skip
             }
             else 
             {
                  skip 
             };
             if(return=0)   then 
             {
                 a_v_zero_ap->vx:=0.0;
                 a_v_zero_ap->vy:=0.0;
                 a_v_zero_ap->vz:=0.0;
                 if(a_v_zero_ap=a_v_zero_ap->next$) then 
                 {
                     return<==1 and RValue:=1;
                     skip
                 }
                 else 
                 {
                      skip 
                 };
                 if(return=0)   then 
                 {
                     a_v_zero_ap:=a_v_zero_ap->next$
                 }
                 else
                 {
                     skip
                 }
             }
             else
             {
                 skip
             }
         }
     }
     else
     {
         skip
     }
     )
     }; 
  function a_inc_f ( float lambda,int RValue )
 {
     frame(a_inc_f_ap,return) and ( 
     int return<==0 and skip;
     ATOM *a_inc_f_ap and skip;
     a_inc_f_ap:=first;
     if(a_inc_f_ap=NULL) then 
     {
         return<==1 and RValue:=0;
         skip
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         while( return=0 AND  1)
         {
             if(a_inc_f_ap->next$=NULL) then 
             {
                 return<==1 and RValue:=0;
                 skip
             }
             else 
             {
                  skip 
             };
             if(return=0)   then 
             {
                 a_inc_f_ap->x:=a_inc_f_ap->x+a_inc_f_ap->fx*lambda;
                 a_inc_f_ap->y:=a_inc_f_ap->y+a_inc_f_ap->fy*lambda;
                 a_inc_f_ap->z:=a_inc_f_ap->z+a_inc_f_ap->fz*lambda;
                 if(a_inc_f_ap=a_inc_f_ap->next$) then 
                 {
                     return<==1 and RValue:=1;
                     skip
                 }
                 else 
                 {
                      skip 
                 };
                 if(return=0)   then 
                 {
                     a_inc_f_ap:=a_inc_f_ap->next$
                 }
                 else
                 {
                     skip
                 }
             }
             else
             {
                 skip
             }
         }
     }
     else
     {
         skip
     }
     )
     }; 
  function a_inc_d ( float lambda,int RValue )
 {
     frame(a_inc_d_ap,return) and ( 
     int return<==0 and skip;
     ATOM *a_inc_d_ap and skip;
     a_inc_d_ap:=first;
     if(a_inc_d_ap=NULL) then 
     {
         return<==1 and RValue:=0;
         skip
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         while( return=0 AND  1)
         {
             if(a_inc_d_ap->next$=NULL) then 
             {
                 return<==1 and RValue:=0;
                 skip
             }
             else 
             {
                  skip 
             };
             if(return=0)   then 
             {
                 a_inc_d_ap->x:=a_inc_d_ap->x+a_inc_d_ap->dx*lambda;
                 a_inc_d_ap->y:=a_inc_d_ap->y+a_inc_d_ap->dy*lambda;
                 a_inc_d_ap->z:=a_inc_d_ap->z+a_inc_d_ap->dz*lambda;
                 if(a_inc_d_ap=a_inc_d_ap->next$) then 
                 {
                     return<==1 and RValue:=1;
                     skip
                 }
                 else 
                 {
                      skip 
                 };
                 if(return=0)   then 
                 {
                     a_inc_d_ap:=a_inc_d_ap->next$
                 }
                 else
                 {
                     skip
                 }
             }
             else
             {
                 skip
             }
         }
     }
     else
     {
         skip
     }
     )
     }; 
  function a_inc_v ( float lambda,int RValue )
 {
     frame(a_inc_v_ap,return) and ( 
     int return<==0 and skip;
     ATOM *a_inc_v_ap and skip;
     a_inc_v_ap:=first;
     if(a_inc_v_ap=NULL) then 
     {
         return<==1 and RValue:=0;
         skip
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         while( return=0 AND  1)
         {
             if(a_inc_v_ap->next$=NULL) then 
             {
                 return<==1 and RValue:=0;
                 skip
             }
             else 
             {
                  skip 
             };
             if(return=0)   then 
             {
                 a_inc_v_ap->x:=a_inc_v_ap->x+a_inc_v_ap->vx*lambda;
                 a_inc_v_ap->y:=a_inc_v_ap->y+a_inc_v_ap->vy*lambda;
                 a_inc_v_ap->z:=a_inc_v_ap->z+a_inc_v_ap->vz*lambda;
                 if(a_inc_v_ap=a_inc_v_ap->next$) then 
                 {
                     return<==1 and RValue:=1;
                     skip
                 }
                 else 
                 {
                      skip 
                 };
                 if(return=0)   then 
                 {
                     a_inc_v_ap:=a_inc_v_ap->next$
                 }
                 else
                 {
                     skip
                 }
             }
             else
             {
                 skip
             }
         }
     }
     else
     {
         skip
     }
     )
     }; 
  function a_ftodx ( float lambda,float lamold,int RValue )
 {
     frame(a_ftodx_ap,return) and ( 
     int return<==0 and skip;
     ATOM *a_ftodx_ap and skip;
     a_ftodx_ap:=first;
     if(a_ftodx_ap=NULL) then 
     {
         return<==1 and RValue:=0;
         skip
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         while( return=0 AND  1)
         {
             if(a_ftodx_ap->next$=NULL) then 
             {
                 return<==1 and RValue:=0;
                 skip
             }
             else 
             {
                  skip 
             };
             if(return=0)   then 
             {
                 a_ftodx_ap->dx:=a_ftodx_ap->dx*lamold+a_ftodx_ap->fx*lambda;
                 a_ftodx_ap->dy:=a_ftodx_ap->dy*lamold+a_ftodx_ap->fy*lambda;
                 a_ftodx_ap->dz:=a_ftodx_ap->dz*lamold+a_ftodx_ap->fz*lambda;
                 if(a_ftodx_ap=a_ftodx_ap->next$) then 
                 {
                     return<==1 and RValue:=1;
                     skip
                 }
                 else 
                 {
                      skip 
                 };
                 if(return=0)   then 
                 {
                     a_ftodx_ap:=a_ftodx_ap->next$
                 }
                 else
                 {
                     skip
                 }
             }
             else
             {
                 skip
             }
         }
     }
     else
     {
         skip
     }
     )
     }; 
  function a_ftogx ( float lambda,float lamold,int RValue )
 {
     frame(a_ftogx_ap,return) and ( 
     int return<==0 and skip;
     ATOM *a_ftogx_ap and skip;
     a_ftogx_ap:=first;
     if(a_ftogx_ap=NULL) then 
     {
         return<==1 and RValue:=0;
         skip
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         while( return=0 AND  1)
         {
             if(a_ftogx_ap->next$=NULL) then 
             {
                 return<==1 and RValue:=0;
                 skip
             }
             else 
             {
                  skip 
             };
             if(return=0)   then 
             {
                 a_ftogx_ap->gx:=a_ftogx_ap->gx*lamold+a_ftogx_ap->fx*lambda;
                 a_ftogx_ap->gy:=a_ftogx_ap->gy*lamold+a_ftogx_ap->fy*lambda;
                 a_ftogx_ap->gz:=a_ftogx_ap->gz*lamold+a_ftogx_ap->fz*lambda;
                 if(a_ftogx_ap=a_ftogx_ap->next$) then 
                 {
                     return<==1 and RValue:=1;
                     skip
                 }
                 else 
                 {
                      skip 
                 };
                 if(return=0)   then 
                 {
                     a_ftogx_ap:=a_ftogx_ap->next$
                 }
                 else
                 {
                     skip
                 }
             }
             else
             {
                 skip
             }
         }
     }
     else
     {
         skip
     }
     )
     }; 
  function a_ftovx ( float lambda,float lamold,int RValue )
 {
     frame(a_ftovx_ap,return) and ( 
     int return<==0 and skip;
     ATOM *a_ftovx_ap and skip;
     a_ftovx_ap:=first;
     if(a_ftovx_ap=NULL) then 
     {
         return<==1 and RValue:=0;
         skip
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         while( return=0 AND  1)
         {
             if(a_ftovx_ap->next$=NULL) then 
             {
                 return<==1 and RValue:=0;
                 skip
             }
             else 
             {
                  skip 
             };
             if(return=0)   then 
             {
                 a_ftovx_ap->vx:=a_ftovx_ap->vx*lamold+a_ftovx_ap->fx*lambda;
                 a_ftovx_ap->vy:=a_ftovx_ap->vy*lamold+a_ftovx_ap->fy*lambda;
                 a_ftovx_ap->vz:=a_ftovx_ap->vz*lamold+a_ftovx_ap->fz*lambda;
                 if(a_ftovx_ap=a_ftovx_ap->next$) then 
                 {
                     return<==1 and RValue:=1;
                     skip
                 }
                 else 
                 {
                      skip 
                 };
                 if(return=0)   then 
                 {
                     a_ftovx_ap:=a_ftovx_ap->next$
                 }
                 else
                 {
                     skip
                 }
             }
             else
             {
                 skip
             }
         }
     }
     else
     {
         skip
     }
     )
     }; 
  function a_max_f ( float RValue )
 {
     frame(a_max_f_l2norm,a_max_f_l2max,a_max_f_ap,return) and ( 
     int return<==0 and skip;
     float a_max_f_l2norm,a_max_f_l2max and skip;
     ATOM *a_max_f_ap and skip;
     a_max_f_ap:=first;
     a_max_f_l2max:=-1.0;
     if(a_max_f_ap=NULL) then 
     {
         return<==1 and RValue:=a_max_f_l2max;
         skip
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         while( return=0 AND  1)
         {
             if(a_max_f_ap->next$=NULL) then 
             {
                 return<==1 and RValue:=a_max_f_l2max;
                 skip
             }
             else 
             {
                  skip 
             };
             if(return=0)   then 
             {
                 a_max_f_l2norm:=a_max_f_ap->fx*a_max_f_ap->fx;
                 a_max_f_l2norm:=a_max_f_l2norm+a_max_f_ap->fy*a_max_f_ap->fy;
                 a_max_f_l2norm:=a_max_f_l2norm+a_max_f_ap->fz*a_max_f_ap->fz;
                 if(a_max_f_l2norm>a_max_f_l2max) then 
                 {
                     a_max_f_l2max:=a_max_f_l2norm
                 }
                 else 
                 {
                      skip 
                 };
                 if(a_max_f_ap=a_max_f_ap->next$) then 
                 {
                     return<==1 and RValue:=a_max_f_l2max;
                     skip
                 }
                 else 
                 {
                      skip 
                 };
                 if(return=0)   then 
                 {
                     a_max_f_ap:=a_max_f_ap->next$
                 }
                 else
                 {
                     skip
                 }
             }
             else
             {
                 skip
             }
         }
     }
     else
     {
         skip
     }
     )
     }; 
  function a_max_d ( float RValue )
 {
     frame(a_max_d_l2norm,a_max_d_l2max,a_max_d_ap,return) and ( 
     int return<==0 and skip;
     float a_max_d_l2norm,a_max_d_l2max and skip;
     ATOM *a_max_d_ap and skip;
     a_max_d_ap:=first;
     a_max_d_l2max:=-1.0;
     if(a_max_d_ap=NULL) then 
     {
         return<==1 and RValue:=a_max_d_l2max;
         skip
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         while( return=0 AND  1)
         {
             if(a_max_d_ap->next$=NULL) then 
             {
                 return<==1 and RValue:=a_max_d_l2max;
                 skip
             }
             else 
             {
                  skip 
             };
             if(return=0)   then 
             {
                 a_max_d_l2norm:=a_max_d_ap->dx*a_max_d_ap->dx;
                 a_max_d_l2norm:=a_max_d_l2norm+a_max_d_ap->dy*a_max_d_ap->dy;
                 a_max_d_l2norm:=a_max_d_l2norm+a_max_d_ap->dz*a_max_d_ap->dz;
                 if(a_max_d_l2norm>a_max_d_l2max) then 
                 {
                     a_max_d_l2max:=a_max_d_l2norm
                 }
                 else 
                 {
                      skip 
                 };
                 if(a_max_d_ap=a_max_d_ap->next$) then 
                 {
                     return<==1 and RValue:=a_max_d_l2max;
                     skip
                 }
                 else 
                 {
                      skip 
                 };
                 if(return=0)   then 
                 {
                     a_max_d_ap:=a_max_d_ap->next$
                 }
                 else
                 {
                     skip
                 }
             }
             else
             {
                 skip
             }
         }
     }
     else
     {
         skip
     }
     )
     }; 
  function a_l2_f ( float RValue )
 {
     frame(a_l2_f_ap,a_l2_f_l2,return) and ( 
     int return<==0 and skip;
     ATOM *a_l2_f_ap and skip;
     float a_l2_f_l2 and skip;
     a_l2_f_ap:=first;
     if(a_l2_f_ap=NULL) then 
     {
         return<==1 and RValue:=0.0;
         skip
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         a_l2_f_l2:=0.0;
         while( return=0 AND  1)
         {
             if(a_l2_f_ap->next$=NULL) then 
             {
                 return<==1 and RValue:=-a_l2_f_l2;
                 skip
             }
             else 
             {
                  skip 
             };
             if(return=0)   then 
             {
                 a_l2_f_l2:=a_l2_f_l2+a_l2_f_ap->fx*a_l2_f_ap->fx;
                 a_l2_f_l2:=a_l2_f_l2+a_l2_f_ap->fy*a_l2_f_ap->fy;
                 a_l2_f_l2:=a_l2_f_l2+a_l2_f_ap->fz*a_l2_f_ap->fz;
                 if(a_l2_f_ap=a_l2_f_ap->next$) then 
                 {
                     return<==1 and RValue:=a_l2_f_l2;
                     skip
                 }
                 else 
                 {
                      skip 
                 };
                 if(return=0)   then 
                 {
                     a_l2_f_ap:=a_l2_f_ap->next$
                 }
                 else
                 {
                     skip
                 }
             }
             else
             {
                 skip
             }
         }
     }
     else
     {
         skip
     }
     )
     }; 
  function a_l2_g ( float RValue )
 {
     frame(a_l2_g_ap,a_l2_g_l2,return) and ( 
     int return<==0 and skip;
     ATOM *a_l2_g_ap and skip;
     float a_l2_g_l2 and skip;
     a_l2_g_ap:=first;
     if(a_l2_g_ap=NULL) then 
     {
         return<==1 and RValue:=0.0;
         skip
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         a_l2_g_l2:=0.0;
         while( return=0 AND  1)
         {
             if(a_l2_g_ap->next$=NULL) then 
             {
                 return<==1 and RValue:=-a_l2_g_l2;
                 skip
             }
             else 
             {
                  skip 
             };
             if(return=0)   then 
             {
                 a_l2_g_l2:=a_l2_g_l2+a_l2_g_ap->gx*a_l2_g_ap->gx;
                 a_l2_g_l2:=a_l2_g_l2+a_l2_g_ap->gy*a_l2_g_ap->gy;
                 a_l2_g_l2:=a_l2_g_l2+a_l2_g_ap->gz*a_l2_g_ap->gz;
                 if(a_l2_g_ap=a_l2_g_ap->next$) then 
                 {
                     return<==1 and RValue:=a_l2_g_l2;
                     skip
                 }
                 else 
                 {
                      skip 
                 };
                 if(return=0)   then 
                 {
                     a_l2_g_ap:=a_l2_g_ap->next$
                 }
                 else
                 {
                     skip
                 }
             }
             else
             {
                 skip
             }
         }
     }
     else
     {
         skip
     }
     )
     }; 
  function a_l2_v ( float RValue )
 {
     frame(a_l2_v_ap,a_l2_v_l2,return) and ( 
     int return<==0 and skip;
     ATOM *a_l2_v_ap and skip;
     float a_l2_v_l2 and skip;
     a_l2_v_ap:=first;
     if(a_l2_v_ap=NULL) then 
     {
         return<==1 and RValue:=0.0;
         skip
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         a_l2_v_l2:=0.0;
         while( return=0 AND  1)
         {
             if(a_l2_v_ap->next$=NULL) then 
             {
                 return<==1 and RValue:=-a_l2_v_l2;
                 skip
             }
             else 
             {
                  skip 
             };
             if(return=0)   then 
             {
                 a_l2_v_l2:=a_l2_v_l2+a_l2_v_ap->vx*a_l2_v_ap->vx;
                 a_l2_v_l2:=a_l2_v_l2+a_l2_v_ap->vy*a_l2_v_ap->vy;
                 a_l2_v_l2:=a_l2_v_l2+a_l2_v_ap->vz*a_l2_v_ap->vz;
                 if(a_l2_v_ap=a_l2_v_ap->next$) then 
                 {
                     return<==1 and RValue:=a_l2_v_l2;
                     skip
                 }
                 else 
                 {
                      skip 
                 };
                 if(return=0)   then 
                 {
                     a_l2_v_ap:=a_l2_v_ap->next$
                 }
                 else
                 {
                     skip
                 }
             }
             else
             {
                 skip
             }
         }
     }
     else
     {
         skip
     }
     )
     }; 
  function a_l2_d ( float RValue )
 {
     frame(a_l2_d_ap,a_l2_d_l2,return) and ( 
     int return<==0 and skip;
     ATOM *a_l2_d_ap and skip;
     float a_l2_d_l2 and skip;
     a_l2_d_ap:=first;
     if(a_l2_d_ap=NULL) then 
     {
         return<==1 and RValue:=0.0;
         skip
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         a_l2_d_l2:=0.0;
         while( return=0 AND  1)
         {
             if(a_l2_d_ap->next$=NULL) then 
             {
                 return<==1 and RValue:=-a_l2_d_l2;
                 skip
             }
             else 
             {
                  skip 
             };
             if(return=0)   then 
             {
                 a_l2_d_l2:=a_l2_d_l2+a_l2_d_ap->dx*a_l2_d_ap->dx;
                 a_l2_d_l2:=a_l2_d_l2+a_l2_d_ap->dy*a_l2_d_ap->dy;
                 a_l2_d_l2:=a_l2_d_l2+a_l2_d_ap->dz*a_l2_d_ap->dz;
                 if(a_l2_d_ap=a_l2_d_ap->next$) then 
                 {
                     return<==1 and RValue:=a_l2_d_l2;
                     skip
                 }
                 else 
                 {
                      skip 
                 };
                 if(return=0)   then 
                 {
                     a_l2_d_ap:=a_l2_d_ap->next$
                 }
                 else
                 {
                     skip
                 }
             }
             else
             {
                 skip
             }
         }
     }
     else
     {
         skip
     }
     )
     }; 
  function dump_atoms ( FILE *where )
 {
     frame(dump_atoms_a,dump_atoms_ap,dump_atoms_bonded,dump_atoms_i,dump_atoms_j,return) and ( 
     int return<==0 and skip;
     ATOM *dump_atoms_a,*dump_atoms_ap and skip;
     ATOM *dump_atoms_bonded[20] and skip;
     int dump_atoms_i,dump_atoms_j and skip;
     dump_atoms_a:=first;
     if(dump_atoms_a=NULL) then 
     {
          return<==1 and skip
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         while( return=0 AND  (dump_atoms_a->next$!=dump_atoms_a))
         {
             if(dump_atoms_a->next$=NULL) then 
             {
                  return<==1 and skip
             }
             else 
             {
                  skip 
             };
             if(return=0)   then 
             {
                 fprintf(where,"atom %f %f %f %d %s %f %f %f %f ;\n",dump_atoms_a->x,dump_atoms_a->y,dump_atoms_a->z,dump_atoms_a->serial,dump_atoms_a->name,dump_atoms_a->q,dump_atoms_a->a,dump_atoms_a->b,dump_atoms_a->mass,RValue) and skip;
                 if(dump_atoms_a->chi>0 AND dump_atoms_a->jaa>0) then 
                 {
                     fprintf(where,"mompar %d %f %f;\n",dump_atoms_a->serial,dump_atoms_a->chi,dump_atoms_a->jaa,RValue) and skip
                 }
                 else 
                 {
                      skip 
                 };
                 if(!dump_atoms_a->active) then 
                 {
                     fprintf(where," inactive %d ;\n",dump_atoms_a->serial,RValue) and skip
                 }
                 else 
                 {
                      skip 
                 };
                 dump_atoms_a:=dump_atoms_a->next$
             }
             else
             {
                 skip
             }
         };
         if(return=0)   then 
         {
             if(dump_atoms_a->next$=NULL) then 
             {
                  return<==1 and skip
             }
             else 
             {
                  skip 
             };
             if(return=0)   then 
             {
                 fprintf(where,"atom %f %f %f %d %s %f %f %f %f ;\n",dump_atoms_a->x,dump_atoms_a->y,dump_atoms_a->z,dump_atoms_a->serial,dump_atoms_a->name,dump_atoms_a->q,dump_atoms_a->a,dump_atoms_a->b,dump_atoms_a->mass,RValue) and skip;
                 if(dump_atoms_a->chi>0 AND dump_atoms_a->jaa>0) then 
                 {
                     fprintf(where,"mompar %d %f %f;\n",dump_atoms_a->serial,dump_atoms_a->chi,dump_atoms_a->jaa,RValue) and skip
                 }
                 else 
                 {
                      skip 
                 };
                 if(!dump_atoms_a->active) then 
                 {
                     fprintf(where," inactive %d ;\n",dump_atoms_a->serial,RValue) and skip
                 }
                 else 
                 {
                      skip 
                 };
                 dump_excludes(where)
             }
             else
             {
                 skip
             }
         }
         else
         {
             skip
         }
     }
     else
     {
         skip
     }
     )
     }; 
  function dump_excludes ( FILE *where )
 {
     frame(dump_excludes_a,dump_excludes_ap,dump_excludes_istailored,dump_excludes_numatm,dump_excludes_i,dump_excludes_j,return) and ( 
     int return<==0 and skip;
     ATOM *dump_excludes_a,*dump_excludes_ap and skip;
     int dump_excludes_istailored and skip;
     int dump_excludes_numatm and skip;
     int dump_excludes_i,dump_excludes_j and skip;
     dump_excludes_numatm:=a_number(RValue);
     if(dump_excludes_numatm<=0) then 
     {
          return<==1 and skip
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         dump_excludes_i:=0;
         
         while(dump_excludes_i<dump_excludes_numatm)
         {
             dump_excludes_a:=a_next(dump_excludes_i,RValue);
             dump_excludes_j:=0;
             
             while(dump_excludes_j<dump_excludes_a->dontuse)
             {
                 if(dump_excludes_a->exkind[dump_excludes_j]>0) then 
                 {
                     dump_excludes_ap:=dump_excludes_a->excluded[dump_excludes_j];
                     if(dump_excludes_ap->serial>dump_excludes_a->serial) then 
                     {
                         fprintf(where," tailor exclude %d %d ;\n",dump_excludes_a->serial,dump_excludes_ap->serial,RValue) and skip
                     }
                     else 
                     {
                          skip 
                     }
                     
                 }
                 else 
                 {
                      skip 
                 };
                 dump_excludes_j:=dump_excludes_j+1
                 
             };
             dump_excludes_i:=dump_excludes_i+1
             
         }
     }
     else
     {
         skip
     }
     )
     }; 
  function dump_velocity ( FILE *where )
 {
     frame(dump_velocity_a,return) and ( 
     int return<==0 and skip;
     ATOM *dump_velocity_a and skip;
     dump_velocity_a:=first;
     if(dump_velocity_a=NULL) then 
     {
          return<==1 and skip
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         while( return=0 AND  (dump_velocity_a->next$!=dump_velocity_a))
         {
             if(dump_velocity_a->next$=NULL) then 
             {
                  return<==1 and skip
             }
             else 
             {
                  skip 
             };
             if(return=0)   then 
             {
                 fprintf(where,"velocity %d %f %f %f ;\n",dump_velocity_a->serial,dump_velocity_a->vx,dump_velocity_a->vy,dump_velocity_a->vz,RValue) and skip;
                 dump_velocity_a:=dump_velocity_a->next$
             }
             else
             {
                 skip
             }
         };
         if(return=0)   then 
         {
             if(dump_velocity_a->next$=NULL) then 
             {
                  return<==1 and skip
             }
             else 
             {
                  skip 
             };
             if(return=0)   then 
             {
                 fprintf(where,"velocity %d %f %f %f ;\n",dump_velocity_a->serial,dump_velocity_a->vx,dump_velocity_a->vy,dump_velocity_a->vz,RValue) and skip
             }
             else
             {
                 skip
             }
         }
         else
         {
             skip
         }
     }
     else
     {
         skip
     }
     )
     }; 
  function a_readvelocity ( int serial,float vx,float vy,float vz,int RValue )
 {
     frame(a_readvelocity_ap,return) and ( 
     int return<==0 and skip;
     ATOM *a_readvelocity_ap and skip;
     a_readvelocity_ap:=a_m_serial(serial,RValue);
     if(a_readvelocity_ap=NULL) then 
     {
         return<==1 and RValue:=0;
         skip
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         a_readvelocity_ap->vx:=vx;
         a_readvelocity_ap->vy:=vy;
         a_readvelocity_ap->vz:=vz;
         return<==1 and RValue:=1;
         skip
     }
     else
     {
         skip
     }
     )
     }; 
  function dump_force ( FILE *where )
 {
     frame(dump_force_a,return) and ( 
     int return<==0 and skip;
     ATOM *dump_force_a and skip;
     dump_force_a:=first;
     if(dump_force_a=NULL) then 
     {
          return<==1 and skip
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         while( return=0 AND  (dump_force_a->next$!=dump_force_a))
         {
             if(dump_force_a->next$=NULL) then 
             {
                  return<==1 and skip
             }
             else 
             {
                  skip 
             };
             if(return=0)   then 
             {
                 fprintf(where,"force %d %f %f %f %f %f %f ;\n",dump_force_a->serial,dump_force_a->x,dump_force_a->y,dump_force_a->z,dump_force_a->fx,dump_force_a->fy,dump_force_a->fz,RValue) and skip;
                 dump_force_a:=dump_force_a->next$
             }
             else
             {
                 skip
             }
         };
         if(return=0)   then 
         {
             if(dump_force_a->next$=NULL) then 
             {
                  return<==1 and skip
             }
             else 
             {
                  skip 
             };
             if(return=0)   then 
             {
                 fprintf(where,"force %d %f %f %f %f %f %f ;\n",dump_force_a->serial,dump_force_a->x,dump_force_a->y,dump_force_a->z,dump_force_a->fx,dump_force_a->fy,dump_force_a->fz,RValue) and skip
             }
             else
             {
                 skip
             }
         }
         else
         {
             skip
         }
     }
     else
     {
         skip
     }
     )
     }; 
  function dump_pdb ( FILE *where,int res_mod )
 {
     frame(dump_pdb_a,dump_pdb_np,dump_pdb_resid,dump_pdb_atid,dump_pdb_i,dump_pdb_ires,dump_pdb_iatom,return,break$) and ( 
     int break$<==0 and skip;
     int return<==0 and skip;
     ATOM *dump_pdb_a and skip;
     char *dump_pdb_np,dump_pdb_resid[5],dump_pdb_atid[5] and skip;
     int dump_pdb_i,dump_pdb_ires,dump_pdb_iatom and skip;
     dump_pdb_a:=first;
     dump_pdb_iatom:=0;
     if(dump_pdb_a=NULL) then 
     {
          return<==1 and skip
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         if(res_mod=0) then 
         {
             aaerror(" need a non-zero residue modulus in dump_pdb\n",RValue);
              return<==1 and skip
             
         }
         else 
         {
              skip 
         };
         if(return=0)   then 
         {
             while( return=0 AND  (dump_pdb_a->next$!=dump_pdb_a))
             {
                 if(dump_pdb_a->next$=NULL) then 
                 {
                      return<==1 and skip
                 }
                 else 
                 {
                      skip 
                 };
                 if(return=0)   then 
                 {
                     dump_pdb_iatom:=dump_pdb_iatom+1;
                     dump_pdb_ires:=dump_pdb_a->serial/ res_mod;
                     dump_pdb_np:=dump_pdb_a->name;
                     while( return=0 AND  strcmp(dump_pdb_np,"sna.rkq")=0)
                     {
                         dump_pdb_a:=dump_pdb_a->next$;
                         if(dump_pdb_a->next$=NULL) then 
                         {
                              return<==1 and skip
                         }
                         else 
                         {
                              skip 
                         };
                         if(return=0)   then 
                         {
                             dump_pdb_ires:=dump_pdb_a->serial/ res_mod;
                             dump_pdb_np:=dump_pdb_a->name
                         }
                         else
                         {
                             skip
                         }
                     };
                     if(return=0)   then 
                     {
                         break$<==0 and skip;
                         dump_pdb_i:=0;
                         
                         while( break$=0 AND  dump_pdb_i<5)
                         {
                             if(* dump_pdb_np!='.') then 
                             {
                                 if(extern islower(* dump_pdb_np,RValue)) then 
                                 {
                                     dump_pdb_resid[dump_pdb_i]:=toupper(* dump_pdb_np,RValue)
                                 }
                                 else
                                 {
                                     dump_pdb_resid[dump_pdb_i]:=* dump_pdb_np
                                 }
                                 
                             }
                             else
                             {
                                 dump_pdb_resid[dump_pdb_i]:='\0';
                                 break$<==1 and skip
                              };
                             if(break$=0)   then 
                             {
                                 if(* dump_pdb_np='\0') then 
                                 {
                                     break$<==1 and skip
                                  }
                                 else 
                                 {
                                      skip 
                                 };
                                 if(break$=0)   then
                                 {
                                     dump_pdb_np:=dump_pdb_np+1;
                                     dump_pdb_i:=dump_pdb_i+1
                                 }
                                 else
                                 {
                                     skip
                                 }
                             }
                             else
                             {
                                 skip
                             }
                             
                         };
                         break$<==0 and skip;
                         if(* dump_pdb_np='.') then 
                         {
                             dump_pdb_np:=dump_pdb_np+1
                         }
                         else 
                         {
                              skip 
                         };
                         break$<==0 and skip;
                         dump_pdb_i:=0;
                         
                         while( break$=0 AND  dump_pdb_i<5)
                         {
                             if(* dump_pdb_np!='.') then 
                             {
                                 if(islower(* dump_pdb_np,RValue)) then 
                                 {
                                     dump_pdb_atid[dump_pdb_i]:=toupper(* dump_pdb_np,RValue)
                                 }
                                 else
                                 {
                                     dump_pdb_atid[dump_pdb_i]:=* dump_pdb_np
                                 }
                                 
                             }
                             else
                             {
                                 dump_pdb_atid[dump_pdb_i]:='\0';
                                 break$<==1 and skip
                              };
                             if(break$=0)   then 
                             {
                                 if(* dump_pdb_np='\0') then 
                                 {
                                     break$<==1 and skip
                                  }
                                 else 
                                 {
                                      skip 
                                 };
                                 if(break$=0)   then
                                 {
                                     dump_pdb_np:=dump_pdb_np+1;
                                     dump_pdb_i:=dump_pdb_i+1
                                 }
                                 else
                                 {
                                     skip
                                 }
                             }
                             else
                             {
                                 skip
                             }
                             
                         };
                         break$<==0 and skip;
                         if(dump_pdb_atid[0]='H') then 
                         {
                             fprintf(where,"ATOM  %5d %-4s%c%-3s  %4d    %8.3f%8.3f%8.3f%6.2f%6.2f\n",dump_pdb_iatom,dump_pdb_atid,' ',dump_pdb_resid,dump_pdb_ires,dump_pdb_a->x,dump_pdb_a->y,dump_pdb_a->z,1.0,10.0,RValue) and skip
                         }
                         else
                         {
                             fprintf(where,"ATOM  %5d  %-4s%-3s  %4d    %8.3f%8.3f%8.3f%6.2f%6.2f\n",dump_pdb_iatom,dump_pdb_atid,dump_pdb_resid,dump_pdb_ires,dump_pdb_a->x,dump_pdb_a->y,dump_pdb_a->z,1.0,10.0,RValue) and skip
                         };
                         dump_pdb_a:=dump_pdb_a->next$
                     }
                     else
                     {
                         skip
                     }
                 }
                 else
                 {
                     skip
                 }
             };
             if(return=0)   then 
             {
                 if(dump_pdb_a->next$=NULL) then 
                 {
                      return<==1 and skip
                 }
                 else 
                 {
                      skip 
                 };
                 if(return=0)   then 
                 {
                     dump_pdb_iatom:=dump_pdb_iatom+1;
                     dump_pdb_ires:=dump_pdb_a->serial/ res_mod;
                     dump_pdb_np:=dump_pdb_a->name;
                     if(strcmp(dump_pdb_np,"sna.rkq")!=0) then 
                     {
                         break$<==0 and skip;
                         dump_pdb_i:=0;
                         
                         while( break$=0 AND  dump_pdb_i<5)
                         {
                             if(* dump_pdb_np!='.') then 
                             {
                                 if(islower(* dump_pdb_np,RValue)) then 
                                 {
                                     dump_pdb_resid[dump_pdb_i]:=toupper(* dump_pdb_np,RValue)
                                 }
                                 else
                                 {
                                     dump_pdb_resid[dump_pdb_i]:=* dump_pdb_np
                                 }
                                 
                             }
                             else
                             {
                                 dump_pdb_resid[dump_pdb_i]:='\0';
                                 break$<==1 and skip
                              };
                             if(break$=0)   then 
                             {
                                 if(* dump_pdb_np='\0') then 
                                 {
                                     break$<==1 and skip
                                  }
                                 else 
                                 {
                                      skip 
                                 };
                                 if(break$=0)   then
                                 {
                                     dump_pdb_np:=dump_pdb_np+1;
                                     dump_pdb_i:=dump_pdb_i+1
                                 }
                                 else
                                 {
                                     skip
                                 }
                             }
                             else
                             {
                                 skip
                             }
                             
                         };
                         break$<==0 and skip;
                         if(* dump_pdb_np='.') then 
                         {
                             dump_pdb_np:=dump_pdb_np+1
                         }
                         else 
                         {
                              skip 
                         };
                         break$<==0 and skip;
                         dump_pdb_i:=0;
                         
                         while( break$=0 AND  dump_pdb_i<5)
                         {
                             if(* dump_pdb_np!='.') then 
                             {
                                 if(islower(* dump_pdb_np,RValue)) then 
                                 {
                                     dump_pdb_atid[dump_pdb_i]:=toupper(* dump_pdb_np,RValue)
                                 }
                                 else
                                 {
                                     dump_pdb_atid[dump_pdb_i]:=* dump_pdb_np
                                 }
                                 
                             }
                             else
                             {
                                 dump_pdb_atid[dump_pdb_i]:='\0';
                                 break$<==1 and skip
                              };
                             if(break$=0)   then 
                             {
                                 if(* dump_pdb_np='\0') then 
                                 {
                                     break$<==1 and skip
                                  }
                                 else 
                                 {
                                      skip 
                                 };
                                 if(break$=0)   then
                                 {
                                     dump_pdb_np:=dump_pdb_np+1;
                                     dump_pdb_i:=dump_pdb_i+1
                                 }
                                 else
                                 {
                                     skip
                                 }
                             }
                             else
                             {
                                 skip
                             }
                             
                         };
                         break$<==0 and skip;
                         if(dump_pdb_atid[0]='H') then 
                         {
                             fprintf(where,"ATOM  %5d %-4s%c%-3s  %4d    %8.3f%8.3f%8.3f%6.2f%6.2f\n",dump_pdb_iatom,dump_pdb_atid,' ',dump_pdb_resid,dump_pdb_ires,dump_pdb_a->x,dump_pdb_a->y,dump_pdb_a->z,1.0,10.0,RValue) and skip
                         }
                         else
                         {
                             fprintf(where,"ATOM  %5d  %-4s%-3s  %4d    %8.3f%8.3f%8.3f%6.2f%6.2f\n",dump_pdb_iatom,dump_pdb_atid,dump_pdb_resid,dump_pdb_ires,dump_pdb_a->x,dump_pdb_a->y,dump_pdb_a->z,1.0,10.0,RValue) and skip
                         }
                         
                     }
                     else 
                     {
                          skip 
                     };
                     fprintf(where,"END   \n",RValue) and skip
                 }
                 else
                 {
                     skip
                 }
             }
             else
             {
                 skip
             }
         }
         else
         {
             skip
         }
     }
     else
     {
         skip
     }
     )
     }; 
  function a_pr_beta ( float RValue )
 {
     frame(a_pr_beta_a,a_pr_beta_b,a_pr_beta_ap,return) and ( 
     int return<==0 and skip;
     float a_pr_beta_a,a_pr_beta_b and skip;
     ATOM *a_pr_beta_ap and skip;
     a_pr_beta_ap:=first;
     a_pr_beta_a:=0.0;
     a_pr_beta_b:=0.0;
     if(a_pr_beta_ap=NULL) then 
     {
         return<==1 and RValue:=a_pr_beta_a;
         skip
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         while( return=0 AND  1)
         {
             if(a_pr_beta_ap->next$=NULL) then 
             {
                 return<==1 and RValue:=0.0;
                 skip
             }
             else 
             {
                  skip 
             };
             if(return=0)   then 
             {
                 a_pr_beta_a:=a_pr_beta_a+a_pr_beta_ap->fx*a_pr_beta_ap->fx;
                 a_pr_beta_a:=a_pr_beta_a+a_pr_beta_ap->fy*a_pr_beta_ap->fy;
                 a_pr_beta_a:=a_pr_beta_a+a_pr_beta_ap->fz*a_pr_beta_ap->fz;
                 a_pr_beta_a:=a_pr_beta_a-a_pr_beta_ap->gx*a_pr_beta_ap->fx;
                 a_pr_beta_a:=a_pr_beta_a-a_pr_beta_ap->gy*a_pr_beta_ap->fy;
                 a_pr_beta_a:=a_pr_beta_a-a_pr_beta_ap->gz*a_pr_beta_ap->fz;
                 a_pr_beta_b:=a_pr_beta_b+a_pr_beta_ap->gx*a_pr_beta_ap->gx;
                 a_pr_beta_b:=a_pr_beta_b+a_pr_beta_ap->gy*a_pr_beta_ap->gy;
                 a_pr_beta_b:=a_pr_beta_b+a_pr_beta_ap->gz*a_pr_beta_ap->gz;
                 if(a_pr_beta_ap=a_pr_beta_ap->next$) then 
                 {
                     if(a_pr_beta_b<=1.e-5) then 
                     {
                         a_pr_beta_a:=0.0;
                         a_pr_beta_b:=1.0
                         
                     }
                     else 
                     {
                          skip 
                     };
                     return<==1 and RValue:=a_pr_beta_a/ a_pr_beta_b;
                     skip
                     
                 }
                 else 
                 {
                      skip 
                 };
                 if(return=0)   then 
                 {
                     a_pr_beta_ap:=a_pr_beta_ap->next$
                 }
                 else
                 {
                     skip
                 }
             }
             else
             {
                 skip
             }
         }
     }
     else
     {
         skip
     }
     )
     }; 
  function inactivate_non_zero ( int i1,int i2,int RValue )
 {
     frame(inactivate_non_zero_upper,inactivate_non_zero_lower,inactivate_non_zero_ap,inactivate_non_zero_i,inactivate_non_zero_numatm,inactivate_non_zero_a_number,return) and ( 
     int return<==0 and skip;
     int inactivate_non_zero_upper,inactivate_non_zero_lower and skip;
     ATOM *inactivate_non_zero_ap and skip;
     int inactivate_non_zero_i,inactivate_non_zero_numatm,inactivate_non_zero_a_number and skip;
     if(i2=0) then 
     {
         inactivate_non_zero_ap:=a_m_serial(i1,RValue);
         if(inactivate_non_zero_ap!=NULL) then 
         {
             inactivate_non_zero_ap->active:=0
         }
         else 
         {
              skip 
         };
         return<==1 and RValue:=0;
         skip
         
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         inactivate_non_zero_upper:=i2;
         inactivate_non_zero_lower:=i1;
         if(i2<i1) then 
         {
             inactivate_non_zero_lower:=i2;
             inactivate_non_zero_upper:=i1
             
         }
         else 
         {
              skip 
         };
         //inactivate_non_zero_numatm:=inactivate_non_zero_a_number(RValue);
		 inactivate_non_zero_numatm:=a_number(RValue);
         inactivate_non_zero_i:=0;
         
         while(inactivate_non_zero_i<inactivate_non_zero_numatm)
         {
             inactivate_non_zero_ap:=a_next(inactivate_non_zero_i,RValue);
             if(inactivate_non_zero_ap->serial>=inactivate_non_zero_lower AND inactivate_non_zero_ap->serial<=inactivate_non_zero_upper) then 
             {
                 if(inactivate_non_zero_ap->x!=0.0 AND inactivate_non_zero_ap->y!=0.0 AND inactivate_non_zero_ap->z!=0.0) then 
                 {
                     inactivate_non_zero_ap->active:=0
                 }
                 else 
                 {
                      skip 
                 }
             }
             else 
             {
                  skip 
             };
             inactivate_non_zero_i:=inactivate_non_zero_i+1
             
         };
         return<==1 and RValue:=0;
         skip
     }
     else
     {
         skip
     }
     )
     }; 
  function inactivate ( int i1,int i2,int RValue )
 {
     frame(inactivate_upper,inactivate_lower,inactivate_ap,inactivate_i,inactivate_numatm,return) and ( 
     int return<==0 and skip;
     int inactivate_upper,inactivate_lower and skip;
     ATOM *inactivate_ap and skip;
     int inactivate_i,inactivate_numatm and skip;
     if(i2=0) then 
     {
         inactivate_ap:=a_m_serial(i1,RValue);
         if(inactivate_ap!=NULL) then 
         {
             inactivate_ap->active:=0
         }
         else 
         {
              skip 
         };
         return<==1 and RValue:=0;
         skip
         
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         inactivate_upper:=i2;
         inactivate_lower:=i1;
         if(i2<i1) then 
         {
             inactivate_lower:=i2;
             inactivate_upper:=i1
             
         }
         else 
         {
              skip 
         };
         inactivate_numatm:=a_number(RValue);
         inactivate_i:=0;
         
         while(inactivate_i<inactivate_numatm)
         {
             inactivate_ap:=a_next(inactivate_i,RValue);
             if(inactivate_ap->serial>=inactivate_lower AND inactivate_ap->serial<=inactivate_upper) then 
             {
                 inactivate_ap->active:=0
             }
             else 
             {
                  skip 
             };
             inactivate_i:=inactivate_i+1
             
         };
         return<==1 and RValue:=0;
         skip
     }
     else
     {
         skip
     }
     )
     }; 
  function activate ( int i1,int i2,int RValue )
 {
     frame(activate_upper,activate_lower,activate_ap,activate_i,activate_numatm,return) and ( 
     int return<==0 and skip;
     int activate_upper,activate_lower and skip;
     ATOM *activate_ap and skip;
     int activate_i,activate_numatm and skip;
     if(i2=0) then 
     {
         activate_ap:=a_m_serial(i1,RValue);
         if(activate_ap!=NULL) then 
         {
             activate_ap->active:=1
         }
         else 
         {
              skip 
         };
         return<==1 and RValue:=0;
         skip
         
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         activate_upper:=i2;
         activate_lower:=i1;
         if(i2<i1) then 
         {
             activate_lower:=i2;
             activate_upper:=i1
             
         }
         else 
         {
              skip 
         };
         activate_numatm:=a_number(RValue);
         activate_i:=0;
         
         while(activate_i<activate_numatm)
         {
             activate_ap:=a_next(activate_i,RValue);
             if(activate_ap->serial>=activate_lower AND activate_ap->serial<=activate_upper) then 
             {
                 activate_ap->active:=1
             }
             else 
             {
                  skip 
             };
             activate_i:=activate_i+1
             
         };
         return<==1 and RValue:=0;
         skip
     }
     else
     {
         skip
     }
     )
     }; 
  function a_inactive_f_zero ()
 {
     frame(a_inactive_f_zero_i,a_inactive_f_zero_numatom,a_inactive_f_zero_ap) and ( 
     int a_inactive_f_zero_i,a_inactive_f_zero_numatom and skip;
     ATOM *a_inactive_f_zero_ap and skip;
     a_inactive_f_zero_numatom:=a_number(RValue);
     a_inactive_f_zero_i:=0;
     
     while(a_inactive_f_zero_i<a_inactive_f_zero_numatom)
     {
         a_inactive_f_zero_ap:=a_next(a_inactive_f_zero_i,RValue);
         if(a_inactive_f_zero_ap->active=0) then 
         {
             a_inactive_f_zero_ap->fx:=0.0;
             a_inactive_f_zero_ap->fy:=0.0;
             a_inactive_f_zero_ap->fz:=0.0
             
         }
         else 
         {
              skip 
         };
         a_inactive_f_zero_i:=a_inactive_f_zero_i+1
         
     }
     )
     }; 
      struct BOND {
     ATOM *atom1,*atom2 and 
     float length,k and 
     float dlength,dk and 
     int ndiff and 
     void *next$ 
 };
 BOND *bond_first<==NULL and skip;
 BOND *bond_last<==NULL and skip;
 function bond ( int p1,int p2,float bl,float fk,int RValue )
 {
     frame(bond_ap1,bond_ap2,bond_new,bond_i,bond_line,bond_5_gotoexcluded1,return) and ( 
     int return<==0 and skip;
     ATOM *bond_ap1,*bond_ap2 and skip;
     BOND *bond_new and skip;
     int bond_i and skip;
     char bond_line[80] and skip;
     bond_ap1:=a_m_serial(p1,RValue);
     bond_ap2:=a_m_serial(p2,RValue);
     if((bond_ap1=NULL) OR (bond_ap2=NULL)) then 
     {
         sprintf(bond_line,"undefined atom in bond %d %d \0",p1,p2,RValue) and skip;
         aaerror(bond_line,RValue);
         return<==1 and RValue:=0;
         skip
         
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         bond_new:=malloc(sizeof(BOND)) ;
         if((bond_new)=NULL) then 
         {
             return<==1 and RValue:=0;
             skip
             
         }
         else 
         {
              skip 
         };
         if(return=0)   then 
         {
             if(bond_first=NULL) then 
             {
                 bond_first:=bond_new
             }
             else 
             {
                  skip 
             };
             if(bond_last=NULL) then 
             {
                 bond_last:=bond_new
             }
             else 
             {
                  skip 
             };
             bond_new->atom1:=bond_ap1;
             bond_new->atom2:=bond_ap2;
             bond_new->length:=bl;
             bond_new->k:=fk;
             bond_new->next$:=bond_new;
             if(bond_ap1->dontuse<32) then 
             {
                 int bond_5_gotoexcluded1<==0 and skip;
                 bond_i:=0;
                 
                 while( return=0 AND  bond_i<bond_ap1->dontuse)
                 {
                     if(bond_ap1->excluded[bond_i]=bond_ap2) then 
                     {
                         bond_5_gotoexcluded1:=1;
                         if(bond_ap2->dontuse<32) then 
                         {
                             bond_i:=0;
                             
                             while( return=0 AND  bond_i<bond_ap2->dontuse)
                             {
                                 if(bond_ap2->excluded[bond_i]=bond_ap1) then 
                                 {
                                     bond_last->next$:=bond_new;
                                     bond_last:=bond_new;
                                     return<==1 and RValue:=1;
                                     skip
                                     
                                 }
                                 else 
                                 {
                                      skip 
                                 };
                                 if(return=0)   then 
                                 {
                                     bond_i:=bond_i+1
                                 }
                                 else
                                 {
                                     skip
                                 }
                                 
                             };
                             if(return=0)   then 
                             {
                                 bond_ap2->excluded[bond_ap2->dontuse]:=bond_ap1;
                                 (bond_ap2->dontuse):=(bond_ap2->dontuse)+1
                             }
                             else
                             {
                                 aaerror(" too many bonds to an atom increase NEXCLUDE in ammp.h",RValue);
                                 exit(0) and skip 
                             }
                         }
                         else
                         {
                             skip
                         }
                         
                     }
                     else 
                     {
                          skip 
                     };
                     if(return=0)  then
                     {
                         bond_i:=bond_i+1
                     }
                     else
                     {
                         skip
                     }
                     
                 };
                 if(return=0)   then 
                 {
                     if(!bond_5_gotoexcluded1) then 
                     {
                         bond_ap1->excluded[bond_ap1->dontuse]:=bond_ap2;
                         (bond_ap1->dontuse):=(bond_ap1->dontuse)+1
                         
                     }
                     else 
                     {
                          skip 
                     }
                 }
                 else
                 {
                     skip
                 }
                 
             }
             else
             {
                 aaerror(" too many bonds to an atom increase NEXCLUDE in ammp.h",RValue);
                 exit(0) and skip 
             };
             if(return=0)  then
             {
                 if(bond_ap2->dontuse<32) then 
                 {
                     bond_i:=0;
                     
                     while( return=0 AND  bond_i<bond_ap2->dontuse)
                     {
                         if(bond_ap2->excluded[bond_i]=bond_ap1) then 
                         {
                             bond_last->next$:=bond_new;
                             bond_last:=bond_new;
                             return<==1 and RValue:=1;
                             skip
                             
                         }
                         else 
                         {
                              skip 
                         };
                         if(return=0)   then 
                         {
                             bond_i:=bond_i+1
                         }
                         else
                         {
                             skip
                         }
                         
                     };
                     if(return=0)   then 
                     {
                         bond_ap2->excluded[bond_ap2->dontuse]:=bond_ap1;
                         (bond_ap2->dontuse):=(bond_ap2->dontuse)+1
                     }
                     else
                     {
                         skip
                     }
                     
                 }
                 else
                 {
                     aaerror(" too many bonds to an atom increase NEXCLUDE in ammp.h",RValue);
                     exit(0) and skip 
                 };
                 if(return=0)  then
                 {
                     bond_last->next$:=bond_new;
                     bond_last:=bond_new;
                     return<==1 and RValue:=1;
                     skip
                 }
                 else
                 {
                     skip
                 }
             }
             else
             {
                 skip
             }
         }
         else
         {
             skip
         }
     }
     else
     {
         skip
     }
     )
     }; 
  function v_bond ( float *V,float lambda,int RValue )
 {
     frame(v_bond_bp,v_bond_r,v_bond_xt,v_bond_yt,v_bond_zt,v_bond_a1,v_bond_a2,return) and ( 
     int return<==0 and skip;
     BOND *v_bond_bp and skip;
     float v_bond_r,v_bond_xt,v_bond_yt,v_bond_zt and skip;
     ATOM *v_bond_a1,*v_bond_a2 and skip;
     v_bond_bp:=bond_first;
     if(v_bond_bp=NULL) then 
     {
         return<==1 and RValue:=1;
         skip
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         while( return=0 AND  1)
         {
             if(v_bond_bp=NULL) then 
             {
                 return<==1 and RValue:=0;
                 skip
             }
             else 
             {
                  skip 
             };
             if(return=0)   then 
             {
                 v_bond_a1:=v_bond_bp->atom1;
                 v_bond_a2:=v_bond_bp->atom2;
                 if(v_bond_a1->active OR v_bond_a2->active) then 
                 {
                     if(lambda=0.0) then 
                     {
                         v_bond_r:=(v_bond_a1->x-v_bond_a2->x)*(v_bond_a1->x-v_bond_a2->x);
                         v_bond_r:=v_bond_r+(v_bond_a1->y-v_bond_a2->y)*(v_bond_a1->y-v_bond_a2->y);
                         v_bond_r:=v_bond_r+(v_bond_a1->z-v_bond_a2->z)*(v_bond_a1->z-v_bond_a2->z)
                         
                     }
                     else
                     {
                         v_bond_xt:=(v_bond_a1->x-v_bond_a2->x+lambda*(v_bond_a1->dx-v_bond_a2->dx));
                         v_bond_yt:=(v_bond_a1->y-v_bond_a2->y+lambda*(v_bond_a1->dy-v_bond_a2->dy));
                         v_bond_zt:=(v_bond_a1->z-v_bond_a2->z+lambda*(v_bond_a1->dz-v_bond_a2->dz));
                         v_bond_r:=v_bond_xt*v_bond_xt+v_bond_yt*v_bond_yt+v_bond_zt*v_bond_zt
                     };
                     v_bond_r:=sqrt(v_bond_r);
                     * V:=* V+v_bond_bp->k*(v_bond_r-v_bond_bp->length)*(v_bond_r-v_bond_bp->length)
                     
                 }
                 else 
                 {
                      skip 
                 };
                 if(v_bond_bp=v_bond_bp->next$) then 
                 {
                     return<==1 and RValue:=1;
                     skip
                 }
                 else 
                 {
                      skip 
                 };
                 if(return=0)   then 
                 {
                     v_bond_bp:=v_bond_bp->next$
                 }
                 else
                 {
                     skip
                 }
             }
             else
             {
                 skip
             }
         }
     }
     else
     {
         skip
     }
     )
     }; 
  function f_bond ( float lambda,int RValue )
 {
     frame(f_bond_bp,f_bond_r,f_bond_k,f_bond_ux,f_bond_uy,f_bond_uz,f_bond_a1,f_bond_a2,return) and ( 
     int return<==0 and skip;
     BOND *f_bond_bp and skip;
     float f_bond_r,f_bond_k,f_bond_ux,f_bond_uy,f_bond_uz and skip;
     ATOM *f_bond_a1,*f_bond_a2 and skip;
     f_bond_bp:=bond_first;
     if(f_bond_bp=NULL) then 
     {
         return<==1 and RValue:=1;
         skip
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         while( return=0 AND  1)
         {
             if(f_bond_bp=NULL) then 
             {
                 return<==1 and RValue:=0;
                 skip
             }
             else 
             {
                  skip 
             };
             if(return=0)   then 
             {
                 f_bond_k:=f_bond_bp->k;
                 f_bond_a1:=f_bond_bp->atom1;
                 f_bond_a2:=f_bond_bp->atom2;
                 if(f_bond_a1->active OR f_bond_a2->active) then 
                 {
                     if(lambda=0.0) then 
                     {
                         f_bond_ux:=(f_bond_a2->x-f_bond_a1->x);
                         f_bond_uy:=(f_bond_a2->y-f_bond_a1->y);
                         f_bond_uz:=(f_bond_a2->z-f_bond_a1->z)
                         
                     }
                     else
                     {
                         f_bond_ux:=(f_bond_a2->x-f_bond_a1->x+lambda*(f_bond_a2->dx-f_bond_a1->dx));
                         f_bond_uy:=(f_bond_a2->y-f_bond_a1->y+lambda*(f_bond_a2->dy-f_bond_a1->dy));
                         f_bond_uz:=(f_bond_a2->z-f_bond_a1->z+lambda*(f_bond_a2->dz-f_bond_a1->dz))
                     };
                     f_bond_r:=f_bond_ux*f_bond_ux+f_bond_uy*f_bond_uy+f_bond_uz*f_bond_uz;
                     if(f_bond_r<=1.e-15) then 
                     {
                         f_bond_r:=0;
                         f_bond_ux:=1.0;
                         f_bond_uy:=0.0;
                         f_bond_uz:=0.0
                         
                     }
                     else
                     {
                         f_bond_r:=sqrt(f_bond_r);
                         f_bond_ux:=f_bond_ux/ f_bond_r;
                         f_bond_uy:=f_bond_uy/ f_bond_r;
                         f_bond_uz:=f_bond_uz/ f_bond_r
                     };
                     f_bond_ux:=2*f_bond_k*(f_bond_r-f_bond_bp->length)*f_bond_ux;
                     f_bond_uy:=2*f_bond_k*(f_bond_r-f_bond_bp->length)*f_bond_uy;
                     f_bond_uz:=2*f_bond_k*(f_bond_r-f_bond_bp->length)*f_bond_uz;
                     if(f_bond_a1->active) then 
                     {
                         f_bond_a1->fx:=f_bond_a1->fx+f_bond_ux;
                         f_bond_a1->fy:=f_bond_a1->fy+f_bond_uy;
                         f_bond_a1->fz:=f_bond_a1->fz+f_bond_uz
                         
                     }
                     else 
                     {
                          skip 
                     };
                     if(f_bond_a2->active) then 
                     {
                         f_bond_a2->fx:=f_bond_a2->fx-f_bond_ux;
                         f_bond_a2->fy:=f_bond_a2->fy-f_bond_uy;
                         f_bond_a2->fz:=f_bond_a2->fz-f_bond_uz
                         
                     }
                     else 
                     {
                          skip 
                     }
                     
                 }
                 else 
                 {
                      skip 
                 };
                 if(f_bond_bp=f_bond_bp->next$) then 
                 {
                     return<==1 and RValue:=1;
                     skip
                 }
                 else 
                 {
                      skip 
                 };
                 if(return=0)   then 
                 {
                     f_bond_bp:=f_bond_bp->next$
                 }
                 else
                 {
                     skip
                 }
             }
             else
             {
                 skip
             }
         }
     }
     else
     {
         skip
     }
     )
     }; 
  function get_bond ( ATOM *a1,ATOM **bonded,int mbond,int *inbond )
 {
     frame(get_bond_mine,return) and ( 
     int return<==0 and skip;
     BOND *get_bond_mine and skip;
     get_bond_mine:=bond_first;
     * inbond:=0;
     while( return=0 AND  1)
     {
         if((get_bond_mine=NULL)) then 
         {
              return<==1 and skip
             
         }
         else 
         {
              skip 
         };
         if(return=0)   then 
         {
             if(get_bond_mine->atom1=a1) then 
             {
                 bonded[(* inbond)]:=get_bond_mine->atom2;
                 (* inbond):=(* inbond)+1
                 
             }
             else 
             {
                  skip 
             };
             if(get_bond_mine->atom2=a1) then 
             {
                 bonded[(* inbond)]:=get_bond_mine->atom1;
                 (* inbond):=(* inbond)+1
                 
             }
             else 
             {
                  skip 
             };
             if(get_bond_mine=get_bond_mine->next$) then 
             {
                  return<==1 and skip
             }
             else 
             {
                  skip 
             };
             if(return=0)   then 
             {
                 get_bond_mine:=get_bond_mine->next$;
                 if(* inbond=mbond) then 
                 {
                      return<==1 and skip
                 }
                 else 
                 {
                      skip 
                 }
             }
             else
             {
                 skip
             }
         }
         else
         {
             skip
         }
     }
     )
     }; 
  function dump_bonds ( FILE *where )
 {
     frame(dump_bonds_b,dump_bonds_a1,dump_bonds_a2,return) and ( 
     int return<==0 and skip;
     BOND *dump_bonds_b and skip;
     ATOM *dump_bonds_a1,*dump_bonds_a2 and skip;
     dump_bonds_b:=bond_first;
     if(dump_bonds_b=NULL) then 
     {
          return<==1 and skip
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         while( return=0 AND  (dump_bonds_b->next$!=dump_bonds_b))
         {
             if(dump_bonds_b->next$=NULL) then 
             {
                  return<==1 and skip
             }
             else 
             {
                  skip 
             };
             if(return=0)   then 
             {
                 dump_bonds_a1:=dump_bonds_b->atom1;
                 dump_bonds_a2:=dump_bonds_b->atom2;
                 fprintf(where,"bond %d %d %f %f ;\n",dump_bonds_a1->serial,dump_bonds_a2->serial,dump_bonds_b->length,dump_bonds_b->k,RValue) and skip;
                 dump_bonds_b:=dump_bonds_b->next$
             }
             else
             {
                 skip
             }
         };
         if(return=0)   then 
         {
             if(dump_bonds_b->next$=NULL) then 
             {
                  return<==1 and skip
             }
             else 
             {
                  skip 
             };
             if(return=0)   then 
             {
                 dump_bonds_a1:=dump_bonds_b->atom1;
                 dump_bonds_a2:=dump_bonds_b->atom2;
                 fprintf(where,"bond %d %d %f %f ;\n",dump_bonds_a1->serial,dump_bonds_a2->serial,dump_bonds_b->length,dump_bonds_b->k,RValue) and skip
             }
             else
             {
                 skip
             }
         }
         else
         {
             skip
         }
     }
     else
     {
         skip
     }
     )
     }; 
  function v_mmbond ( float *V,float lambda,int RValue )
 {
     frame(v_mmbond_bp,v_mmbond_r,v_mmbond_xt,v_mmbond_yt,v_mmbond_zt,v_mmbond_a1,v_mmbond_a2,return) and ( 
     int return<==0 and skip;
     BOND *v_mmbond_bp and skip;
     float v_mmbond_r,v_mmbond_xt,v_mmbond_yt,v_mmbond_zt and skip;
     ATOM *v_mmbond_a1,*v_mmbond_a2 and skip;
     v_mmbond_bp:=bond_first;
     if(v_mmbond_bp=NULL) then 
     {
         return<==1 and RValue:=1;
         skip
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         while( return=0 AND  1)
         {
             if(v_mmbond_bp=NULL) then 
             {
                 return<==1 and RValue:=0;
                 skip
             }
             else 
             {
                  skip 
             };
             if(return=0)   then 
             {
                 v_mmbond_a1:=v_mmbond_bp->atom1;
                 v_mmbond_a2:=v_mmbond_bp->atom2;
                 if(v_mmbond_a1->active OR v_mmbond_a2->active) then 
                 {
                     if(lambda=0.0) then 
                     {
                         v_mmbond_r:=(v_mmbond_a1->x-v_mmbond_a2->x)*(v_mmbond_a1->x-v_mmbond_a2->x);
                         v_mmbond_r:=v_mmbond_r+(v_mmbond_a1->y-v_mmbond_a2->y)*(v_mmbond_a1->y-v_mmbond_a2->y);
                         v_mmbond_r:=v_mmbond_r+(v_mmbond_a1->z-v_mmbond_a2->z)*(v_mmbond_a1->z-v_mmbond_a2->z)
                         
                     }
                     else
                     {
                         v_mmbond_xt:=(v_mmbond_a1->x-v_mmbond_a2->x+lambda*(v_mmbond_a1->dx-v_mmbond_a2->dx));
                         v_mmbond_yt:=(v_mmbond_a1->y-v_mmbond_a2->y+lambda*(v_mmbond_a1->dy-v_mmbond_a2->dy));
                         v_mmbond_zt:=(v_mmbond_a1->z-v_mmbond_a2->z+lambda*(v_mmbond_a1->dz-v_mmbond_a2->dz));
                         v_mmbond_r:=v_mmbond_xt*v_mmbond_xt+v_mmbond_yt*v_mmbond_yt+v_mmbond_zt*v_mmbond_zt
                     };
                     v_mmbond_r:=sqrt(v_mmbond_r);
                     v_mmbond_r:=v_mmbond_r-v_mmbond_bp->length;
                     * V:=* V+v_mmbond_bp->k*v_mmbond_r*v_mmbond_r*(1.0-2.55*v_mmbond_r+7.0*2.55/ 12*v_mmbond_r*v_mmbond_r)
                     
                 }
                 else 
                 {
                      skip 
                 };
                 if(v_mmbond_bp=v_mmbond_bp->next$) then 
                 {
                     return<==1 and RValue:=1;
                     skip
                 }
                 else 
                 {
                      skip 
                 };
                 if(return=0)   then 
                 {
                     v_mmbond_bp:=v_mmbond_bp->next$
                 }
                 else
                 {
                     skip
                 }
             }
             else
             {
                 skip
             }
         }
     }
     else
     {
         skip
     }
     )
     }; 
  function f_mmbond ( float lambda,int RValue )
 {
     frame(f_mmbond_bp,f_mmbond_r,f_mmbond_k,f_mmbond_ux,f_mmbond_uy,f_mmbond_uz,f_mmbond_a1,f_mmbond_a2,return) and ( 
     int return<==0 and skip;
     BOND *f_mmbond_bp and skip;
     float f_mmbond_r,f_mmbond_k,f_mmbond_ux,f_mmbond_uy,f_mmbond_uz and skip;
     ATOM *f_mmbond_a1,*f_mmbond_a2 and skip;
     f_mmbond_bp:=bond_first;
     if(f_mmbond_bp=NULL) then 
     {
         return<==1 and RValue:=1;
         skip
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         while( return=0 AND  1)
         {
             if(f_mmbond_bp=NULL) then 
             {
                 return<==1 and RValue:=0;
                 skip
             }
             else 
             {
                  skip 
             };
             if(return=0)   then 
             {
                 f_mmbond_k:=f_mmbond_bp->k;
                 f_mmbond_a1:=f_mmbond_bp->atom1;
                 f_mmbond_a2:=f_mmbond_bp->atom2;
                 if(f_mmbond_a1->active OR f_mmbond_a2->active) then 
                 {
                     if(lambda=0.0) then 
                     {
                         f_mmbond_ux:=(f_mmbond_a2->x-f_mmbond_a1->x);
                         f_mmbond_uy:=(f_mmbond_a2->y-f_mmbond_a1->y);
                         f_mmbond_uz:=(f_mmbond_a2->z-f_mmbond_a1->z)
                         
                     }
                     else
                     {
                         f_mmbond_ux:=(f_mmbond_a2->x-f_mmbond_a1->x+lambda*(f_mmbond_a2->dx-f_mmbond_a1->dx));
                         f_mmbond_uy:=(f_mmbond_a2->y-f_mmbond_a1->y+lambda*(f_mmbond_a2->dy-f_mmbond_a1->dy));
                         f_mmbond_uz:=(f_mmbond_a2->z-f_mmbond_a1->z+lambda*(f_mmbond_a2->dz-f_mmbond_a1->dz))
                     };
                     f_mmbond_r:=f_mmbond_ux*f_mmbond_ux+f_mmbond_uy*f_mmbond_uy+f_mmbond_uz*f_mmbond_uz;
                     if(f_mmbond_r<=1.e-5) then 
                     {
                         f_mmbond_r:=0;
                         f_mmbond_ux:=1.0;
                         f_mmbond_uy:=0.0;
                         f_mmbond_uz:=0.0
                         
                     }
                     else
                     {
                         f_mmbond_r:=sqrt(f_mmbond_r);
                         f_mmbond_ux:=f_mmbond_ux/ f_mmbond_r;
                         f_mmbond_uy:=f_mmbond_uy/ f_mmbond_r;
                         f_mmbond_uz:=f_mmbond_uz/ f_mmbond_r
                     };
                     f_mmbond_r:=f_mmbond_r-f_mmbond_bp->length;
                     f_mmbond_ux:=f_mmbond_k*f_mmbond_r*(2.0-3*2.55*f_mmbond_r+4*7*2.55*f_mmbond_r*f_mmbond_r/ 12)*f_mmbond_ux;
                     f_mmbond_uy:=f_mmbond_k*f_mmbond_r*(2.0-3*2.55*f_mmbond_r+4*7*2.55*f_mmbond_r*f_mmbond_r/ 12)*f_mmbond_uy;
                     f_mmbond_uz:=f_mmbond_k*f_mmbond_r*(2.0-3*2.55*f_mmbond_r+4*7*2.55*f_mmbond_r*f_mmbond_r/ 12)*f_mmbond_uz;
                     if(f_mmbond_a1->active) then 
                     {
                         f_mmbond_a1->fx:=f_mmbond_a1->fx+f_mmbond_ux;
                         f_mmbond_a1->fy:=f_mmbond_a1->fy+f_mmbond_uy;
                         f_mmbond_a1->fz:=f_mmbond_a1->fz+f_mmbond_uz
                         
                     }
                     else 
                     {
                          skip 
                     };
                     if(f_mmbond_a2->active) then 
                     {
                         f_mmbond_a2->fx:=f_mmbond_a2->fx-f_mmbond_ux;
                         f_mmbond_a2->fy:=f_mmbond_a2->fy-f_mmbond_uy;
                         f_mmbond_a2->fz:=f_mmbond_a2->fz-f_mmbond_uz
                         
                     }
                     else 
                     {
                          skip 
                     }
                     
                 }
                 else 
                 {
                      skip 
                 };
                 if(f_mmbond_bp=f_mmbond_bp->next$) then 
                 {
                     return<==1 and RValue:=1;
                     skip
                 }
                 else 
                 {
                      skip 
                 };
                 if(return=0)   then 
                 {
                     f_mmbond_bp:=f_mmbond_bp->next$
                 }
                 else
                 {
                     skip
                 }
             }
             else
             {
                 skip
             }
         }
     }
     else
     {
         skip
     }
     )
     }; 
  function a_bond ( float *V,float lambda,int ilow,int ihigh,FILE *op,int RValue )
 {
     frame(a_bond_bp,a_bond_r,a_bond_xt,a_bond_yt,a_bond_zt,a_bond_a1,a_bond_a2,return) and ( 
     int return<==0 and skip;
     BOND *a_bond_bp and skip;
     float a_bond_r,a_bond_xt,a_bond_yt,a_bond_zt and skip;
     ATOM *a_bond_a1,*a_bond_a2 and skip;
     a_bond_bp:=bond_first;
     if(a_bond_bp=NULL) then 
     {
         return<==1 and RValue:=1;
         skip
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         while( return=0 AND  1)
         {
             if(a_bond_bp=NULL) then 
             {
                 return<==1 and RValue:=0;
                 skip
             }
             else 
             {
                  skip 
             };
             if(return=0)   then 
             {
                 a_bond_a1:=a_bond_bp->atom1;
                 a_bond_a2:=a_bond_bp->atom2;
                 if(a_bond_a1->active OR a_bond_a2->active) then 
                 {
                     if((a_bond_a1->serial>=ilow AND a_bond_a1->serial<=ihigh) OR (a_bond_a2->serial>=ilow AND a_bond_a2->serial<=ihigh)) then 
                     {
                         if(lambda=0.0) then 
                         {
                             a_bond_r:=(a_bond_a1->x-a_bond_a2->x)*(a_bond_a1->x-a_bond_a2->x);
                             a_bond_r:=a_bond_r+(a_bond_a1->y-a_bond_a2->y)*(a_bond_a1->y-a_bond_a2->y);
                             a_bond_r:=a_bond_r+(a_bond_a1->z-a_bond_a2->z)*(a_bond_a1->z-a_bond_a2->z)
                             
                         }
                         else
                         {
                             a_bond_xt:=(a_bond_a1->x-a_bond_a2->x+lambda*(a_bond_a1->dx-a_bond_a2->dx));
                             a_bond_yt:=(a_bond_a1->y-a_bond_a2->y+lambda*(a_bond_a1->dy-a_bond_a2->dy));
                             a_bond_zt:=(a_bond_a1->z-a_bond_a2->z+lambda*(a_bond_a1->dz-a_bond_a2->dz));
                             a_bond_r:=a_bond_xt*a_bond_xt+a_bond_yt*a_bond_yt+a_bond_zt*a_bond_zt
                         };
                         a_bond_r:=sqrt(a_bond_r);
                         a_bond_zt:=a_bond_bp->k*(a_bond_r-a_bond_bp->length)*(a_bond_r-a_bond_bp->length);
                         * V:=* V+a_bond_zt;
                         fprintf(op,"Bond %s %d %s %d E %f value %f error %f\n",a_bond_a1->name,a_bond_a1->serial,a_bond_a2->name,a_bond_a2->serial,a_bond_zt,a_bond_r,a_bond_r-a_bond_bp->length,RValue) and skip
                         
                     }
                     else 
                     {
                          skip 
                     }
                 }
                 else 
                 {
                      skip 
                 };
                 if(a_bond_bp=a_bond_bp->next$) then 
                 {
                     return<==1 and RValue:=1;
                     skip
                 }
                 else 
                 {
                      skip 
                 };
                 if(return=0)   then 
                 {
                     a_bond_bp:=a_bond_bp->next$
                 }
                 else
                 {
                     skip
                 }
             }
             else
             {
                 skip
             }
         }
     }
     else
     {
         skip
     }
     )
     }; 
  function a_mmbond ( float *V,float lambda,int ilow,int ihigh,FILE *op,int RValue )
 {
     frame(a_mmbond_bp,a_mmbond_r,a_mmbond_xt,a_mmbond_yt,a_mmbond_zt,a_mmbond_a1,a_mmbond_a2,return) and ( 
     int return<==0 and skip;
     BOND *a_mmbond_bp and skip;
     float a_mmbond_r,a_mmbond_xt,a_mmbond_yt,a_mmbond_zt and skip;
     ATOM *a_mmbond_a1,*a_mmbond_a2 and skip;
     a_mmbond_bp:=bond_first;
     if(a_mmbond_bp=NULL) then 
     {
         return<==1 and RValue:=1;
         skip
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         while( return=0 AND  1)
         {
             if(a_mmbond_bp=NULL) then 
             {
                 return<==1 and RValue:=0;
                 skip
             }
             else 
             {
                  skip 
             };
             if(return=0)   then 
             {
                 a_mmbond_a1:=a_mmbond_bp->atom1;
                 a_mmbond_a2:=a_mmbond_bp->atom2;
                 if((a_mmbond_a1->serial>=ilow AND a_mmbond_a1->serial<=ihigh) OR (a_mmbond_a2->serial>=ilow AND a_mmbond_a2->serial<=ihigh)) then 
                 {
                     if(lambda=0.0) then 
                     {
                         a_mmbond_r:=(a_mmbond_a1->x-a_mmbond_a2->x)*(a_mmbond_a1->x-a_mmbond_a2->x);
                         a_mmbond_r:=a_mmbond_r+(a_mmbond_a1->y-a_mmbond_a2->y)*(a_mmbond_a1->y-a_mmbond_a2->y);
                         a_mmbond_r:=a_mmbond_r+(a_mmbond_a1->z-a_mmbond_a2->z)*(a_mmbond_a1->z-a_mmbond_a2->z)
                         
                     }
                     else
                     {
                         a_mmbond_xt:=(a_mmbond_a1->x-a_mmbond_a2->x+lambda*(a_mmbond_a1->dx-a_mmbond_a2->dx));
                         a_mmbond_yt:=(a_mmbond_a1->y-a_mmbond_a2->y+lambda*(a_mmbond_a1->dy-a_mmbond_a2->dy));
                         a_mmbond_zt:=(a_mmbond_a1->z-a_mmbond_a2->z+lambda*(a_mmbond_a1->dz-a_mmbond_a2->dz));
                         a_mmbond_r:=a_mmbond_xt*a_mmbond_xt+a_mmbond_yt*a_mmbond_yt+a_mmbond_zt*a_mmbond_zt
                     };
                     a_mmbond_r:=sqrt(a_mmbond_r);
                     a_mmbond_r:=a_mmbond_r-a_mmbond_bp->length;
                     a_mmbond_zt:=a_mmbond_bp->k*a_mmbond_r*a_mmbond_r*(1.0-2.55*a_mmbond_r+7.0*2.55/ 12*a_mmbond_r*a_mmbond_r);
                     * V:=* V+a_mmbond_zt;
                     fprintf(op,"mmBond %s %d %s %d E %f value %f error %f\n",a_mmbond_a1->name,a_mmbond_a1->serial,a_mmbond_a2->name,a_mmbond_a2->serial,a_mmbond_zt,a_mmbond_r+a_mmbond_bp->length,a_mmbond_r,RValue) and skip
                     
                 }
                 else 
                 {
                      skip 
                 };
                 if(a_mmbond_bp=a_mmbond_bp->next$) then 
                 {
                     return<==1 and RValue:=1;
                     skip
                 }
                 else 
                 {
                      skip 
                 };
                 if(return=0)   then 
                 {
                     a_mmbond_bp:=a_mmbond_bp->next$
                 }
                 else
                 {
                     skip
                 }
             }
             else
             {
                 skip
             }
         }
     }
     else
     {
         skip
     }
     )
     }; 
  function bond_length ( ATOM *a1,ATOM *a2,float RValue )
 {
     frame(bond_length_bp,return) and ( 
     int return<==0 and skip;
     BOND *bond_length_bp and skip;
     bond_length_bp:=bond_first;
     while( return=0 AND  1)
     {
         if(bond_length_bp=NULL) then 
         {
             return<==1 and RValue:=-1.0;
             skip
         }
         else 
         {
              skip 
         };
         if(return=0)   then 
         {
             if(a1=bond_length_bp->atom1 AND a2=bond_length_bp->atom2) then 
             {
                 return<==1 and RValue:=bond_length_bp->length;
                 skip
             }
             else 
             {
                  skip 
             };
             if(return=0)   then 
             {
                 if(a2=bond_length_bp->atom1 AND a1=bond_length_bp->atom2) then 
                 {
                     return<==1 and RValue:=bond_length_bp->length;
                     skip
                 }
                 else 
                 {
                      skip 
                 };
                 if(return=0)   then 
                 {
                     if(bond_length_bp=bond_length_bp->next$) then 
                     {
                         return<==1 and RValue:=-1.0;
                         skip
                     }
                     else 
                     {
                          skip 
                     };
                     if(return=0)   then 
                     {
                         bond_length_bp:=bond_length_bp->next$
                     }
                     else
                     {
                         skip
                     }
                 }
                 else
                 {
                     skip
                 }
             }
             else
             {
                 skip
             }
         }
         else
         {
             skip
         }
     }
     )
     }; 
  function gsdg_bond ( ATOM *who,int RValue )
 {
     frame(gsdg_bond_bp,gsdg_bond_ap,return) and ( 
     int return<==0 and skip;
     BOND *gsdg_bond_bp and skip;
     ATOM *gsdg_bond_ap and skip;
     gsdg_bond_bp:=bond_first;
     while( return=0 AND  1)
     {
         if(gsdg_bond_bp=NULL) then 
         {
             return<==1 and RValue:=1;
             skip
         }
         else 
         {
              skip 
         };
         if(return=0)   then 
         {
             if(gsdg_bond_bp->atom1=who) then 
             {
                 gsdg_bond_ap:=gsdg_bond_bp->atom2;
                 gsdg_bond_ap->vx:=gsdg_bond_bp->length*gsdg_bond_bp->length;
                 gsdg_bond_ap->vy:=gsdg_bond_bp->k
                 
             }
             else 
             {
                  skip 
             };
             if(gsdg_bond_bp->atom2=who) then 
             {
                 gsdg_bond_ap:=gsdg_bond_bp->atom1;
                 gsdg_bond_ap->vx:=gsdg_bond_bp->length*gsdg_bond_bp->length;
                 gsdg_bond_ap->vy:=gsdg_bond_bp->k
                 
             }
             else 
             {
                  skip 
             };
             if(gsdg_bond_bp=gsdg_bond_bp->next$) then 
             {
                 return<==1 and RValue:=1;
                 skip
             }
             else 
             {
                  skip 
             };
             if(return=0)   then 
             {
                 gsdg_bond_bp:=gsdg_bond_bp->next$
             }
             else
             {
                 skip
             }
         }
         else
         {
             skip
         }
     };
     if(return=0)   then 
     {
         return<==1 and RValue:=0;
         skip
     }
     else
     {
         skip
     }
     )
     }; 
  function get_bond_pointer ( ATOM *a1,ATOM *a2,BOND* RValue )
 {
     frame(get_bond_pointer_bp,return) and ( 
     int return<==0 and skip;
     BOND *get_bond_pointer_bp and skip;
     get_bond_pointer_bp:=bond_first;
     while( return=0 AND  1)
     {
         if(get_bond_pointer_bp=NULL) then 
         {
             return<==1 and RValue:=NULL;
             skip
         }
         else 
         {
              skip 
         };
         if(return=0)   then 
         {
             if(a1=get_bond_pointer_bp->atom1 AND a2=get_bond_pointer_bp->atom2) then 
             {
                 return<==1 and RValue:=get_bond_pointer_bp;
                 skip
             }
             else 
             {
                  skip 
             };
             if(return=0)   then 
             {
                 if(a1=get_bond_pointer_bp->atom2 AND a2=get_bond_pointer_bp->atom1) then 
                 {
                     return<==1 and RValue:=get_bond_pointer_bp;
                     skip
                 }
                 else 
                 {
                      skip 
                 };
                 if(return=0)   then 
                 {
                     if(get_bond_pointer_bp=get_bond_pointer_bp->next$) then 
                     {
                         return<==1 and RValue:=NULL;
                         skip
                     }
                     else 
                     {
                          skip 
                     };
                     if(return=0)   then 
                     {
                         get_bond_pointer_bp:=get_bond_pointer_bp->next$
                     }
                     else
                     {
                         skip
                     }
                 }
                 else
                 {
                     skip
                 }
             }
             else
             {
                 skip
             }
         }
         else
         {
             skip
         }
     };
     if(return=0)   then 
     {
         return<==1 and RValue:=NULL;
         skip
     }
     else
     {
         skip
     }
     )
     }; 
  function v_ho_bond ( float *V,float lambda,int RValue )
 {
     frame(v_ho_bond_bp,v_ho_bond_r,v_ho_bond_xt,v_ho_bond_yt,v_ho_bond_zt,v_ho_bond_a1,v_ho_bond_a2,v_ho_bond_hol,v_ho_bond_target,return) and ( 
     int return<==0 and skip;
     BOND *v_ho_bond_bp and skip;
     float v_ho_bond_r,v_ho_bond_xt,v_ho_bond_yt,v_ho_bond_zt and skip;
     ATOM *v_ho_bond_a1,*v_ho_bond_a2 and skip;
     float v_ho_bond_hol and skip;
     float v_ho_bond_target and skip;
     v_ho_bond_hol:=get_f_variable("lambda",RValue);
     if(v_ho_bond_hol<0.0) then 
     {
         v_ho_bond_hol:=0.0
     }
     else 
     {
          skip 
     };
     if(v_ho_bond_hol>1.0) then 
     {
         v_ho_bond_hol:=1.0
     }
     else 
     {
          skip 
     };
     v_ho_bond_bp:=bond_first;
     if(v_ho_bond_bp=NULL) then 
     {
         return<==1 and RValue:=1;
         skip
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         while( return=0 AND  1)
         {
             if(v_ho_bond_bp=NULL) then 
             {
                 return<==1 and RValue:=0;
                 skip
             }
             else 
             {
                  skip 
             };
             if(return=0)   then 
             {
                 v_ho_bond_a1:=v_ho_bond_bp->atom1;
                 v_ho_bond_a2:=v_ho_bond_bp->atom2;
                 if(v_ho_bond_a1->active OR v_ho_bond_a2->active) then 
                 {
                     if(lambda=0.0) then 
                     {
                         v_ho_bond_r:=(v_ho_bond_a1->x-v_ho_bond_a2->x)*(v_ho_bond_a1->x-v_ho_bond_a2->x);
                         v_ho_bond_r:=v_ho_bond_r+(v_ho_bond_a1->y-v_ho_bond_a2->y)*(v_ho_bond_a1->y-v_ho_bond_a2->y);
                         v_ho_bond_r:=v_ho_bond_r+(v_ho_bond_a1->z-v_ho_bond_a2->z)*(v_ho_bond_a1->z-v_ho_bond_a2->z)
                         
                     }
                     else
                     {
                         v_ho_bond_xt:=(v_ho_bond_a1->x-v_ho_bond_a2->x+lambda*(v_ho_bond_a1->dx-v_ho_bond_a2->dx));
                         v_ho_bond_yt:=(v_ho_bond_a1->y-v_ho_bond_a2->y+lambda*(v_ho_bond_a1->dy-v_ho_bond_a2->dy));
                         v_ho_bond_zt:=(v_ho_bond_a1->z-v_ho_bond_a2->z+lambda*(v_ho_bond_a1->dz-v_ho_bond_a2->dz));
                         v_ho_bond_r:=v_ho_bond_xt*v_ho_bond_xt+v_ho_bond_yt*v_ho_bond_yt+v_ho_bond_zt*v_ho_bond_zt
                     };
                     v_ho_bond_r:=sqrt(v_ho_bond_r);
                     v_ho_bond_target:=v_ho_bond_hol*v_ho_bond_r+(1.0-v_ho_bond_hol)*v_ho_bond_bp->length;
                     * V:=* V+v_ho_bond_bp->k*(v_ho_bond_r-v_ho_bond_target)*(v_ho_bond_r-v_ho_bond_target)
                     
                 }
                 else 
                 {
                      skip 
                 };
                 if(v_ho_bond_bp=v_ho_bond_bp->next$) then 
                 {
                     return<==1 and RValue:=1;
                     skip
                 }
                 else 
                 {
                      skip 
                 };
                 if(return=0)   then 
                 {
                     v_ho_bond_bp:=v_ho_bond_bp->next$
                 }
                 else
                 {
                     skip
                 }
             }
             else
             {
                 skip
             }
         }
     }
     else
     {
         skip
     }
     )
     }; 
  function f_ho_bond ( float lambda,int RValue )
 {
     frame(f_ho_bond_bp,f_ho_bond_r,f_ho_bond_k,f_ho_bond_ux,f_ho_bond_uy,f_ho_bond_uz,f_ho_bond_a1,f_ho_bond_a2,f_ho_bond_hol,f_ho_bond_target,return) and ( 
     int return<==0 and skip;
     BOND *f_ho_bond_bp and skip;
     float f_ho_bond_r,f_ho_bond_k,f_ho_bond_ux,f_ho_bond_uy,f_ho_bond_uz and skip;
     ATOM *f_ho_bond_a1,*f_ho_bond_a2 and skip;
     float f_ho_bond_hol and skip;
     float f_ho_bond_target and skip;
     f_ho_bond_hol:=get_f_variable("lambda",RValue);
     if(f_ho_bond_hol<0.0) then 
     {
         f_ho_bond_hol:=0.0
     }
     else 
     {
          skip 
     };
     if(f_ho_bond_hol>1.0) then 
     {
         f_ho_bond_hol:=1.0
     }
     else 
     {
          skip 
     };
     f_ho_bond_bp:=bond_first;
     if(f_ho_bond_bp=NULL) then 
     {
         return<==1 and RValue:=1;
         skip
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         while( return=0 AND  1)
         {
             if(f_ho_bond_bp=NULL) then 
             {
                 return<==1 and RValue:=0;
                 skip
             }
             else 
             {
                  skip 
             };
             if(return=0)   then 
             {
                 f_ho_bond_k:=f_ho_bond_bp->k;
                 f_ho_bond_a1:=f_ho_bond_bp->atom1;
                 f_ho_bond_a2:=f_ho_bond_bp->atom2;
                 if(f_ho_bond_a1->active OR f_ho_bond_a2->active) then 
                 {
                     if(lambda=0.0) then 
                     {
                         f_ho_bond_ux:=(f_ho_bond_a2->x-f_ho_bond_a1->x);
                         f_ho_bond_uy:=(f_ho_bond_a2->y-f_ho_bond_a1->y);
                         f_ho_bond_uz:=(f_ho_bond_a2->z-f_ho_bond_a1->z)
                         
                     }
                     else
                     {
                         f_ho_bond_ux:=(f_ho_bond_a2->x-f_ho_bond_a1->x+lambda*(f_ho_bond_a2->dx-f_ho_bond_a1->dx));
                         f_ho_bond_uy:=(f_ho_bond_a2->y-f_ho_bond_a1->y+lambda*(f_ho_bond_a2->dy-f_ho_bond_a1->dy));
                         f_ho_bond_uz:=(f_ho_bond_a2->z-f_ho_bond_a1->z+lambda*(f_ho_bond_a2->dz-f_ho_bond_a1->dz))
                     };
                     f_ho_bond_r:=f_ho_bond_ux*f_ho_bond_ux+f_ho_bond_uy*f_ho_bond_uy+f_ho_bond_uz*f_ho_bond_uz;
                     if(f_ho_bond_r<=1.e-15) then 
                     {
                         f_ho_bond_r:=0;
                         f_ho_bond_ux:=1.0;
                         f_ho_bond_uy:=0.0;
                         f_ho_bond_uz:=0.0
                         
                     }
                     else
                     {
                         f_ho_bond_r:=sqrt(f_ho_bond_r);
                         f_ho_bond_ux:=f_ho_bond_ux/ f_ho_bond_r;
                         f_ho_bond_uy:=f_ho_bond_uy/ f_ho_bond_r;
                         f_ho_bond_uz:=f_ho_bond_uz/ f_ho_bond_r
                     };
                     f_ho_bond_target:=f_ho_bond_hol*f_ho_bond_r+(1.0-f_ho_bond_hol)*f_ho_bond_bp->length;
                     f_ho_bond_ux:=2*f_ho_bond_k*(f_ho_bond_r-f_ho_bond_target)*(1.0-f_ho_bond_hol)*f_ho_bond_ux;
                     f_ho_bond_uy:=2*f_ho_bond_k*(f_ho_bond_r-f_ho_bond_target)*(1.0-f_ho_bond_hol)*f_ho_bond_uy;
                     f_ho_bond_uz:=2*f_ho_bond_k*(f_ho_bond_r-f_ho_bond_target)*(1.0-f_ho_bond_hol)*f_ho_bond_uz;
                     if(f_ho_bond_a1->active) then 
                     {
                         f_ho_bond_a1->fx:=f_ho_bond_a1->fx+f_ho_bond_ux;
                         f_ho_bond_a1->fy:=f_ho_bond_a1->fy+f_ho_bond_uy;
                         f_ho_bond_a1->fz:=f_ho_bond_a1->fz+f_ho_bond_uz
                         
                     }
                     else 
                     {
                          skip 
                     };
                     if(f_ho_bond_a2->active) then 
                     {
                         f_ho_bond_a2->fx:=f_ho_bond_a2->fx-f_ho_bond_ux;
                         f_ho_bond_a2->fy:=f_ho_bond_a2->fy-f_ho_bond_uy;
                         f_ho_bond_a2->fz:=f_ho_bond_a2->fz-f_ho_bond_uz
                         
                     }
                     else 
                     {
                          skip 
                     }
                     
                 }
                 else 
                 {
                      skip 
                 };
                 if(f_ho_bond_bp=f_ho_bond_bp->next$) then 
                 {
                     return<==1 and RValue:=1;
                     skip
                 }
                 else 
                 {
                      skip 
                 };
                 if(return=0)   then 
                 {
                     f_ho_bond_bp:=f_ho_bond_bp->next$
                 }
                 else
                 {
                     skip
                 }
             }
             else
             {
                 skip
             }
         }
     }
     else
     {
         skip
     }
     )
     }; 
  function v_box ( float *V,float lambda,int RValue )
 {
     frame(return) and ( 
     int return<==0 and skip;
     return<==1 and RValue:=0;
     skip
     )
     }; 
  function f_box ( float lambda,int RValue )
 {
     frame(f_box_bbox,f_box_xc,f_box_yc,f_box_zc,f_box_rx,f_box_ry,f_box_rz,f_box_rad,f_box_vmod,f_box_vf,f_box_vdot,f_box_ap,f_box_natom,f_box_i,return) and ( 
     int return<==0 and skip;
     float f_box_bbox and skip;
     float f_box_xc,f_box_yc,f_box_zc and skip;
     float f_box_rx,f_box_ry,f_box_rz and skip;
     float f_box_rad,f_box_vmod,f_box_vf,f_box_vdot and skip;
     ATOM *f_box_ap and skip;
     int f_box_natom and skip;
     int f_box_i and skip;
     f_box_natom:=a_number(RValue);
     if(f_box_natom<1) then 
     {
         return<==1 and RValue:=0;
         skip
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         f_box_bbox:=get_f_variable("bbox",RValue);
         if(f_box_bbox<1.0) then 
         {
             return<==1 and RValue:=0;
             skip
         }
         else 
         {
              skip 
         };
         if(return=0)   then 
         {
             f_box_xc:=0.0;
             f_box_yc:=0.0;
             f_box_zc:=0.0;
             f_box_i:=0;
             
             while(f_box_i<f_box_natom)
             {
                 f_box_ap:=a_next(f_box_i,RValue);
                 f_box_xc:=f_box_xc+f_box_ap->x;
                 f_box_yc:=f_box_yc+f_box_ap->y;
                 f_box_zc:=f_box_zc+f_box_ap->z;
                 f_box_i:=f_box_i+1
                 
             };
             f_box_xc:=f_box_xc/ f_box_natom;
             f_box_yc:=f_box_yc/ f_box_natom;
             f_box_zc:=f_box_zc/ f_box_natom;
             f_box_bbox:=f_box_bbox*f_box_bbox;
             f_box_i:=0;
             
             while(f_box_i<f_box_natom)
             {
                 f_box_ap:=a_next(f_box_i,RValue);
                 f_box_rx:=f_box_ap->x-f_box_xc;
                 f_box_ry:=f_box_ap->y-f_box_yc;
                 f_box_rz:=f_box_ap->z-f_box_zc;
                 f_box_rad:=f_box_rx*f_box_rx+f_box_ry*f_box_ry+f_box_rz*f_box_rz;
                 if(f_box_rad>f_box_bbox) then 
                 {
                     f_box_rad:=1.0/ sqrt(f_box_rad);
                     f_box_rx:=f_box_rx*f_box_rad;
                     f_box_ry:=f_box_ry*f_box_rad;
                     f_box_rz:=f_box_rz*f_box_rad;
                     f_box_vmod:=f_box_ap->vx*f_box_ap->vx+f_box_ap->vy*f_box_ap->vy+f_box_ap->vz*f_box_ap->vz;
                     f_box_vdot:=f_box_ap->vx*f_box_rx+f_box_ap->vy*f_box_ry+f_box_ap->vz*f_box_rz;
                     if(f_box_vdot>0.0) then 
                     {
                         f_box_ap->vx:=f_box_ap->vx-f_box_vdot*f_box_rx;
                         f_box_ap->vx:=f_box_ap->vx-f_box_vdot*f_box_rx;
                         f_box_ap->vy:=f_box_ap->vy-f_box_vdot*f_box_ry;
                         f_box_ap->vy:=f_box_ap->vy-f_box_vdot*f_box_ry;
                         f_box_ap->vz:=f_box_ap->vz-f_box_vdot*f_box_rz;
                         f_box_ap->vz:=f_box_ap->vz-f_box_vdot*f_box_rz;
                         f_box_vf:=f_box_ap->vx*f_box_ap->vx+f_box_ap->vy*f_box_ap->vy+f_box_ap->vz*f_box_ap->vz;
                         if(f_box_vf>0.0) then 
                         {
                             f_box_vmod:=sqrt(f_box_vmod/ f_box_vf)
                         }
                         else 
                         {
                              skip 
                         };
                         f_box_ap->vx:=f_box_ap->vx*f_box_vmod;
                         f_box_ap->vy:=f_box_ap->vy*f_box_vmod;
                         f_box_ap->vz:=f_box_ap->vz*f_box_vmod;
                         f_box_ap->dx:=f_box_ap->vx;
                         f_box_ap->dy:=f_box_ap->vy;
                         f_box_ap->dz:=f_box_ap->vz
                         
                     }
                     else 
                     {
                          skip 
                     }
                     
                 }
                 else 
                 {
                      skip 
                 };
                 f_box_i:=f_box_i+1
                 
             };
             return<==1 and RValue:=0;
             skip
         }
         else
         {
             skip
         }
     }
     else
     {
         skip
     }
     )
     }; 
  function read_eval_do ( FILE *ip,FILE *op )
 {
     frame(read_eval_do_line,read_eval_do_ap,read_eval_do_ap1,read_eval_do_itemp,read_eval_do_ftemp,read_eval_do_inbuff,read_eval_do_inliteral,return) and ( 
     int return<==0 and skip;
     char read_eval_do_line[4096],*read_eval_do_ap,*read_eval_do_ap1 and skip;
     int read_eval_do_itemp[20] and skip;
     float read_eval_do_ftemp[20] and skip;
     int read_eval_do_inbuff and skip;
     int read_eval_do_inliteral and skip;
     read_eval_do_inliteral:=0;
     if(ip=NULL) then 
     {
         aaerror(" cannot use input file \n",RValue);
          return<==1 and skip
         
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         if(op=NULL) then 
         {
             aaerror(" cannot use output file \n",RValue);
              return<==1 and skip
             
         }
         else 
         {
              skip 
         };
         if(return=0)   then 
         {
             read_eval_do_inbuff:=0;
             read_eval_do_line[read_eval_do_inbuff]:=fgetc(ip) ;
             //while( return=0 AND  (read_eval_do_line[read_eval_do_inbuff])!=(char)EOF)
			  while( return=0 AND  (read_eval_do_line[read_eval_do_inbuff])!='#')
             {
                 if(!read_eval_do_inliteral AND read_eval_do_line[read_eval_do_inbuff]='"') then 
                 {
                     read_eval_do_inliteral:=1
                 }
                 else 
                 {
                      skip 
                 };
                 if(read_eval_do_inliteral AND read_eval_do_line[read_eval_do_inbuff]='"') then 
                 {
                     read_eval_do_inliteral:=0
                 }
                 else 
                 {
                      skip 
                 };
                 if(!read_eval_do_inliteral) then 
                 {
                     if(read_eval_do_line[read_eval_do_inbuff]=',') then 
                     {
                         read_eval_do_line[read_eval_do_inbuff]:=' '
                     }
                     else 
                     {
                          skip 
                     };
                     if(read_eval_do_line[read_eval_do_inbuff]='\t') then 
                     {
                         read_eval_do_line[read_eval_do_inbuff]:=' '
                     }
                     else 
                     {
                          skip 
                     };
                     if(read_eval_do_line[read_eval_do_inbuff]='\n') then 
                     {
                         read_eval_do_line[read_eval_do_inbuff]:=' '
                     }
                     else 
                     {
                          skip 
                     };
                     if(read_eval_do_line[read_eval_do_inbuff]=';') then 
                     {
                         read_eval_do_line[read_eval_do_inbuff]:='\0';
                         if(extern eval(ip,op,read_eval_do_line,RValue)<0) then 
                         {
                              return<==1 and skip
                         }
                         else 
                         {
                              skip 
                         };
                         if(return=0)   then 
                         {
                             read_eval_do_inbuff:=0
                         }
						 else
						 {
						   skip
						  }
					}
                    else
                    {
                             if(read_eval_do_line[read_eval_do_inbuff]!='\n') then 
                             {
                                 read_eval_do_inbuff:=read_eval_do_inbuff+1
                             }
                             else 
                             {
                                  skip 
                             }
                      
                     }
                    
                     
                 }
                 else 
                 {
                      skip 
                 };
                 read_eval_do_line[read_eval_do_inbuff]:=fgetc(ip,RValue) 
             }
         }
         else
         {
             skip
         }
     }
     else
     {
         skip
     }
     )
     }; 
void (*potentials[10])(float* fp, float f, int RValue) and skip;
void  (*forces[10])(float f, int RValue)  and skip; 
     int nused<==(-1) and skip;
 function eval ( FILE *ip,FILE *op,char *line,int RValue )
 {
     frame(i,eval_newfile,eval_token,eval_ap,eval_ap1,eval_errmes,eval_itemp,eval_itoken,eval_ftemp,eval_134_temp$_1,return,break$) and ( 
     int break$<==0 and skip;
     int return<==0 and skip;
     FILE *eval_newfile and skip;
	 	 int i<==0 and skip;
     char **eval_token,*eval_ap,*eval_ap1 and skip;
	 eval_token:= (char**)malloc(20*4);
	 while(i<20)
	 {
		eval_token[i] := (char*)malloc(80);
		memset(eval_token[i],0,80) and skip;
		i:=i+1
	 };
     char eval_errmes[80] and skip;
     int eval_itemp[20],eval_itoken and skip;
     float eval_ftemp[20] and skip;
     if(nused=-1) then 
     {
		 potentials[0]:=v_bond;
         potentials[1]:=v_angle;
         potentials[2]:=u_v_nonbon;
         potentials[3]:=v_torsion;
         potentials[4]:=v_hybrid;
         forces[0]:=f_bond;
         forces[1]:=f_angle;
         forces[2]:=u_f_nonbon;
         forces[3]:=f_torsion;
         forces[4]:=f_hybrid;
         nused:=5
         
     }
     else 
     {
          skip 
     };
     eval_itoken:=0;
     
     while(eval_itoken<20)
     {
         eval_token[eval_itoken,0]:='\0';
         eval_itemp[eval_itoken]:=0;
         eval_ftemp[eval_itoken]:=0.0;
         eval_itoken:=eval_itoken+1
         
     };
     if(eval_echo) then 
     {
         fprintf(op,"%s;\n",line,RValue) and skip
     }
     else 
     {
          skip 
     };
     eval_ap:=line;
     break$<==0 and skip;
     eval_itoken:=0;
	
     while( return=0 AND   break$=0 AND  eval_itoken<20)
     {
         eval_ap1:=&eval_token[eval_itoken,0];
         * eval_ap1:='\0';
         while(* eval_ap=' ')
         {
             eval_ap:=eval_ap+1
         };
         if(* eval_ap='"') then 
         {
             eval_ap:=eval_ap+1;
             while(* eval_ap!='"' AND * eval_ap!='\0')
             {
                 * (eval_ap1):=* (eval_ap);
                 eval_ap1:=eval_ap1+1;
                 eval_ap:=eval_ap+1
             };
             if(* eval_ap='"') then 
             {
                 eval_ap:=eval_ap+1
             }
             else 
             {
                  skip 
             }
             
         }
         else
         {
             if(eval_itoken=0 AND * eval_ap='#') then 
             {
                 return<==1 and RValue:=1;
                 skip
             }
             else 
             {
                  skip 
             };
             if(return=0)   then 
             {
                 while(* eval_ap!=' ' AND * eval_ap!='\0')
                 {
                     if(eval_itoken=0 OR (strcmp(&eval_token[0,0],"read")!=0 AND strcmp(&eval_token[0,0],"output")!=0)) then 
                     {
                         if(isupper(* eval_ap,RValue)) then 
                         {
                             * eval_ap1:=tolower(* eval_ap,RValue)
                             
                         }
                         else
                         {
                             * eval_ap1:=* eval_ap
                         };
                         eval_ap1:=eval_ap1+1;
                         eval_ap:=eval_ap+1
                     }
                     else
                     {
                         * eval_ap1:=* eval_ap;
                         eval_ap1:=eval_ap1+1;
                         eval_ap:=eval_ap+1
                     }
                 }
             }
             else
             {
                 skip
             }
         };
         if(return=0)  then
         {
             * eval_ap1:='\0';
             eval_ap1:=&eval_token[eval_itoken,0];
             if(extern tisvariable(eval_ap1,RValue)) then 
             {
                 eval_ftemp[eval_itoken]:=get_f_variable(eval_ap1,RValue);
                 eval_itemp[eval_itoken]:=get_i_variable(eval_ap1,RValue)
                 
             }
             else
             {
                 if(extern tisint(eval_ap1,RValue)=1) then 
                 {
                     eval_itemp[eval_itoken]:=atoi(eval_ap1,RValue);
                     eval_ftemp[eval_itoken]:=eval_itemp[eval_itoken]
                 }
                 else
                 {
                     eval_ftemp[eval_itoken]:=atof(eval_ap1,RValue);
                     eval_itemp[eval_itoken]:=(int)eval_ftemp[eval_itoken]
                 }
             };
             if(* eval_ap='\0') then 
             {
                 break$<==1 and skip
              }
             else 
             {
                  skip 
             };
             if(break$=0)   then
             {
                 eval_itoken:=eval_itoken+1
             }
             else
             {
                 skip
             }
         }
         else
         {
             skip
         }
         
     };
     break$<==0 and skip;
     if(return=0)   then 
     {
         if(eval_token[0,0]='\0') then 
         {
             return<==1 and RValue:=1;
             skip
         }
         else 
         {
              skip 
         };
         if(return=0)   then 
         {
             if(strcmp(&eval_token[0,0],"atom")=0) then 
             {
                 if(extern atom(eval_ftemp[1],eval_ftemp[2],eval_ftemp[3],eval_itemp[4],eval_ftemp[6],eval_ftemp[7],eval_ftemp[8],eval_ftemp[9],&eval_token[5,0],RValue)) then 
                 {
                   skip                     
                 }
                 else
                 {
                     aaerror(" cannot add to atom structure -data structure error",RValue);
                     exit(0) and skip 
                 };
                 return<==1 and RValue:=1;
                 skip
                 
             }
             else 
             {
                  skip 
             };
             if(return=0)   then 
             {
                 if(strcmp(&eval_token[0,0],"bond")=0) then 
                 {
                     if(extern bond(eval_itemp[1],eval_itemp[2],eval_ftemp[3],eval_ftemp[4],RValue)) then 
                     {
                         skip
                     }
                     else
                     {
                         aaerror(" cannot add to bond structure -data structure error",RValue);
                         exit(0) and skip 
                     };
                     return<==1 and RValue:=1;
                     skip
                     
                 }
                 else 
                 {
                      skip 
                 };
                 if(return=0)   then 
                 {
                     if(strcmp(&eval_token[0,0],"restrain")=0) then 
                     {
                         if(extern restrain(eval_itemp[1],eval_itemp[2],eval_ftemp[3],eval_ftemp[4],RValue)) then 
                         {
                             skip
                         }
                         else
                         {
                             aaerror(" cannot add to restrain structure -data structure error",RValue);
                             exit(0) and skip 
                         };
                         return<==1 and RValue:=1;
                         skip
                         
                     }
                     else 
                     {
                          skip 
                     };
                     if(return=0)   then 
                     {
                         if(strcmp(&eval_token[0,0],"angle")=0) then 
                         {
                             eval_ftemp[2]:=3.141592653589793/ 180.0;
                             eval_ftemp[5]:=eval_ftemp[5]*eval_ftemp[2];
                             if(extern angle(eval_itemp[1],eval_itemp[2],eval_itemp[3],eval_ftemp[4],eval_ftemp[5],RValue)) then 
                             {
                                 skip
                             }
                             else
                             {
                                 aaerror(" cannot add to angle structure -data structure error",RValue);
                                 exit(0) and skip 
                             };
                             return<==1 and RValue:=1;
                             skip
                             
                         }
                         else 
                         {
                              skip 
                         };
                         if(return=0)   then 
                         {
                             if(strcmp(&eval_token[0,0],"noel")=0) then 
                             {
                                 if(extern noel(eval_itemp[1],eval_itemp[2],eval_ftemp[3],eval_ftemp[4],eval_ftemp[5],eval_ftemp[6],eval_ftemp[7],RValue)) then 
                                 {
                                     skip
                                 }
                                 else
                                 {
                                     aaerror(" cannot add to noel structure -data structure error",RValue);
                                     exit(0) and skip 
                                 };
                                 return<==1 and RValue:=1;
                                 skip
                                 
                             }
                             else 
                             {
                                  skip 
                             };
                             if(return=0)   then 
                             {
                                 if(strcmp(&eval_token[0,0],"torsion")=0) then 
                                 {
                                     eval_ftemp[2]:=acos(-1.0)/ 180.0;
                                     eval_ftemp[7]:=eval_ftemp[7]*eval_ftemp[2];
                                     if(extern torsion(eval_itemp[1],eval_itemp[2],eval_itemp[3],eval_itemp[4],eval_ftemp[5],eval_itemp[6],eval_ftemp[7],RValue)) then 
                                     {
                                         skip
                                     }
                                     else
                                     {
                                         aaerror(" cannot add to torsion structure -data structure error",RValue);
                                         exit(0) and skip 
                                     };
                                     return<==1 and RValue:=1;
                                     skip
                                     
                                 }
                                 else 
                                 {
                                      skip 
                                 };
                                 if(return=0)   then 
                                 {
                                     if(strcmp(&eval_token[0,0],"hybrid")=0) then 
                                     {
                                         if(extern hybrid(eval_itemp[1],eval_itemp[2],eval_itemp[3],eval_itemp[4],eval_ftemp[5],eval_ftemp[6],RValue)) then 
                                         {
                                             skip
                                         }
                                         else
                                         {
                                             aaerror(" cannot add to hybrid structure -data structure error",RValue);
                                             exit(0) and skip 
                                         };
                                         return<==1 and RValue:=1;
                                         skip
                                         
                                     }
                                     else 
                                     {
                                          skip 
                                     };
                                     if(return=0)   then 
                                     {
                                         if(strcmp(&eval_token[0,0],"velocity")=0) then 
                                         {
                                             if(extern a_readvelocity(eval_itemp[1],eval_ftemp[2],eval_ftemp[3],eval_ftemp[4],RValue)) then 
                                             {
                                                 skip
                                             }
                                             else
                                             {
                                                 aaerror(" cannot update velocity -is this atom defined? ",RValue);
                                                 exit(0) and skip 
                                             };
                                             return<==1 and RValue:=1;
                                             skip
                                             
                                         }
                                         else 
                                         {
                                              skip 
                                         };
                                         if(return=0)   then 
                                         {
                                             if(strcmp(&eval_token[0,0],"tether")=0) then 
                                             {
                                                 if(strcmp(&eval_token[1,0],"all")=0) then 
                                                 {
                                                     if(extern alltether(eval_ftemp[2],RValue)) then 
                                                     {
													    skip
                                                     }
                                                     else
                                                     {
                                                         aaerror(" cannot add to tether structure -data structure error",RValue);
                                                         exit(0) and skip 
                                                     }
                                                     
                                                 }
                                                 else
                                                 {
                                                     if(extern tether(eval_itemp[1],eval_ftemp[2],eval_ftemp[3],eval_ftemp[4],eval_ftemp[5],RValue)) then 
                                                     {
													    skip
                                                     }
                                                     else
                                                     {
                                                         aaerror(" cannot add to tether structure -data structure error",RValue);
                                                         exit(0) and skip 
                                                     }
                                                 };
                                                 return<==1 and RValue:=1;
                                                 skip
                                                 
                                             }
                                             else 
                                             {
                                                  skip 
                                             };
                                             if(return=0)   then 
                                             {
                                                 if(strcmp(&eval_token[0,0],"tgroup")=0) then 
                                                 {
                                                     tgroup(eval_itemp[1],eval_itemp[2],eval_itemp[3],eval_itemp[4],eval_itemp[5],eval_ftemp[6],eval_itemp[7],RValue);
                                                     return<==1 and RValue:=1;
                                                     skip
                                                     
                                                 }
                                                 else 
                                                 {
                                                      skip 
                                                 };
                                                 if(return=0)   then 
                                                 {
                                                     if(strcmp(&eval_token[0,0],"tsearch")=0) then 
                                                     {
                                                         tsearch(eval_itemp[1],eval_itemp[2],eval_itemp[3],eval_itemp[4],eval_itemp[5],eval_itemp[6],eval_itemp[7],eval_itemp[8],RValue);
                                                         return<==1 and RValue:=1;
                                                         skip
                                                         
                                                     }
                                                     else 
                                                     {
                                                          skip 
                                                     };
                                                     if(return=0)   then 
                                                     {
                                                         if(strcmp(&eval_token[0,0],"tset")=0) then 
                                                         {
                                                             tset(op,eval_echo,eval_itemp[1],eval_itemp[2],eval_itemp[3],eval_itemp[4],eval_ftemp[5]*3.141592653589793/ 180.0,RValue);
                                                             return<==1 and RValue:=1;
                                                             skip
                                                             
                                                         }
                                                         else 
                                                         {
                                                              skip 
                                                         };
                                                         if(return=0)   then 
                                                         {
                                                             if(strcmp(&eval_token[0,0],"tmin")=0) then 
                                                             {
                                                                 tmin(op,eval_echo,eval_itemp[1],eval_itemp[2],eval_itemp[3],eval_itemp[4],eval_itemp[5],potentials,nused,RValue);
                                                                 return<==1 and RValue:=1;
                                                                 skip
                                                                 
                                                             }
                                                             else 
                                                             {
                                                                  skip 
                                                             };
                                                             if(return=0)   then 
                                                             {
                                                                 if(strcmp(&eval_token[0,0],"tmap")=0) then 
                                                                 {
                                                                     tmap(op,eval_echo,potentials,nused,eval_itemp[1],eval_itemp[2],eval_itemp[3],eval_itemp[4],eval_itemp[5],eval_itemp[6],eval_itemp[7],eval_itemp[8],eval_itemp[9],eval_itemp[10],RValue);
                                                                     return<==1 and RValue:=1;
                                                                     skip
                                                                     
                                                                 }
                                                                 else 
                                                                 {
                                                                      skip 
                                                                 };
                                                                 if(return=0)   then 
                                                                 {
                                                                     if(strcmp(&eval_token[0,0],"mompar")=0) then 
                                                                     {
                                                                         mom_param(eval_itemp[1],eval_ftemp[2],eval_ftemp[3],RValue);
                                                                         return<==1 and RValue:=1;
                                                                         skip
                                                                         
                                                                     }
                                                                     else 
                                                                     {
                                                                          skip 
                                                                     };
                                                                     if(return=0)   then 
                                                                     {
                                                                         if(strcmp(&eval_token[0,0],"momadd")=0) then 
                                                                         {
                                                                             mom_add(eval_itemp[1],eval_itemp[2],RValue);
                                                                             return<==1 and RValue:=1;
                                                                             skip
                                                                             
                                                                         }
                                                                         else 
                                                                         {
                                                                              skip 
                                                                         };
                                                                         if(return=0)   then 
                                                                         {
                                                                             if(strcmp(&eval_token[0,0],"mom")=0) then 
                                                                             {
                                                                                 mom(op,eval_ftemp[1],eval_itemp[2],RValue);
                                                                                 return<==1 and RValue:=1;
                                                                                 skip
                                                                                 
                                                                             }
                                                                             else 
                                                                             {
                                                                                  skip 
                                                                             };
                                                                             if(return=0)   then 
                                                                             {
                                                                                 if(strcmp(&eval_token[0,0],"monitor")=0) then 
                                                                                 {
                                                                                     AMMPmonitor(potentials,forces,nused,op,RValue);
                                                                                     return<==1 and RValue:=1;
                                                                                     skip
                                                                                     
                                                                                 }
                                                                                 else 
                                                                                 {
                                                                                      skip 
                                                                                 };
                                                                                 if(return=0)   then 
                                                                                 {
                                                                                     if(strcmp(&eval_token[0,0],"mon2")=0) then 
                                                                                     {
                                                                                         AMMPmonitor_mute(potentials,forces,nused,op,RValue);
                                                                                         return<==1 and RValue:=1;
                                                                                         skip
                                                                                         
                                                                                     }
                                                                                     else 
                                                                                     {
                                                                                          skip 
                                                                                     };
                                                                                     if(return=0)   then 
                                                                                     {
                                                                                         if(strcmp(&eval_token[0,0],"nzinactive")=0) then 
                                                                                         {
                                                                                             inactivate_non_zero(eval_itemp[1],eval_itemp[2],RValue);
                                                                                             return<==1 and RValue:=1;
                                                                                             skip
                                                                                             
                                                                                         }
                                                                                         else 
                                                                                         {
                                                                                              skip 
                                                                                         };
                                                                                         if(return=0)   then 
                                                                                         {
                                                                                             if(strcmp(&eval_token[0,0],"inactive")=0) then 
                                                                                             {
                                                                                                 inactivate(eval_itemp[1],eval_itemp[2],RValue);
                                                                                                 return<==1 and RValue:=1;
                                                                                                 skip
                                                                                                 
                                                                                             }
                                                                                             else 
                                                                                             {
                                                                                                  skip 
                                                                                             };
                                                                                             if(return=0)   then 
                                                                                             {
                                                                                                 if(strcmp(&eval_token[0,0],"active")=0) then 
                                                                                                 {
                                                                                                     activate(eval_itemp[1],eval_itemp[2],RValue);
                                                                                                     return<==1 and RValue:=1;
                                                                                                     skip
                                                                                                     
                                                                                                 }
                                                                                                 else 
                                                                                                 {
                                                                                                      skip 
                                                                                                 };
                                                                                                 if(return=0)   then 
                                                                                                 {
                                                                                                     if(strcmp(&eval_token[0,0],"signify")=0) then 
                                                                                                     {
                                                                                                         significance(op,RValue);
                                                                                                         return<==1 and RValue:=1;
                                                                                                         skip
                                                                                                         
                                                                                                     }
                                                                                                     else 
                                                                                                     {
                                                                                                          skip 
                                                                                                     };
                                                                                                     if(return=0)   then 
                                                                                                     {
                                                                                                         if(strcmp(&eval_token[0,0],"analyze")=0) then 
                                                                                                         {
                                                                                                             analyze(potentials,nused,eval_itemp[1],eval_itemp[2],op);
                                                                                                             return<==1 and RValue:=1;
                                                                                                             skip
                                                                                                             
                                                                                                         }
                                                                                                         else 
                                                                                                         {
                                                                                                              skip 
                                                                                                         };
                                                                                                         if(return=0)   then 
                                                                                                         {
                                                                                                             if(strcmp(&eval_token[0,0],"tailor")=0) then 
                                                                                                             {
                                                                                                                 if(strcmp(&eval_token[1,0],"qab")=0) then 
                                                                                                                 {
                                                                                                                     tailor_qab(eval_itemp[2],eval_ftemp[3],eval_ftemp[4],eval_ftemp[5],RValue);
                                                                                                                     return<==1 and RValue:=1;
                                                                                                                     skip
                                                                                                                     
                                                                                                                 }
                                                                                                                 else 
                                                                                                                 {
                                                                                                                      skip 
                                                                                                                 };
                                                                                                                 if(return=0)   then 
                                                                                                                 {
                                                                                                                     if(strcmp(&eval_token[1,0],"include")=0) then 
                                                                                                                     {
                                                                                                                         tailor_include(eval_itemp[2],eval_itemp[3],RValue);
                                                                                                                         return<==1 and RValue:=1;
                                                                                                                         skip
                                                                                                                         
                                                                                                                     }
                                                                                                                     else 
                                                                                                                     {
                                                                                                                          skip 
                                                                                                                     };
                                                                                                                     if(return=0)   then 
                                                                                                                     {
                                                                                                                         if(strcmp(&eval_token[1,0],"exclude")=0) then 
                                                                                                                         {
                                                                                                                             tailor_exclude(eval_itemp[2],eval_itemp[3],RValue);
                                                                                                                             return<==1 and RValue:=1;
                                                                                                                             skip
                                                                                                                             
                                                                                                                         }
                                                                                                                         else 
                                                                                                                         {
                                                                                                                              skip 
                                                                                                                         };
                                                                                                                         if(return=0)   then 
                                                                                                                         {
                                                                                                                             aaerror(" undefined tailor option ",RValue);
                                                                                                                             aaerror(&eval_token[1,0],RValue);
                                                                                                                             return<==1 and RValue:=1;
                                                                                                                             skip
                                                                                                                         }
                                                                                                                         else
                                                                                                                         {
                                                                                                                             skip
                                                                                                                         }
                                                                                                                     }
                                                                                                                     else
                                                                                                                     {
                                                                                                                         skip
                                                                                                                     }
                                                                                                                 }
                                                                                                                 else
                                                                                                                 {
                                                                                                                     skip
                                                                                                                 }
                                                                                                                 
                                                                                                             }
                                                                                                             else 
                                                                                                             {
                                                                                                                  skip 
                                                                                                             };
                                                                                                             if(return=0)  then
                                                                                                             {
                                                                                                                 if(return=0)   then 
                                                                                                                 {
                                                                                                                     if(strcmp(&eval_token[0,0],"read")=0) then 
                                                                                                                     {
																														if(j=0) then
                                                                                                                       {   eval_newfile:=file1;j:=j+1;printf("file1\n") and skip}
																													   else
																													   {eval_newfile:=file2;printf("file2\n") and skip};
                                                                                                                         if(eval_newfile=NULL) then 
                                                                                                                         {
                                                                                                                             aaerror(" cannot open file for read ",RValue);
                                                                                                                             aaerror(&eval_token[1,0],RValue)
                                                                                                                             
                                                                                                                         }
                                                                                                                         else
                                                                                                                         {
                                                                                                                             read_eval_do(eval_newfile,op);
                                                                                                                             fclose(eval_newfile) and skip
                                                                                                                         };
                                                                                                                         return<==1 and RValue:=1;
                                                                                                                         skip
                                                                                                                         
                                                                                                                     }
                                                                                                                     else 
                                                                                                                     {
                                                                                                                          skip 
                                                                                                                     };
                                                                                                                     if(return=0)   then 
                                                                                                                     {
                                                                                                                         if(strcmp(&eval_token[0,0],"output")=0) then 
                                                                                                                         {
                                                                                                                             if(eval_itemp[2]>0) then 
                                                                                                                             {
                                                                                                                                 sprintf(eval_errmes,"%s.%d",&eval_token[1,0],eval_itemp[2],RValue) and skip;
                                                                                                                                 eval_newfile:=fopen(eval_errmes,"w")
                                                                                                                                 
                                                                                                                             }
                                                                                                                             else
                                                                                                                             {
                                                                                                                                 eval_newfile:=fopen(&eval_token[1,0],"w")
                                                                                                                             };
                                                                                                                             if(eval_newfile=NULL) then 
                                                                                                                             {
                                                                                                                                 aaerror(" cannot open file for write ",RValue);
                                                                                                                                 aaerror(&eval_token[1,0],RValue)
                                                                                                                                 
                                                                                                                             }
                                                                                                                             else
                                                                                                                             {
                                                                                                                                 read_eval_do(ip,eval_newfile)
                                                                                                                             };
                                                                                                                             return<==1 and RValue:=1;
                                                                                                                             skip
                                                                                                                             
                                                                                                                         }
                                                                                                                         else 
                                                                                                                         {
                                                                                                                              skip 
                                                                                                                         };
                                                                                                                         if(return=0)   then 
                                                                                                                         {
                                                                                                                             if(strcmp(&eval_token[0,0],"dump")=0) then 
                                                                                                                             {
                                                                                                                                 eval_itoken:=1;
                                                                                                                                 
                                                                                                                                 while( return=0 AND  eval_itoken<20)
                                                                                                                                 {
                                                                                                                                     if(eval_token[eval_itoken,0]='\0') then 
                                                                                                                                     {
                                                                                                                                         return<==1 and RValue:=1;
                                                                                                                                         skip
                                                                                                                                     }
                                                                                                                                     else 
                                                                                                                                     {
                                                                                                                                          skip 
                                                                                                                                     };
                                                                                                                                     if(return=0)   then 
                                                                                                                                     {
                                                                                                                                         if(strcmp(&eval_token[eval_itoken,0],"atom")=0) then 
                                                                                                                                         {
                                                                                                                                             dump_atoms(op)
                                                                                                                                         }
                                                                                                                                         else 
                                                                                                                                         {
                                                                                                                                              skip 
                                                                                                                                         };
                                                                                                                                         if(strcmp(&eval_token[eval_itoken,0],"bond")=0) then 
                                                                                                                                         {
                                                                                                                                             dump_bonds(op)
                                                                                                                                         }
                                                                                                                                         else 
                                                                                                                                         {
                                                                                                                                              skip 
                                                                                                                                         };
                                                                                                                                         if(strcmp(&eval_token[eval_itoken,0],"noel")=0) then 
                                                                                                                                         {
                                                                                                                                             dump_noels(op,RValue)
                                                                                                                                         }
                                                                                                                                         else 
                                                                                                                                         {
                                                                                                                                              skip 
                                                                                                                                         };
                                                                                                                                         if(strcmp(&eval_token[eval_itoken,0],"angle")=0) then 
                                                                                                                                         {
                                                                                                                                             dump_angles(op)
                                                                                                                                         }
                                                                                                                                         else 
                                                                                                                                         {
                                                                                                                                              skip 
                                                                                                                                         };
                                                                                                                                         if(strcmp(&eval_token[eval_itoken,0],"torsion")=0) then 
                                                                                                                                         {
                                                                                                                                             dump_torsions(op,RValue)
                                                                                                                                         }
                                                                                                                                         else 
                                                                                                                                         {
                                                                                                                                              skip 
                                                                                                                                         };
                                                                                                                                         if(strcmp(&eval_token[eval_itoken,0],"hybrid")=0) then 
                                                                                                                                         {
                                                                                                                                             dump_hybrids(op,RValue)
                                                                                                                                         }
                                                                                                                                         else 
                                                                                                                                         {
                                                                                                                                              skip 
                                                                                                                                         };
                                                                                                                                         if(strcmp(&eval_token[eval_itoken,0],"restrain")=0) then 
                                                                                                                                         {
                                                                                                                                             dump_restrains(op,RValue)
                                                                                                                                         }
                                                                                                                                         else 
                                                                                                                                         {
                                                                                                                                              skip 
                                                                                                                                         };
                                                                                                                                         if(strcmp(&eval_token[eval_itoken,0],"pdb")=0) then 
                                                                                                                                         {
                                                                                                                                             dump_pdb(op,100)
                                                                                                                                         }
                                                                                                                                         else 
                                                                                                                                         {
                                                                                                                                              skip 
                                                                                                                                         };
                                                                                                                                         if(strcmp(&eval_token[eval_itoken,0],"variable")=0) then 
                                                                                                                                         {
                                                                                                                                             dump_variable(op,RValue)
                                                                                                                                         }
                                                                                                                                         else 
                                                                                                                                         {
                                                                                                                                              skip 
                                                                                                                                         };
                                                                                                                                         if(strcmp(&eval_token[eval_itoken,0],"velocity")=0) then 
                                                                                                                                         {
                                                                                                                                             dump_velocity(op)
                                                                                                                                         }
                                                                                                                                         else 
                                                                                                                                         {
                                                                                                                                              skip 
                                                                                                                                         };
                                                                                                                                         if(strcmp(&eval_token[eval_itoken,0],"force")=0) then 
                                                                                                                                         {
                                                                                                                                             dump_force(op)
                                                                                                                                         }
                                                                                                                                         else 
                                                                                                                                         {
                                                                                                                                              skip 
                                                                                                                                         };
                                                                                                                                         if(strcmp(&eval_token[eval_itoken,0],"tether")=0) then 
                                                                                                                                         {
                                                                                                                                             dump_tethers(op,RValue)
                                                                                                                                         }
                                                                                                                                         else 
                                                                                                                                         {
                                                                                                                                              skip 
                                                                                                                                         };
                                                                                                                                         if(strcmp(&eval_token[eval_itoken,0],"tgroup")=0) then 
                                                                                                                                         {
                                                                                                                                             dump_tgroup(op,RValue)
                                                                                                                                         }
                                                                                                                                         else 
                                                                                                                                         {
                                                                                                                                              skip 
                                                                                                                                         };
                                                                                                                                         eval_itoken:=eval_itoken+1
                                                                                                                                     }
                                                                                                                                     else
                                                                                                                                     {
                                                                                                                                         skip
                                                                                                                                     }
                                                                                                                                     
                                                                                                                                 };
                                                                                                                                 if(return=0)   then 
                                                                                                                                 {
                                                                                                                                     return<==1 and RValue:=1;
                                                                                                                                     skip
                                                                                                                                 }
                                                                                                                                 else
                                                                                                                                 {
                                                                                                                                     skip
                                                                                                                                 }
                                                                                                                                 
                                                                                                                             }
                                                                                                                             else 
                                                                                                                             {
                                                                                                                                  skip 
                                                                                                                             };
                                                                                                                             if(return=0)  then
                                                                                                                             {
                                                                                                                                 if(return=0)   then 
                                                                                                                                 {
                                                                                                                                     if(strcmp(&eval_token[0,0],"use")=0) then 
                                                                                                                                     {
                                                                                                                                         eval_itoken:=1;
                                                                                                                                         
                                                                                                                                         while( return=0 AND  eval_itoken<20)
                                                                                                                                         {
                                                                                                                                             if(eval_token[eval_itoken,0]='\0') then 
                                                                                                                                             {
                                                                                                                                                 return<==1 and RValue:=1;
                                                                                                                                                 skip
                                                                                                                                             }
                                                                                                                                             else 
                                                                                                                                             {
                                                                                                                                                  skip 
                                                                                                                                             };
                                                                                                                                             if(return=0)   then 
                                                                                                                                             {
                                                                                                                                                 if(strcmp(&eval_token[eval_itoken,0],"none")=0) then 
                                                                                                                                                 {
                                                                                                                                                     nused:=0
                                                                                                                                                 }
                                                                                                                                                 else 
                                                                                                                                                 {
                                                                                                                                                      skip 
                                                                                                                                                 };
                                                                                                                                                 if(strcmp(&eval_token[eval_itoken,0],"nonbon")=0) then 
                                                                                                                                                 {
                                                                                                                                                     forces[nused]:=u_f_nonbon;
                                                                                                                                                     potentials[nused]:=u_v_nonbon;
                                                                                                                                                     nused:=nused+1
                                                                                                                                                     
                                                                                                                                                 }
                                                                                                                                                 else 
                                                                                                                                                 {
                                                                                                                                                      skip 
                                                                                                                                                 };
                                                                                                                                                 if(strcmp(&eval_token[eval_itoken,0],"bond")=0) then 
                                                                                                                                                 {
                                                                                                                                                     forces[nused]:=f_bond;
                                                                                                                                                     potentials[nused]:=v_bond;
                                                                                                                                                     nused:=nused+1
                                                                                                                                                     
                                                                                                                                                 }
                                                                                                                                                 else 
                                                                                                                                                 {
                                                                                                                                                      skip 
                                                                                                                                                 };
                                                                                                                                                 if(strcmp(&eval_token[eval_itoken,0],"mmbond")=0) then 
                                                                                                                                                 {
                                                                                                                                                     forces[nused]:=f_mmbond;
                                                                                                                                                     potentials[nused]:=v_mmbond;
                                                                                                                                                     nused:=nused+1
                                                                                                                                                     
                                                                                                                                                 }
                                                                                                                                                 else 
                                                                                                                                                 {
                                                                                                                                                      skip 
                                                                                                                                                 };
                                                                                                                                                 if(strcmp(&eval_token[eval_itoken,0],"hobond")=0) then 
                                                                                                                                                 {
                                                                                                                                                     forces[nused]:=f_ho_bond;
                                                                                                                                                     potentials[nused]:=v_ho_bond;
                                                                                                                                                     nused:=nused+1
                                                                                                                                                     
                                                                                                                                                 }
                                                                                                                                                 else 
                                                                                                                                                 {
                                                                                                                                                      skip 
                                                                                                                                                 };
                                                                                                                                                 if(strcmp(&eval_token[eval_itoken,0],"tether")=0) then 
                                                                                                                                                 {
                                                                                                                                                     forces[nused]:=f_tether;
                                                                                                                                                     potentials[nused]:=v_tether;
                                                                                                                                                     nused:=nused+1
                                                                                                                                                     
                                                                                                                                                 }
                                                                                                                                                 else 
                                                                                                                                                 {
                                                                                                                                                      skip 
                                                                                                                                                 };
                                                                                                                                                 if(strcmp(&eval_token[eval_itoken,0],"hotether")=0) then 
                                                                                                                                                 {
                                                                                                                                                     forces[nused]:=f_ho_tether;
                                                                                                                                                     potentials[nused]:=v_ho_tether;
                                                                                                                                                     nused:=nused+1
                                                                                                                                                     
                                                                                                                                                 }
                                                                                                                                                 else 
                                                                                                                                                 {
                                                                                                                                                      skip 
                                                                                                                                                 };
                                                                                                                                                 if(strcmp(&eval_token[eval_itoken,0],"restrain")=0) then 
                                                                                                                                                 {
                                                                                                                                                     forces[nused]:=f_restrain;
                                                                                                                                                     potentials[nused]:=v_restrain;
                                                                                                                                                     nused:=nused+1
                                                                                                                                                     
                                                                                                                                                 }
                                                                                                                                                 else 
                                                                                                                                                 {
                                                                                                                                                      skip 
                                                                                                                                                 };
                                                                                                                                                 if(strcmp(&eval_token[eval_itoken,0],"angle")=0) then 
                                                                                                                                                 {
                                                                                                                                                     forces[nused]:=f_angle;
                                                                                                                                                     potentials[nused]:=v_angle;
                                                                                                                                                     nused:=nused+1
                                                                                                                                                     
                                                                                                                                                 }
                                                                                                                                                 else 
                                                                                                                                                 {
                                                                                                                                                      skip 
                                                                                                                                                 };
                                                                                                                                                 if(strcmp(&eval_token[eval_itoken,0],"hoangle")=0) then 
                                                                                                                                                 {
                                                                                                                                                     forces[nused]:=f_ho_angle;
                                                                                                                                                     potentials[nused]:=v_ho_angle;
                                                                                                                                                     nused:=nused+1
                                                                                                                                                     
                                                                                                                                                 }
                                                                                                                                                 else 
                                                                                                                                                 {
                                                                                                                                                      skip 
                                                                                                                                                 };
                                                                                                                                                 if(strcmp(&eval_token[eval_itoken,0],"mmangle")=0) then 
                                                                                                                                                 {
                                                                                                                                                     forces[nused]:=f_mmangle;
                                                                                                                                                     potentials[nused]:=v_mmangle;
                                                                                                                                                     nused:=nused+1
                                                                                                                                                     
                                                                                                                                                 }
                                                                                                                                                 else 
                                                                                                                                                 {
                                                                                                                                                      skip 
                                                                                                                                                 };
                                                                                                                                                 if(strcmp(&eval_token[eval_itoken,0],"cangle")=0) then 
                                                                                                                                                 {
                                                                                                                                                     forces[nused]:=f_c_angle;
                                                                                                                                                     potentials[nused]:=v_c_angle;
                                                                                                                                                     nused:=nused+1
                                                                                                                                                     
                                                                                                                                                 }
                                                                                                                                                 else 
                                                                                                                                                 {
                                                                                                                                                      skip 
                                                                                                                                                 };
                                                                                                                                                 if(strcmp(&eval_token[eval_itoken,0],"torsion")=0) then 
                                                                                                                                                 {
                                                                                                                                                     forces[nused]:=f_torsion;
                                                                                                                                                     potentials[nused]:=v_torsion;
                                                                                                                                                     nused:=nused+1
                                                                                                                                                     
                                                                                                                                                 }
                                                                                                                                                 else 
                                                                                                                                                 {
                                                                                                                                                      skip 
                                                                                                                                                 };
                                                                                                                                                 if(strcmp(&eval_token[eval_itoken,0],"hybrid")=0) then 
                                                                                                                                                 {
                                                                                                                                                     forces[nused]:=f_hybrid;
                                                                                                                                                     potentials[nused]:=v_hybrid;
                                                                                                                                                     nused:=nused+1
                                                                                                                                                     
                                                                                                                                                 }
                                                                                                                                                 else 
                                                                                                                                                 {
                                                                                                                                                      skip 
                                                                                                                                                 };
                                                                                                                                                 if(strcmp(&eval_token[eval_itoken,0],"honoel")=0) then 
                                                                                                                                                 {
                                                                                                                                                     forces[nused]:=f_ho_noel;
                                                                                                                                                     potentials[nused]:=v_ho_noel;
                                                                                                                                                     nused:=nused+1
                                                                                                                                                     
                                                                                                                                                 }
                                                                                                                                                 else 
                                                                                                                                                 {
                                                                                                                                                      skip 
                                                                                                                                                 };
                                                                                                                                                 if(strcmp(&eval_token[eval_itoken,0],"noel")=0) then 
                                                                                                                                                 {
                                                                                                                                                     forces[nused]:=f_noel;
                                                                                                                                                     potentials[nused]:=v_noel;
                                                                                                                                                     nused:=nused+1
                                                                                                                                                     
                                                                                                                                                 }
                                                                                                                                                 else 
                                                                                                                                                 {
                                                                                                                                                      skip 
                                                                                                                                                 };
                                                                                                                                                 if(strcmp(&eval_token[eval_itoken,0],"box")=0) then 
                                                                                                                                                 {
                                                                                                                                                     forces[nused]:=f_box;
                                                                                                                                                     potentials[nused]:=v_box;
                                                                                                                                                     nused:=nused+1
                                                                                                                                                     
                                                                                                                                                 }
                                                                                                                                                 else 
                                                                                                                                                 {
                                                                                                                                                      skip 
                                                                                                                                                 };
                                                                                                                                                 eval_itoken:=eval_itoken+1
                                                                                                                                             }
                                                                                                                                             else
                                                                                                                                             {
                                                                                                                                                 skip
                                                                                                                                             }
                                                                                                                                             
                                                                                                                                         };
                                                                                                                                         if(return=0)   then 
                                                                                                                                         {
                                                                                                                                             return<==1 and RValue:=1;
                                                                                                                                             skip
                                                                                                                                         }
                                                                                                                                         else
                                                                                                                                         {
                                                                                                                                             skip
                                                                                                                                         }
                                                                                                                                         
                                                                                                                                     }
                                                                                                                                     else 
                                                                                                                                     {
                                                                                                                                          skip 
                                                                                                                                     };
                                                                                                                                     if(return=0)  then
                                                                                                                                     {
                                                                                                                                         if(return=0)   then 
                                                                                                                                         {
                                                                                                                                             if(strcmp(&eval_token[0,0],"close")=0) then 
                                                                                                                                             {
                                                                                                                                                 //if(op!=stdout) then 
																																				 if(1) then
                                                                                                                                                 {
                                                                                                                                                     fclose(op) and skip;
                                                                                                                                                     return<==1 and RValue:=-1;
                                                                                                                                                     skip
                                                                                                                                                     
                                                                                                                                                 }
                                                                                                                                                 else 
                                                                                                                                                 {
                                                                                                                                                      skip 
                                                                                                                                                 };
                                                                                                                                                 if(return=0)   then 
                                                                                                                                                 {
                                                                                                                                                     return<==1 and RValue:=1;
                                                                                                                                                     skip
                                                                                                                                                 }
                                                                                                                                                 else
                                                                                                                                                 {
                                                                                                                                                     skip
                                                                                                                                                 }
                                                                                                                                                 
                                                                                                                                             }
                                                                                                                                             else 
                                                                                                                                             {
                                                                                                                                                  skip 
                                                                                                                                             };
                                                                                                                                             if(return=0)  then
                                                                                                                                             {
                                                                                                                                                 if(return=0)   then 
                                                                                                                                                 {
                                                                                                                                                     if(strcmp(&eval_token[0,0],"seti")=0) then 
                                                                                                                                                     {
                                                                                                                                                         if(eval_token[1,0]='\0') then 
                                                                                                                                                         {
                                                                                                                                                             aaerror("seti requires a variable name: seti <name> value",RValue);
                                                                                                                                                             return<==1 and RValue:=1;
                                                                                                                                                             skip
                                                                                                                                                             
                                                                                                                                                         }
                                                                                                                                                         else 
                                                                                                                                                         {
                                                                                                                                                              skip 
                                                                                                                                                         };
                                                                                                                                                         if(return=0)   then 
                                                                                                                                                         {
                                                                                                                                                             set_i_variable(&eval_token[1,0],eval_itemp[2],RValue);
                                                                                                                                                             return<==1 and RValue:=1;
                                                                                                                                                             skip
                                                                                                                                                         }
                                                                                                                                                         else
                                                                                                                                                         {
                                                                                                                                                             skip
                                                                                                                                                         }
                                                                                                                                                         
                                                                                                                                                     }
                                                                                                                                                     else 
                                                                                                                                                     {
                                                                                                                                                          skip 
                                                                                                                                                     };
                                                                                                                                                     if(return=0)  then
                                                                                                                                                     {
                                                                                                                                                         if(return=0)   then 
                                                                                                                                                         {
                                                                                                                                                             if(strcmp(&eval_token[0,0],"setf")=0) then 
                                                                                                                                                             {
                                                                                                                                                                 if(eval_token[1,0]='\0') then 
                                                                                                                                                                 {
                                                                                                                                                                     aaerror("setf requires a variable name: setf <name> value",RValue);
                                                                                                                                                                     return<==1 and RValue:=1;
                                                                                                                                                                     skip
                                                                                                                                                                     
                                                                                                                                                                 }
                                                                                                                                                                 else 
                                                                                                                                                                 {
                                                                                                                                                                      skip 
                                                                                                                                                                 };
                                                                                                                                                                 if(return=0)   then 
                                                                                                                                                                 {
                                                                                                                                                                     set_f_variable(&eval_token[1,0],eval_ftemp[2],RValue);
                                                                                                                                                                     return<==1 and RValue:=1;
                                                                                                                                                                     skip
                                                                                                                                                                 }
                                                                                                                                                                 else
                                                                                                                                                                 {
                                                                                                                                                                     skip
                                                                                                                                                                 }
                                                                                                                                                                 
                                                                                                                                                             }
                                                                                                                                                             else 
                                                                                                                                                             {
                                                                                                                                                                  skip 
                                                                                                                                                             };
                                                                                                                                                             if(return=0)  then
                                                                                                                                                             {
                                                                                                                                                                 if(return=0)   then 
                                                                                                                                                                 {
                                                                                                                                                                     if((extern math(eval_token,eval_ftemp,eval_itemp,ip,op,eval_echo,RValue))>0) then 
                                                                                                                                                                     {
                                                                                                                                                                         return<==1 and RValue:=1;
                                                                                                                                                                         skip
                                                                                                                                                                     }
                                                                                                                                                                     else 
                                                                                                                                                                     {
                                                                                                                                                                          skip 
                                                                                                                                                                     };
                                                                                                                                                                     if(return=0)   then 
                                                                                                                                                                     {
                                                                                                                                                                         if(strcmp(&eval_token[0,0],"v_maxwell")=0) then 
                                                                                                                                                                         {
                                                                                                                                                                             v_maxwell(eval_ftemp[1],eval_ftemp[2],eval_ftemp[3],eval_ftemp[4],RValue);
                                                                                                                                                                             return<==1 and RValue:=1;
                                                                                                                                                                             skip
                                                                                                                                                                             
                                                                                                                                                                         }
                                                                                                                                                                         else 
                                                                                                                                                                         {
                                                                                                                                                                              skip 
                                                                                                                                                                         };
                                                                                                                                                                         if(return=0)   then 
                                                                                                                                                                         {
                                                                                                                                                                             if(strcmp(&eval_token[0,0],"v_rescale")=0) then 
                                                                                                                                                                             {
                                                                                                                                                                                 v_rescale(eval_ftemp[1],RValue);
                                                                                                                                                                                 return<==1 and RValue:=1;
                                                                                                                                                                                 skip
                                                                                                                                                                                 
                                                                                                                                                                             }
                                                                                                                                                                             else 
                                                                                                                                                                             {
                                                                                                                                                                                  skip 
                                                                                                                                                                             };
                                                                                                                                                                             if(return=0)   then 
                                                                                                                                                                             {
                                                                                                                                                                                 if(strcmp(&eval_token[0,0],"verlet")=0) then 
                                                                                                                                                                                 {
                                                                                                                                                                                     verlet(forces,nused,eval_itemp[1],eval_ftemp[2],RValue);
                                                                                                                                                                                     return<==1 and RValue:=1;
                                                                                                                                                                                     skip
                                                                                                                                                                                     
                                                                                                                                                                                 }
                                                                                                                                                                                 else 
                                                                                                                                                                                 {
                                                                                                                                                                                      skip 
                                                                                                                                                                                 };
                                                                                                                                                                                 if(return=0)   then 
                                                                                                                                                                                 {
                                                                                                                                                                                     if(strcmp(&eval_token[0,0],"pac")=0) then 
                                                                                                                                                                                     {
                                                                                                                                                                                         pac(forces,nused,eval_itemp[1],eval_ftemp[2],RValue);
                                                                                                                                                                                         return<==1 and RValue:=1;
                                                                                                                                                                                         skip
                                                                                                                                                                                         
                                                                                                                                                                                     }
                                                                                                                                                                                     else 
                                                                                                                                                                                     {
                                                                                                                                                                                          skip 
                                                                                                                                                                                     };
                                                                                                                                                                                     if(return=0)   then 
                                                                                                                                                                                     {
                                                                                                                                                                                         if(strcmp(&eval_token[0,0],"tpac")=0) then 
                                                                                                                                                                                         {
                                                                                                                                                                                             tpac(forces,nused,eval_itemp[1],eval_ftemp[2],eval_ftemp[3],RValue);
                                                                                                                                                                                             return<==1 and RValue:=1;
                                                                                                                                                                                             skip
                                                                                                                                                                                             
                                                                                                                                                                                         }
                                                                                                                                                                                         else 
                                                                                                                                                                                         {
                                                                                                                                                                                              skip 
                                                                                                                                                                                         };
                                                                                                                                                                                         if(return=0)   then 
                                                                                                                                                                                         {
                                                                                                                                                                                             if(strcmp(&eval_token[0,0],"ppac")=0) then 
                                                                                                                                                                                             {
                                                                                                                                                                                                 ppac(forces,nused,eval_itemp[1],eval_ftemp[2],eval_ftemp[3],RValue);
                                                                                                                                                                                                 return<==1 and RValue:=1;
                                                                                                                                                                                                 skip
                                                                                                                                                                                                 
                                                                                                                                                                                             }
                                                                                                                                                                                             else 
                                                                                                                                                                                             {
                                                                                                                                                                                                  skip 
                                                                                                                                                                                             };
                                                                                                                                                                                             if(return=0)   then 
                                                                                                                                                                                             {
                                                                                                                                                                                                 if(strcmp(&eval_token[0,0],"ptpac")=0) then 
                                                                                                                                                                                                 {
                                                                                                                                                                                                     ptpac(forces,nused,eval_itemp[1],eval_ftemp[2],eval_ftemp[3],eval_ftemp[4],RValue);
                                                                                                                                                                                                     return<==1 and RValue:=1;
                                                                                                                                                                                                     skip
                                                                                                                                                                                                     
                                                                                                                                                                                                 }
                                                                                                                                                                                                 else 
                                                                                                                                                                                                 {
                                                                                                                                                                                                      skip 
                                                                                                                                                                                                 };
                                                                                                                                                                                                 if(return=0)   then 
                                                                                                                                                                                                 {
                                                                                                                                                                                                     if(strcmp(&eval_token[0,0],"hpac")=0) then 
                                                                                                                                                                                                     {
                                                                                                                                                                                                         hpac(forces,potentials,nused,eval_itemp[1],eval_ftemp[2],eval_ftemp[3],RValue);
                                                                                                                                                                                                         return<==1 and RValue:=1;
                                                                                                                                                                                                         skip
                                                                                                                                                                                                         
                                                                                                                                                                                                     }
                                                                                                                                                                                                     else 
                                                                                                                                                                                                     {
                                                                                                                                                                                                          skip 
                                                                                                                                                                                                     };
                                                                                                                                                                                                     if(return=0)   then 
                                                                                                                                                                                                     {
                                                                                                                                                                                                         if(strcmp(&eval_token[0,0],"pacpac")=0) then 
                                                                                                                                                                                                         {
                                                                                                                                                                                                             pacpac(forces,nused,eval_itemp[1],eval_ftemp[2],RValue);
                                                                                                                                                                                                             return<==1 and RValue:=1;
                                                                                                                                                                                                             skip
                                                                                                                                                                                                             
                                                                                                                                                                                                         }
                                                                                                                                                                                                         else 
                                                                                                                                                                                                         {
                                                                                                                                                                                                              skip 
                                                                                                                                                                                                         };
                                                                                                                                                                                                         if(return=0)   then 
                                                                                                                                                                                                         {
                                                                                                                                                                                                             if(strcmp(&eval_token[0,0],"steep")=0) then 
                                                                                                                                                                                                             {
                                                                                                                                                                                                                 if(nused<=0) then 
                                                                                                                                                                                                                 {
                                                                                                                                                                                                                     return<==1 and RValue:=1;
                                                                                                                                                                                                                     skip
                                                                                                                                                                                                                 }
                                                                                                                                                                                                                 else 
                                                                                                                                                                                                                 {
                                                                                                                                                                                                                      skip 
                                                                                                                                                                                                                 };
                                                                                                                                                                                                                 if(return=0)   then 
                                                                                                                                                                                                                 {
                                                                                                                                                                                                                     steep(potentials,forces,nused,eval_itemp[1],eval_ftemp[2],RValue);
                                                                                                                                                                                                                     return<==1 and RValue:=1;
                                                                                                                                                                                                                     skip
                                                                                                                                                                                                                 }
                                                                                                                                                                                                                 else
                                                                                                                                                                                                                 {
                                                                                                                                                                                                                     skip
                                                                                                                                                                                                                 }
                                                                                                                                                                                                                 
                                                                                                                                                                                                             }
                                                                                                                                                                                                             else 
                                                                                                                                                                                                             {
                                                                                                                                                                                                                  skip 
                                                                                                                                                                                                             };
                                                                                                                                                                                                             if(return=0)  then
                                                                                                                                                                                                             {
                                                                                                                                                                                                                 if(return=0)   then 
                                                                                                                                                                                                                 {
                                                                                                                                                                                                                     if(strcmp(&eval_token[0,0],"gsdg")=0) then 
                                                                                                                                                                                                                     {
                                                                                                                                                                                                                         if(nused<=0) then 
                                                                                                                                                                                                                         {
                                                                                                                                                                                                                             return<==1 and RValue:=1;
                                                                                                                                                                                                                             skip
                                                                                                                                                                                                                         }
                                                                                                                                                                                                                         else 
                                                                                                                                                                                                                         {
                                                                                                                                                                                                                              skip 
                                                                                                                                                                                                                         };
                                                                                                                                                                                                                         if(return=0)   then 
                                                                                                                                                                                                                         {
                                                                                                                                                                                                                             gsdg(potentials,nused,eval_itemp[1],eval_itemp[2],eval_itemp[3],RValue);
                                                                                                                                                                                                                             return<==1 and RValue:=1;
                                                                                                                                                                                                                             skip
                                                                                                                                                                                                                         }
                                                                                                                                                                                                                         else
                                                                                                                                                                                                                         {
                                                                                                                                                                                                                             skip
                                                                                                                                                                                                                         }
                                                                                                                                                                                                                         
                                                                                                                                                                                                                     }
                                                                                                                                                                                                                     else 
                                                                                                                                                                                                                     {
                                                                                                                                                                                                                          skip 
                                                                                                                                                                                                                     };
                                                                                                                                                                                                                     if(return=0)  then
                                                                                                                                                                                                                     {
                                                                                                                                                                                                                         if(return=0)   then 
                                                                                                                                                                                                                         {
                                                                                                                                                                                                                             if(strcmp(&eval_token[0,0],"cngdel")=0) then 
                                                                                                                                                                                                                             {
                                                                                                                                                                                                                                 if(nused<=0) then 
                                                                                                                                                                                                                                 {
                                                                                                                                                                                                                                     return<==1 and RValue:=1;
                                                                                                                                                                                                                                     skip
                                                                                                                                                                                                                                 }
                                                                                                                                                                                                                                 else 
                                                                                                                                                                                                                                 {
                                                                                                                                                                                                                                      skip 
                                                                                                                                                                                                                                 };
                                                                                                                                                                                                                                 if(return=0)   then 
                                                                                                                                                                                                                                 {
                                                                                                                                                                                                                                     cngdel(potentials,forces,nused,eval_itemp[1],eval_itemp[2],eval_ftemp[3],eval_echo,RValue);
                                                                                                                                                                                                                                     return<==1 and RValue:=1;
                                                                                                                                                                                                                                     skip
                                                                                                                                                                                                                                 }
                                                                                                                                                                                                                                 else
                                                                                                                                                                                                                                 {
                                                                                                                                                                                                                                     skip
                                                                                                                                                                                                                                 }
                                                                                                                                                                                                                                 
                                                                                                                                                                                                                             }
                                                                                                                                                                                                                             else 
                                                                                                                                                                                                                             {
                                                                                                                                                                                                                                  skip 
                                                                                                                                                                                                                             };
                                                                                                                                                                                                                             if(return=0)  then
                                                                                                                                                                                                                             {
                                                                                                                                                                                                                                 if(return=0)   then 
                                                                                                                                                                                                                                 {
                                                                                                                                                                                                                                     if(strcmp(&eval_token[0,0],"time")=0) then 
                                                                                                                                                                                                                                     {
                                                                                                                                                                                                                                         int eval_134_temp$_1 and skip;
                                                                                                                                                                                                                                         eval_134_temp$_1:=clock(RValue);
                                                                                                                                                                                                                                         //fprintf(op," %f CPU \n",((float)eval_134_temp$_1)/ CLOCKS_PER_SEC,RValue) and skip;
																																																										 fprintf(op," %f CPU \n",((float)eval_134_temp$_1)/1000,RValue) and skip;
                                                                                                                                                                                                                                         return<==1 and RValue:=1;
                                                                                                                                                                                                                                         skip
                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                     }
                                                                                                                                                                                                                                     else 
                                                                                                                                                                                                                                     {
                                                                                                                                                                                                                                          skip 
                                                                                                                                                                                                                                     };
                                                                                                                                                                                                                                     if(return=0)   then 
                                                                                                                                                                                                                                     {
                                                                                                                                                                                                                                         if(strcmp(&eval_token[0,0],"echo")=0) then 
                                                                                                                                                                                                                                         {
                                                                                                                                                                                                                                             eval_echo:=1;
                                                                                                                                                                                                                                             if(strcmp(&eval_token[1,0],"off")=0) then 
                                                                                                                                                                                                                                             {
                                                                                                                                                                                                                                                 eval_echo:=0
                                                                                                                                                                                                                                             }
                                                                                                                                                                                                                                             else 
                                                                                                                                                                                                                                             {
                                                                                                                                                                                                                                                  skip 
                                                                                                                                                                                                                                             };
                                                                                                                                                                                                                                             return<==1 and RValue:=1;
                                                                                                                                                                                                                                             skip
                                                                                                                                                                                                                                             
                                                                                                                                                                                                                                         }
                                                                                                                                                                                                                                         else 
                                                                                                                                                                                                                                         {
                                                                                                                                                                                                                                              skip 
                                                                                                                                                                                                                                         };
                                                                                                                                                                                                                                         if(return=0)   then 
                                                                                                                                                                                                                                         {
                                                                                                                                                                                                                                             if(strcmp(&eval_token[0,0],"exit")=0) then 
                                                                                                                                                                                                                                             {
                                                                                                                                                                                                                                                 exit(0) and skip 
                                                                                                                                                                                                                                             }
                                                                                                                                                                                                                                             else 
                                                                                                                                                                                                                                             {
                                                                                                                                                                                                                                                  skip 
                                                                                                                                                                                                                                             };
                                                                                                                                                                                                                                             if(strcmp(&eval_token[0,0],"loopi")=0) then 
                                                                                                                                                                                                                                             {
                                                                                                                                                                                                                                                 if(eval_token[1,0]='\0') then 
                                                                                                                                                                                                                                                 {
                                                                                                                                                                                                                                                     aaerror(" must have a label to loop to ",RValue);
                                                                                                                                                                                                                                                     return<==1 and RValue:=1;
                                                                                                                                                                                                                                                     skip
                                                                                                                                                                                                                                                     
                                                                                                                                                                                                                                                 }
                                                                                                                                                                                                                                                 else 
                                                                                                                                                                                                                                                 {
                                                                                                                                                                                                                                                      skip 
                                                                                                                                                                                                                                                 };
                                                                                                                                                                                                                                                 if(return=0)   then 
                                                                                                                                                                                                                                                 {
                                                                                                                                                                                                                                                     if(eval_itemp[4]=0) then 
                                                                                                                                                                                                                                                     {
                                                                                                                                                                                                                                                         eval_itemp[4]:=1
                                                                                                                                                                                                                                                     }
                                                                                                                                                                                                                                                     else 
                                                                                                                                                                                                                                                     {
                                                                                                                                                                                                                                                          skip 
                                                                                                                                                                                                                                                     };
                                                                                                                                                                                                                                                     eval_newfile:=tmpfile(RValue);
                                                                                                                                                                                                                                                     if(eval_newfile=NULL) then 
                                                                                                                                                                                                                                                     {
                                                                                                                                                                                                                                                         aaerror(" cannot open temporary file in loopi",RValue);
                                                                                                                                                                                                                                                         return<==1 and RValue:=1;
                                                                                                                                                                                                                                                         skip
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                     }
                                                                                                                                                                                                                                                     else 
                                                                                                                                                                                                                                                     {
                                                                                                                                                                                                                                                          skip 
                                                                                                                                                                                                                                                     };
                                                                                                                                                                                                                                                     if(return=0)   then 
                                                                                                                                                                                                                                                     {
                                                                                                                                                                                                                                                         loadloop(ip,eval_newfile,&eval_token[1,0],RValue);
                                                                                                                                                                                                                                                         if(eval_itemp[4]>0) then 
                                                                                                                                                                                                                                                         {
                                                                                                                                                                                                                                                             eval_itemp[0]:=eval_itemp[2];
                                                                                                                                                                                                                                                             
                                                                                                                                                                                                                                                             while(eval_itemp[0]<eval_itemp[3])
                                                                                                                                                                                                                                                             {
                                                                                                                                                                                                                                                                 eval_inloop:=-1;
                                                                                                                                                                                                                                                                 if(extern tisvariable(&eval_token[2,0],RValue)) then 
                                                                                                                                                                                                                                                                 {
                                                                                                                                                                                                                                                                     set_i_variable(&eval_token[2,0],eval_itemp[0],RValue)
                                                                                                                                                                                                                                                                 }
                                                                                                                                                                                                                                                                 else 
                                                                                                                                                                                                                                                                 {
                                                                                                                                                                                                                                                                      skip 
                                                                                                                                                                                                                                                                 };
                                                                                                                                                                                                                                                                 rewind(eval_newfile,RValue) and skip;
                                                                                                                                                                                                                                                                 read_eval_do(eval_newfile,op);
                                                                                                                                                                                                                                                                 eval_itemp[0]:=eval_itemp[0]+eval_itemp[4]
                                                                                                                                                                                                                                                                 
                                                                                                                                                                                                                                                             }
                                                                                                                                                                                                                                                             
                                                                                                                                                                                                                                                         }
                                                                                                                                                                                                                                                         else
                                                                                                                                                                                                                                                         {
                                                                                                                                                                                                                                                             eval_itemp[0]:=eval_itemp[2];
                                                                                                                                                                                                                                                             
                                                                                                                                                                                                                                                             while(eval_itemp[0]<eval_itemp[3])
                                                                                                                                                                                                                                                             {
                                                                                                                                                                                                                                                                 eval_inloop:=-1;
                                                                                                                                                                                                                                                                 if(extern tisvariable(&eval_token[2,0],RValue)) then 
                                                                                                                                                                                                                                                                 {
                                                                                                                                                                                                                                                                     set_i_variable(&eval_token[2,0],eval_itemp[0],RValue)
                                                                                                                                                                                                                                                                 }
                                                                                                                                                                                                                                                                 else 
                                                                                                                                                                                                                                                                 {
                                                                                                                                                                                                                                                                      skip 
                                                                                                                                                                                                                                                                 };
                                                                                                                                                                                                                                                                 rewind(eval_newfile,RValue) and skip;
                                                                                                                                                                                                                                                                 read_eval_do(eval_newfile,op);
                                                                                                                                                                                                                                                                 eval_itemp[0]:=eval_itemp[0]+eval_itemp[4]
                                                                                                                                                                                                                                                                 
                                                                                                                                                                                                                                                             }
                                                                                                                                                                                                                                                         };
                                                                                                                                                                                                                                                         eval_inloop:=1;
                                                                                                                                                                                                                                                         fclose(eval_newfile) and skip;
                                                                                                                                                                                                                                                         return<==1 and RValue:=1;
                                                                                                                                                                                                                                                         skip
                                                                                                                                                                                                                                                     }
                                                                                                                                                                                                                                                     else
                                                                                                                                                                                                                                                     {
                                                                                                                                                                                                                                                         skip
                                                                                                                                                                                                                                                     }
                                                                                                                                                                                                                                                 }
                                                                                                                                                                                                                                                 else
                                                                                                                                                                                                                                                 {
                                                                                                                                                                                                                                                     skip
                                                                                                                                                                                                                                                 }
                                                                                                                                                                                                                                                 
                                                                                                                                                                                                                                             }
                                                                                                                                                                                                                                             else 
                                                                                                                                                                                                                                             {
                                                                                                                                                                                                                                                  skip 
                                                                                                                                                                                                                                             };
                                                                                                                                                                                                                                             if(return=0)  then
                                                                                                                                                                                                                                             {
                                                                                                                                                                                                                                                 if(return=0)   then 
                                                                                                                                                                                                                                                 {
                                                                                                                                                                                                                                                     if(strcmp(&eval_token[0,0],"loopf")=0) then 
                                                                                                                                                                                                                                                     {
                                                                                                                                                                                                                                                         if(eval_token[1,0]='\0') then 
                                                                                                                                                                                                                                                         {
                                                                                                                                                                                                                                                             aaerror(" must have a label to loop to ",RValue);
                                                                                                                                                                                                                                                             return<==1 and RValue:=1;
                                                                                                                                                                                                                                                             skip
                                                                                                                                                                                                                                                             
                                                                                                                                                                                                                                                         }
                                                                                                                                                                                                                                                         else 
                                                                                                                                                                                                                                                         {
                                                                                                                                                                                                                                                              skip 
                                                                                                                                                                                                                                                         };
                                                                                                                                                                                                                                                         if(return=0)   then 
                                                                                                                                                                                                                                                         {
                                                                                                                                                                                                                                                             if(eval_ftemp[4]=0.0) then 
                                                                                                                                                                                                                                                             {
                                                                                                                                                                                                                                                                 eval_ftemp[4]:=1.0
                                                                                                                                                                                                                                                             }
                                                                                                                                                                                                                                                             else 
                                                                                                                                                                                                                                                             {
                                                                                                                                                                                                                                                                  skip 
                                                                                                                                                                                                                                                             };
                                                                                                                                                                                                                                                             eval_newfile:=tmpfile(RValue);
                                                                                                                                                                                                                                                             if(eval_newfile=NULL) then 
                                                                                                                                                                                                                                                             {
                                                                                                                                                                                                                                                                 aaerror(" cannot open temporary file in loopi",RValue);
                                                                                                                                                                                                                                                                 return<==1 and RValue:=1;
                                                                                                                                                                                                                                                                 skip
                                                                                                                                                                                                                                                                 
                                                                                                                                                                                                                                                             }
                                                                                                                                                                                                                                                             else 
                                                                                                                                                                                                                                                             {
                                                                                                                                                                                                                                                                  skip 
                                                                                                                                                                                                                                                             };
                                                                                                                                                                                                                                                             if(return=0)   then 
                                                                                                                                                                                                                                                             {
                                                                                                                                                                                                                                                                 loadloop(ip,eval_newfile,&eval_token[1,0],RValue);
                                                                                                                                                                                                                                                                 if(eval_ftemp[4]>0.0) then 
                                                                                                                                                                                                                                                                 {
                                                                                                                                                                                                                                                                     eval_ftemp[0]:=eval_ftemp[2];
                                                                                                                                                                                                                                                                     
                                                                                                                                                                                                                                                                     while(eval_ftemp[0]<eval_ftemp[3])
                                                                                                                                                                                                                                                                     {
                                                                                                                                                                                                                                                                         eval_inloop:=-1;
                                                                                                                                                                                                                                                                         if(extern tisvariable(&eval_token[2,0],RValue)) then 
                                                                                                                                                                                                                                                                         {
                                                                                                                                                                                                                                                                             set_f_variable(&eval_token[2,0],eval_ftemp[0],RValue)
                                                                                                                                                                                                                                                                         }
                                                                                                                                                                                                                                                                         else 
                                                                                                                                                                                                                                                                         {
                                                                                                                                                                                                                                                                              skip 
                                                                                                                                                                                                                                                                         };
                                                                                                                                                                                                                                                                         rewind(eval_newfile,RValue) and skip;
                                                                                                                                                                                                                                                                         read_eval_do(eval_newfile,op);
                                                                                                                                                                                                                                                                         eval_ftemp[0]:=eval_ftemp[0]+eval_ftemp[4]
                                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                                     }
                                                                                                                                                                                                                                                                     
                                                                                                                                                                                                                                                                 }
                                                                                                                                                                                                                                                                 else
                                                                                                                                                                                                                                                                 {
                                                                                                                                                                                                                                                                     eval_ftemp[0]:=eval_ftemp[2];
                                                                                                                                                                                                                                                                     
                                                                                                                                                                                                                                                                     while(eval_ftemp[0]>eval_ftemp[3])
                                                                                                                                                                                                                                                                     {
                                                                                                                                                                                                                                                                         eval_inloop:=-1;
                                                                                                                                                                                                                                                                         if(extern tisvariable(&eval_token[2,0],RValue)) then 
                                                                                                                                                                                                                                                                         {
                                                                                                                                                                                                                                                                             set_f_variable(&eval_token[2,0],eval_ftemp[0],RValue)
                                                                                                                                                                                                                                                                         }
                                                                                                                                                                                                                                                                         else 
                                                                                                                                                                                                                                                                         {
                                                                                                                                                                                                                                                                              skip 
                                                                                                                                                                                                                                                                         };
                                                                                                                                                                                                                                                                         rewind(eval_newfile,RValue) and skip;
                                                                                                                                                                                                                                                                         read_eval_do(eval_newfile,op);
                                                                                                                                                                                                                                                                         eval_ftemp[0]:=eval_ftemp[0]+eval_ftemp[4]
                                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                                     }
                                                                                                                                                                                                                                                                 };
                                                                                                                                                                                                                                                                 eval_inloop:=1;
                                                                                                                                                                                                                                                                 return<==1 and RValue:=1;
                                                                                                                                                                                                                                                                 skip
                                                                                                                                                                                                                                                             }
                                                                                                                                                                                                                                                             else
                                                                                                                                                                                                                                                             {
                                                                                                                                                                                                                                                                 skip
                                                                                                                                                                                                                                                             }
                                                                                                                                                                                                                                                         }
                                                                                                                                                                                                                                                         else
                                                                                                                                                                                                                                                         {
                                                                                                                                                                                                                                                             skip
                                                                                                                                                                                                                                                         }
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                     }
                                                                                                                                                                                                                                                     else 
                                                                                                                                                                                                                                                     {
                                                                                                                                                                                                                                                          skip 
                                                                                                                                                                                                                                                     };
                                                                                                                                                                                                                                                     if(return=0)  then
                                                                                                                                                                                                                                                     {
                                                                                                                                                                                                                                                         if(return=0)   then 
                                                                                                                                                                                                                                                         {
                                                                                                                                                                                                                                                             break$<==0 and skip;
                                                                                                                                                                                                                                                             eval_itemp[0]:=0;
                                                                                                                                                                                                                                                             
                                                                                                                                                                                                                                                             while( return=0 AND   break$=0 AND  eval_itemp[0]<80)
                                                                                                                                                                                                                                                             {
                                                                                                                                                                                                                                                                 if(eval_token[0,eval_itemp[0]]='\0' OR eval_token[0,eval_itemp[0]]=' ') then 
                                                                                                                                                                                                                                                                 {
                                                                                                                                                                                                                                                                     if(eval_itemp[0]=0) then 
                                                                                                                                                                                                                                                                     {
                                                                                                                                                                                                                                                                         break$<==1 and skip
                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                     else 
                                                                                                                                                                                                                                                                     {
                                                                                                                                                                                                                                                                          skip 
                                                                                                                                                                                                                                                                     };
                                                                                                                                                                                                                                                                     if(break$=0)   then
                                                                                                                                                                                                                                                                     {
                                                                                                                                                                                                                                                                         if(eval_token[0,eval_itemp[0]-1]=':') then 
                                                                                                                                                                                                                                                                         {
                                                                                                                                                                                                                                                                             return<==1 and RValue:=eval_inloop;
                                                                                                                                                                                                                                                                             skip
                                                                                                                                                                                                                                                                         }
                                                                                                                                                                                                                                                                         else 
                                                                                                                                                                                                                                                                         {
                                                                                                                                                                                                                                                                              skip 
                                                                                                                                                                                                                                                                         }
                                                                                                                                                                                                                                                                     }
                                                                                                                                                                                                                                                                     else
                                                                                                                                                                                                                                                                     {
                                                                                                                                                                                                                                                                         skip
                                                                                                                                                                                                                                                                     }
                                                                                                                                                                                                                                                                     
                                                                                                                                                                                                                                                                 }
                                                                                                                                                                                                                                                                 else 
                                                                                                                                                                                                                                                                 {
                                                                                                                                                                                                                                                                      skip 
                                                                                                                                                                                                                                                                 };
                                                                                                                                                                                                                                                                 if(break$=0)   then 
                                                                                                                                                                                                                                                                 {
                                                                                                                                                                                                                                                                     if(return=0)  then
                                                                                                                                                                                                                                                                     {
                                                                                                                                                                                                                                                                         eval_itemp[0]:=eval_itemp[0]+1
                                                                                                                                                                                                                                                                     }
                                                                                                                                                                                                                                                                     else
                                                                                                                                                                                                                                                                     {
                                                                                                                                                                                                                                                                         skip
                                                                                                                                                                                                                                                                     }
                                                                                                                                                                                                                                                                 }
                                                                                                                                                                                                                                                                 else
                                                                                                                                                                                                                                                                 {
                                                                                                                                                                                                                                                                     skip
                                                                                                                                                                                                                                                                 }
                                                                                                                                                                                                                                                                 
                                                                                                                                                                                                                                                             };
                                                                                                                                                                                                                                                             break$<==0 and skip;
                                                                                                                                                                                                                                                             if(return=0)   then 
                                                                                                                                                                                                                                                             {
                                                                                                                                                                                                                                                                 sprintf(&eval_errmes[0]," unrecognized token >%s<",&eval_token[0,0],RValue) and skip;
                                                                                                                                                                                                                                                                 aaerror(eval_errmes,RValue);
                                                                                                                                                                                                                                                                 return<==1 and RValue:=1;
                                                                                                                                                                                                                                                                 skip
                                                                                                                                                                                                                                                             }
                                                                                                                                                                                                                                                             else
                                                                                                                                                                                                                                                             {
                                                                                                                                                                                                                                                                 skip
                                                                                                                                                                                                                                                             }
                                                                                                                                                                                                                                                         }
                                                                                                                                                                                                                                                         else
                                                                                                                                                                                                                                                         {
                                                                                                                                                                                                                                                             skip
                                                                                                                                                                                                                                                         }
                                                                                                                                                                                                                                                     }
                                                                                                                                                                                                                                                     else
                                                                                                                                                                                                                                                     {
                                                                                                                                                                                                                                                         skip
                                                                                                                                                                                                                                                     }
                                                                                                                                                                                                                                                 }
                                                                                                                                                                                                                                                 else
                                                                                                                                                                                                                                                 {
                                                                                                                                                                                                                                                     skip
                                                                                                                                                                                                                                                 }
                                                                                                                                                                                                                                             }
                                                                                                                                                                                                                                             else
                                                                                                                                                                                                                                             {
                                                                                                                                                                                                                                                 skip
                                                                                                                                                                                                                                             }
                                                                                                                                                                                                                                         }
                                                                                                                                                                                                                                         else
                                                                                                                                                                                                                                         {
                                                                                                                                                                                                                                             skip
                                                                                                                                                                                                                                         }
                                                                                                                                                                                                                                     }
                                                                                                                                                                                                                                     else
                                                                                                                                                                                                                                     {
                                                                                                                                                                                                                                         skip
                                                                                                                                                                                                                                     }
                                                                                                                                                                                                                                 }
                                                                                                                                                                                                                                 else
                                                                                                                                                                                                                                 {
                                                                                                                                                                                                                                     skip
                                                                                                                                                                                                                                 }
                                                                                                                                                                                                                             }
                                                                                                                                                                                                                             else
                                                                                                                                                                                                                             {
                                                                                                                                                                                                                                 skip
                                                                                                                                                                                                                             }
                                                                                                                                                                                                                         }
                                                                                                                                                                                                                         else
                                                                                                                                                                                                                         {
                                                                                                                                                                                                                             skip
                                                                                                                                                                                                                         }
                                                                                                                                                                                                                     }
                                                                                                                                                                                                                     else
                                                                                                                                                                                                                     {
                                                                                                                                                                                                                         skip
                                                                                                                                                                                                                     }
                                                                                                                                                                                                                 }
                                                                                                                                                                                                                 else
                                                                                                                                                                                                                 {
                                                                                                                                                                                                                     skip
                                                                                                                                                                                                                 }
                                                                                                                                                                                                             }
                                                                                                                                                                                                             else
                                                                                                                                                                                                             {
                                                                                                                                                                                                                 skip
                                                                                                                                                                                                             }
                                                                                                                                                                                                         }
                                                                                                                                                                                                         else
                                                                                                                                                                                                         {
                                                                                                                                                                                                             skip
                                                                                                                                                                                                         }
                                                                                                                                                                                                     }
                                                                                                                                                                                                     else
                                                                                                                                                                                                     {
                                                                                                                                                                                                         skip
                                                                                                                                                                                                     }
                                                                                                                                                                                                 }
                                                                                                                                                                                                 else
                                                                                                                                                                                                 {
                                                                                                                                                                                                     skip
                                                                                                                                                                                                 }
                                                                                                                                                                                             }
                                                                                                                                                                                             else
                                                                                                                                                                                             {
                                                                                                                                                                                                 skip
                                                                                                                                                                                             }
                                                                                                                                                                                         }
                                                                                                                                                                                         else
                                                                                                                                                                                         {
                                                                                                                                                                                             skip
                                                                                                                                                                                         }
                                                                                                                                                                                     }
                                                                                                                                                                                     else
                                                                                                                                                                                     {
                                                                                                                                                                                         skip
                                                                                                                                                                                     }
                                                                                                                                                                                 }
                                                                                                                                                                                 else
                                                                                                                                                                                 {
                                                                                                                                                                                     skip
                                                                                                                                                                                 }
                                                                                                                                                                             }
                                                                                                                                                                             else
                                                                                                                                                                             {
                                                                                                                                                                                 skip
                                                                                                                                                                             }
                                                                                                                                                                         }
                                                                                                                                                                         else
                                                                                                                                                                         {
                                                                                                                                                                             skip
                                                                                                                                                                         }
                                                                                                                                                                     }
                                                                                                                                                                     else
                                                                                                                                                                     {
                                                                                                                                                                         skip
                                                                                                                                                                     }
                                                                                                                                                                 }
                                                                                                                                                                 else
                                                                                                                                                                 {
                                                                                                                                                                     skip
                                                                                                                                                                 }
                                                                                                                                                             }
                                                                                                                                                             else
                                                                                                                                                             {
                                                                                                                                                                 skip
                                                                                                                                                             }
                                                                                                                                                         }
                                                                                                                                                         else
                                                                                                                                                         {
                                                                                                                                                             skip
                                                                                                                                                         }
                                                                                                                                                     }
                                                                                                                                                     else
                                                                                                                                                     {
                                                                                                                                                         skip
                                                                                                                                                     }
                                                                                                                                                 }
                                                                                                                                                 else
                                                                                                                                                 {
                                                                                                                                                     skip
                                                                                                                                                 }
                                                                                                                                             }
                                                                                                                                             else
                                                                                                                                             {
                                                                                                                                                 skip
                                                                                                                                             }
                                                                                                                                         }
                                                                                                                                         else
                                                                                                                                         {
                                                                                                                                             skip
                                                                                                                                         }
                                                                                                                                     }
                                                                                                                                     else
                                                                                                                                     {
                                                                                                                                         skip
                                                                                                                                     }
                                                                                                                                 }
                                                                                                                                 else
                                                                                                                                 {
                                                                                                                                     skip
                                                                                                                                 }
                                                                                                                             }
                                                                                                                             else
                                                                                                                             {
                                                                                                                                 skip
                                                                                                                             }
                                                                                                                         }
                                                                                                                         else
                                                                                                                         {
                                                                                                                             skip
                                                                                                                         }
                                                                                                                     }
                                                                                                                     else
                                                                                                                     {
                                                                                                                         skip
                                                                                                                     }
                                                                                                                 }
                                                                                                                 else
                                                                                                                 {
                                                                                                                     skip
                                                                                                                 }
                                                                                                             }
                                                                                                             else
                                                                                                             {
                                                                                                                 skip
                                                                                                             }
                                                                                                         }
                                                                                                         else
                                                                                                         {
                                                                                                             skip
                                                                                                         }
                                                                                                     }
                                                                                                     else
                                                                                                     {
                                                                                                         skip
                                                                                                     }
                                                                                                 }
                                                                                                 else
                                                                                                 {
                                                                                                     skip
                                                                                                 }
                                                                                             }
                                                                                             else
                                                                                             {
                                                                                                 skip
                                                                                             }
                                                                                         }
                                                                                         else
                                                                                         {
                                                                                             skip
                                                                                         }
                                                                                     }
                                                                                     else
                                                                                     {
                                                                                         skip
                                                                                     }
                                                                                 }
                                                                                 else
                                                                                 {
                                                                                     skip
                                                                                 }
                                                                             }
                                                                             else
                                                                             {
                                                                                 skip
                                                                             }
                                                                         }
                                                                         else
                                                                         {
                                                                             skip
                                                                         }
                                                                     }
                                                                     else
                                                                     {
                                                                         skip
                                                                     }
                                                                 }
                                                                 else
                                                                 {
                                                                     skip
                                                                 }
                                                             }
                                                             else
                                                             {
                                                                 skip
                                                             }
                                                         }
                                                         else
                                                         {
                                                             skip
                                                         }
                                                     }
                                                     else
                                                     {
                                                         skip
                                                     }
                                                 }
                                                 else
                                                 {
                                                     skip
                                                 }
                                             }
                                             else
                                             {
                                                 skip
                                             }
                                         }
                                         else
                                         {
                                             skip
                                         }
                                     }
                                     else
                                     {
                                         skip
                                     }
                                 }
                                 else
                                 {
                                     skip
                                 }
                             }
                             else
                             {
                                 skip
                             }
                         }
                         else
                         {
                             skip
                         }
                     }
                     else
                     {
                         skip
                     }
                 }
                 else
                 {
                     skip
                 }
             }
             else
             {
                 skip
             }
         }
         else
         {
             skip
         }
     }
     else
     {
         skip
     };
	 		 i:=0;
		 while(i<20)
		 {
			free(eval_token[i]) and skip;
			i:=i+1
		 }
     )
     }; 
  function aaerror ( char *line )
 {
     frame(return) and ( 
     int return<==0 and skip;
    // fprintf(stderr,"%s \n",line,RValue) and skip;
	  output(line) and skip;
      return<==1 and skip
     )
     }; 
  function tisvariable ( char *p,int RValue )
 {
     frame(return) and ( 
     int return<==0 and skip;
     if((* p!='+') AND (* p!='-') AND !(isdigit((int)* p,RValue)) AND (* p!='.')) then 
     {
         return<==1 and RValue:=1;
         skip
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         p:=p+1;
         while((* p!='\0') AND (isdigit((int)* p,RValue)))
         {
             p:=p+1
         };
         if(* p='\0') then 
         {
             return<==1 and RValue:=0;
             skip
         }
         else 
         {
              skip 
         };
         if(return=0)   then 
         {
             if((* p!='.') AND (* p!='e')) then 
             {
                 return<==1 and RValue:=1;
                 skip
             }
             else 
             {
                  skip 
             };
             if(return=0)   then 
             {
                 p:=p+1;
                 if(!(isdigit((int)* p,RValue))) then 
                 {
                     if(* p='\0') then 
                     {
                         return<==1 and RValue:=0;
                         skip
                     }
                     else 
                     {
                          skip 
                     };
                     if(return=0)   then 
                     {
                         if((* p!='.') AND (* p!='e')) then 
                         {
                             return<==1 and RValue:=1;
                             skip
                         }
                         else 
                         {
                              skip 
                         };
                         if(return=0)   then 
                         {
                             p:=p+1
                         }
                         else
                         {
                             skip
                         }
                     }
                     else
                     {
                         skip
                     }
                     
                 }
                 else 
                 {
                      skip 
                 };
                 if(return=0)  then
                 {
                     if(* p='\0') then 
                     {
                         return<==1 and RValue:=0;
                         skip
                     }
                     else 
                     {
                          skip 
                     };
                     if(return=0)   then 
                     {
                         if((* p!='+') AND (* p!='-') AND !(isdigit((int)* p,RValue)) AND (* p!='.')) then 
                         {
                             return<==1 and RValue:=1;
                             skip
                         }
                         else 
                         {
                              skip 
                         };
                         if(return=0)   then 
                         {
                             p:=p+1;
                             if(* p='\0') then 
                             {
                                 return<==1 and RValue:=0;
                                 skip
                             }
                             else 
                             {
                                  skip 
                             };
                             if(return=0)   then 
                             {
                                 while((* p!='\0') AND ((isdigit((int)* p,RValue)) OR (* p='.')))
                                 {
                                     p:=p+1
                                 };
                                 if(* p='\0') then 
                                 {
                                     return<==1 and RValue:=0;
                                     skip
                                 }
                                 else 
                                 {
                                      skip 
                                 };
                                 if(return=0)   then 
                                 {
                                     return<==1 and RValue:=1;
                                     skip
                                 }
                                 else
                                 {
                                     skip
                                 }
                             }
                             else
                             {
                                 skip
                             }
                         }
                         else
                         {
                             skip
                         }
                     }
                     else
                     {
                         skip
                     }
                 }
                 else
                 {
                     skip
                 }
             }
             else
             {
                 skip
             }
         }
         else
         {
             skip
         }
     }
     else
     {
         skip
     }
     )
     }; 
  function tisint ( char *p,int RValue )
 {
     frame(tisint_pp,return) and ( 
     int return<==0 and skip;
     char *tisint_pp and skip;
     tisint_pp:=p;
     while( return=0 AND  * tisint_pp!='\0')
     {
         if(* tisint_pp='.') then 
         {
             return<==1 and RValue:=0;
             skip
         }
         else 
         {
              skip 
         };
         if(return=0)   then 
         {
             tisint_pp:=tisint_pp+1
         }
         else
         {
             skip
         }
     };
     if(return=0)   then 
     {
         if((* p!='+') AND (* p!='-') AND !(isdigit((int)* p,RValue))) then 
         {
             return<==1 and RValue:=0;
             skip
         }
         else 
         {
              skip 
         };
         if(return=0)   then 
         {
             p:=p+1;
             while( return=0 AND  * p!='\0')
             {
                 if(!(isdigit((int)* p,RValue))) then 
                 {
                     return<==1 and RValue:=0;
                     skip
                 }
                 else 
                 {
                      skip 
                 };
                 if(return=0)   then 
                 {
                     p:=p+1
                 }
                 else
                 {
                     skip
                 }
             };
             if(return=0)   then 
             {
                 return<==1 and RValue:=1;
                 skip
             }
             else
             {
                 skip
             }
         }
         else
         {
             skip
         }
     }
     else
     {
         skip
     }
     )
     }; 
  function loadloop ( FILE *ip,FILE *tp,char *label,int RValue )
 {
     frame(loadloop_line,loadloop_sp,loadloop_wp,return) and ( 
     int return<==0 and skip;
     char loadloop_line[256] and skip;
     char *loadloop_sp,*loadloop_wp and skip;
     while( return=0 AND  fgets(loadloop_line,256,ip)!=NULL)
     {
         fputs(loadloop_line,tp,RValue) and skip;
         fputs("\n",tp,RValue) and skip;
         loadloop_sp:=loadloop_line;
         while(* loadloop_sp=' ' AND * loadloop_sp!='\0')
         {
             loadloop_sp:=loadloop_sp+1
         };
         if(* loadloop_sp!='\0') then 
         {
             loadloop_wp:=loadloop_sp;
             while(* loadloop_wp!=';' AND * loadloop_wp!=' ' AND * loadloop_wp!='\0')
             {
                 if(isupper(* loadloop_wp,RValue)) then 
                 {
                     * loadloop_wp:=(char)tolower((int)* loadloop_wp,RValue)
                     
                 }
                 else 
                 {
                      skip 
                 };
                 loadloop_wp:=loadloop_wp+1
             };
             if(* loadloop_wp=' ') then 
             {
                 * loadloop_wp:='\0'
             }
             else 
             {
                  skip 
             };
             if(* loadloop_wp=';') then 
             {
                 * loadloop_wp:='\0'
             }
             else 
             {
                  skip 
             };
             if(strcmp(loadloop_sp,label)=0) then 
             {
                 return<==1 and RValue:=1;
                 skip
             }
             else 
             {
                  skip 
             }
             
         }
         else 
         {
              skip 
         }
     };
     if(return=0)   then 
     {
         aaerror(" must have a label for looping ");
         sprintf(loadloop_line," where is >%s< label ?\n",label,RValue) and skip;
         aaerror(loadloop_line);
         return<==1 and RValue:=0;
         skip
     }
     else
     {
         skip
     }
     )
     }; 
  function gsdg (void (*vfs[])(float*, float, int RValue),int nfs,int niter,int low_serial,int high_serial )
 {
     frame(gsdg_ap,gsdg_bp,gsdg_numatm,gsdg_iter,gsdg_i,gsdg_j,gsdg_k,gsdg_svec,gsdg_rvec,gsdg_x,gsdg_y,gsdg_z,break$) and ( 
     int break$<==0 and skip;
     ATOM *gsdg_ap,*gsdg_bp and skip;
     int gsdg_numatm and skip;
     int gsdg_iter,gsdg_i,gsdg_j,gsdg_k and skip;
     float gsdg_svec[3],gsdg_rvec[3] and skip;
     float gsdg_x,gsdg_y,gsdg_z and skip;
     gsdg_numatm:=a_number(RValue);
     if(low_serial>high_serial) then 
     {
         gsdg_i:=low_serial;
         low_serial:=high_serial;
         high_serial:=gsdg_i
         
     }
     else 
     {
          skip 
     };
     if(high_serial<=0) then 
     {
         gsdg_i:=0;
         
         while(gsdg_i<gsdg_numatm)
         {
             gsdg_ap:=a_next(gsdg_i,RValue);
             if(high_serial<gsdg_ap->serial) then 
             {
                 high_serial:=gsdg_ap->serial
             }
             else 
             {
                  skip 
             };
             gsdg_i:=gsdg_i+1
             
         }
         
     }
     else 
     {
          skip 
     };
     gsdg_iter:=0;
     
     while(gsdg_iter<niter)
     {
         output (" iter ",gsdg_iter," starting ") and skip;
         //fflush(stdout,RValue) and skip;
         gsdg_ap:=a_next(-1,RValue);
         break$<==0 and skip;
         gsdg_i:=0;
         
         while( break$=0 AND  gsdg_i<gsdg_numatm)
         {
             if(gsdg_ap=NULL) then 
             {
                 break$<==1 and skip
              }
             else 
             {
                  skip 
             };
             if(break$=0)   then
             {
                 if(gsdg_ap->serial>=low_serial AND gsdg_ap->serial<=high_serial) then 
                 {
                     if(gsdg_ap->active) then 
                     {
                         gsdg_j:=0;
                         
                         while(gsdg_j<gsdg_numatm)
                         {
                             gsdg_bp:=a_next(gsdg_j,RValue);
                             gsdg_bp->vx:=16.0;
                             gsdg_bp->vy:=0.0;
                             gsdg_j:=gsdg_j+1
                             
                         };
                         break$<==0 and skip;
                         gsdg_j:=0;
                         
                         while( break$=0 AND  gsdg_j<nfs)
                         {
                             if(vfs[gsdg_j]=v_nonbon OR vfs[gsdg_j]=u_v_nonbon) then 
                             {
                                 gsdg_k:=0;
                                 
                                 while(gsdg_k<gsdg_numatm)
                                 {
                                     gsdg_bp:=a_next(gsdg_k,RValue);
                                     gsdg_bp->vy:=-10;
                                     gsdg_k:=gsdg_k+1
                                     
                                 };
                                 break$<==1 and skip
                                  
                             }
                             else 
                             {
                                  skip 
                             };
                             if(break$=0)   then
                             {
                                 gsdg_j:=gsdg_j+1
                             }
                             else
                             {
                                 skip
                             }
                             
                         };
                         break$<==0 and skip;
                         gsdg_j:=0;
                         
                         while(gsdg_j<nfs)
                         {
                             if(vfs[gsdg_j]=v_bond OR vfs[gsdg_j]=v_mmbond) then 
                             {
                                 gsdg_bond(gsdg_ap,RValue)
                             }
                             else 
                             {
                                  skip 
                             };
                             if(vfs[gsdg_j]=v_angle OR vfs[gsdg_j]=v_mmangle OR vfs[gsdg_j]=v_c_angle) then 
                             {
                                 gsdg_angle(gsdg_ap,RValue)
                             }
                             else 
                             {
                                  skip 
                             };
                             if(vfs[gsdg_j]=v_noel) then 
                             {
                                 gsdg_noel(gsdg_ap,RValue)
                             }
                             else 
                             {
                                  skip 
                             };
                             if(vfs[gsdg_j]=v_hybrid) then 
                             {
                                 gsdg_hybrid(gsdg_ap,RValue)
                             }
                             else 
                             {
                                  skip 
                             };
                             gsdg_j:=gsdg_j+1
                             
                         };
                         gsdg_rvec[0]:=0;
                         gsdg_rvec[1]:=0;
                         gsdg_rvec[2]:=0;
                         rand3(&gsdg_svec[0],&gsdg_svec[1],&gsdg_svec[2],RValue);
                         gsdg_x:=gsdg_line_search(gsdg_svec,&gsdg_y,gsdg_ap,RValue);
                         gsdg_rvec[0]:=gsdg_rvec[0]+gsdg_y*gsdg_svec[0];
                         gsdg_rvec[1]:=gsdg_rvec[1]+gsdg_y*gsdg_svec[1];
                         gsdg_rvec[2]:=gsdg_rvec[2]+gsdg_y*gsdg_svec[2];
                         rand3(&gsdg_svec[0],&gsdg_svec[1],&gsdg_svec[2],RValue);
                         gsdg_x:=gsdg_line_search(gsdg_svec,&gsdg_y,gsdg_ap,RValue);
                         gsdg_rvec[0]:=gsdg_rvec[0]+gsdg_y*gsdg_svec[0];
                         gsdg_rvec[1]:=gsdg_rvec[1]+gsdg_y*gsdg_svec[1];
                         gsdg_rvec[2]:=gsdg_rvec[2]+gsdg_y*gsdg_svec[2];
                         rand3(&gsdg_svec[0],&gsdg_svec[1],&gsdg_svec[2],RValue);
                         gsdg_x:=gsdg_line_search(gsdg_svec,&gsdg_y,gsdg_ap,RValue);
                         gsdg_rvec[0]:=gsdg_rvec[0]+gsdg_y*gsdg_svec[0];
                         gsdg_rvec[1]:=gsdg_rvec[1]+gsdg_y*gsdg_svec[1];
                         gsdg_rvec[2]:=gsdg_rvec[2]+gsdg_y*gsdg_svec[2];
                         gsdg_x:=gsdg_line_search(gsdg_rvec,&gsdg_y,gsdg_ap,RValue);
                         gsdg_ap->x:=gsdg_ap->x+gsdg_y*gsdg_rvec[0];
                         gsdg_ap->y:=gsdg_ap->y+gsdg_y*gsdg_rvec[1];
                         gsdg_ap->z:=gsdg_ap->z+gsdg_y*gsdg_rvec[2]
                         
                     }
                     else 
                     {
                          skip 
                     }
                     
                 }
                 else 
                 {
                      skip 
                 };
                 if(gsdg_ap=gsdg_ap->next$) then 
                 {
                     break$<==1 and skip
                  }
                 else 
                 {
                      skip 
                 };
                 if(break$=0)   then
                 {
                     gsdg_ap:=gsdg_ap->next$;
                     gsdg_i:=gsdg_i+1
                 }
                 else
                 {
                     skip
                 }
             }
             else
             {
                 skip
             }
             
         };
         break$<==0 and skip;
         output (" done \n") and skip;
         gsdg_iter:=gsdg_iter+1
         
     }
     )
     }; 
  function gsdg_line_search ( float *vect,float *step,ATOM *who,float RValue )
 {
     frame(gsdg_line_search_val,gsdg_line_search_vt,gsdg_line_search_lam,gsdg_line_search_i,gsdg_line_search_j,gsdg_line_search_dstep,return,break$) and ( 
     int break$<==0 and skip;
     int return<==0 and skip;
     float gsdg_line_search_val and skip;
     float gsdg_line_search_vt,gsdg_line_search_lam and skip;
     int gsdg_line_search_i,gsdg_line_search_j and skip;
     float gsdg_line_search_dstep and skip;
     gsdg_line_search_val:=gsdg_dgeom(vect,0.0,who,RValue);
     gsdg_line_search_lam:=0;
     * step:=0;
     gsdg_line_search_dstep:=-0.5;
     gsdg_line_search_i:=0;
     
     while(gsdg_line_search_i<3)
     {
         gsdg_line_search_dstep:=gsdg_line_search_dstep*-0.5;
         break$<==0 and skip;
         gsdg_line_search_j:=0;
         
         while( break$=0 AND  gsdg_line_search_j<200)
         {
             gsdg_line_search_lam:=gsdg_line_search_lam+gsdg_line_search_dstep;
             gsdg_line_search_vt:=gsdg_dgeom(vect,gsdg_line_search_lam,who,RValue);
             if(gsdg_line_search_vt<gsdg_line_search_val) then 
             {
                 * step:=gsdg_line_search_lam;
                 gsdg_line_search_val:=gsdg_line_search_vt
                 
             }
             else
             {
                 break$<==1 and skip
              };
             if(break$=0)   then 
             {
                 gsdg_line_search_j:=gsdg_line_search_j+1
             }
             else
             {
                 skip
             }
             
         };
         break$<==0 and skip;
         if(gsdg_line_search_j=200) then 
         {
             gsdg_line_search_dstep:=gsdg_line_search_dstep*-2
         }
         else 
         {
              skip 
         };
         gsdg_line_search_i:=gsdg_line_search_i+1
         
     };
     return<==1 and RValue:=gsdg_line_search_val;
     skip
     )
     }; 
  function gsdg_dgeom ( float *vect,float lam,ATOM *who,float RValue )
 {
     frame(gsdg_dgeom_numatm,gsdg_dgeom_i,gsdg_dgeom_x,gsdg_dgeom_y,gsdg_dgeom_z,gsdg_dgeom_ap,gsdg_dgeom_dt,gsdg_dgeom_dsum,return) and ( 
     int return<==0 and skip;
     int gsdg_dgeom_numatm and skip;
     int gsdg_dgeom_i and skip;
     float gsdg_dgeom_x,gsdg_dgeom_y,gsdg_dgeom_z and skip;
     ATOM *gsdg_dgeom_ap and skip;
     float gsdg_dgeom_dt and skip;
     float gsdg_dgeom_dsum and skip;
     gsdg_dgeom_numatm:=a_number(RValue);
     gsdg_dgeom_x:=who->x+vect[0]*lam;
     gsdg_dgeom_y:=who->y+vect[1]*lam;
     gsdg_dgeom_z:=who->z+vect[2]*lam;
     gsdg_dgeom_dsum:=0.0;
     gsdg_dgeom_i:=0;
     
     while(gsdg_dgeom_i<gsdg_dgeom_numatm)
     {
         gsdg_dgeom_ap:=a_next(gsdg_dgeom_i,RValue);
         if(gsdg_dgeom_ap!=who) then 
         {
             gsdg_dgeom_dt:=(gsdg_dgeom_x-gsdg_dgeom_ap->x)*(gsdg_dgeom_x-gsdg_dgeom_ap->x);
             gsdg_dgeom_dt:=gsdg_dgeom_dt+(gsdg_dgeom_y-gsdg_dgeom_ap->y)*(gsdg_dgeom_y-gsdg_dgeom_ap->y);
             gsdg_dgeom_dt:=gsdg_dgeom_dt+(gsdg_dgeom_z-gsdg_dgeom_ap->z)*(gsdg_dgeom_z-gsdg_dgeom_ap->z);
             if(gsdg_dgeom_ap->vy>0) then 
             {
                 gsdg_dgeom_dsum:=gsdg_dgeom_dsum+gsdg_dgeom_ap->vy*(gsdg_dgeom_ap->vx-gsdg_dgeom_dt)*(gsdg_dgeom_ap->vx-gsdg_dgeom_dt)
             }
             else
             {
                 if(gsdg_dgeom_ap->vx>gsdg_dgeom_dt) then 
                 {
                     gsdg_dgeom_dsum:=gsdg_dgeom_dsum-gsdg_dgeom_ap->vy*(gsdg_dgeom_ap->vx-gsdg_dgeom_dt)*(gsdg_dgeom_ap->vx-gsdg_dgeom_dt)
                 }
                 else 
                 {
                      skip 
                 }
             }
             
         }
         else 
         {
              skip 
         };
         gsdg_dgeom_i:=gsdg_dgeom_i+1
         
     };
     return<==1 and RValue:=gsdg_dgeom_dsum;
     skip
     )
     }; 
  function v_trace ( float *V,float lambda,int RValue )
 {
     frame(v_trace_numatm,v_trace_i,v_trace_ap,v_trace_xc,v_trace_yc,v_trace_zc,v_trace_xt,v_trace_yt,v_trace_zt,v_trace_l_trace,return) and ( 
     int return<==0 and skip;
     int v_trace_numatm,v_trace_i and skip;
     ATOM *v_trace_ap and skip;
     float v_trace_xc,v_trace_yc,v_trace_zc and skip;
     float v_trace_xt,v_trace_yt,v_trace_zt and skip;
     float v_trace_l_trace and skip;
     v_trace_numatm:=a_number(RValue);
     if(v_trace_numatm<2) then 
     {
         return<==1 and RValue:=0;
         skip
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         v_trace_l_trace:=get_f_variable("trace",RValue);
         if(v_trace_l_trace=0.0) then 
         {
             v_trace_l_trace:=1.0/ v_trace_numatm
         }
         else 
         {
              skip 
         };
         v_trace_xc:=0.0;
         v_trace_yc:=0.0;
         v_trace_zc:=0.0;
         v_trace_i:=0;
         
         while(v_trace_i<v_trace_numatm)
         {
             v_trace_ap:=a_next(v_trace_i,RValue);
             v_trace_xc:=v_trace_xc+v_trace_ap->x+lambda*v_trace_ap->dx;
             v_trace_yc:=v_trace_yc+v_trace_ap->y+lambda*v_trace_ap->dy;
             v_trace_zc:=v_trace_zc+v_trace_ap->z+lambda*v_trace_ap->dz;
             v_trace_i:=v_trace_i+1
             
         };
         v_trace_xc:=v_trace_xc/ v_trace_numatm;
         v_trace_yc:=v_trace_yc/ v_trace_numatm;
         v_trace_zc:=v_trace_zc/ v_trace_numatm;
         v_trace_i:=0;
         
         while(v_trace_i<v_trace_numatm)
         {
             v_trace_ap:=a_next(v_trace_i,RValue);
             v_trace_xt:=v_trace_ap->x+lambda*v_trace_ap->dx-v_trace_xc;
             v_trace_yt:=v_trace_ap->y+lambda*v_trace_ap->dy-v_trace_yc;
             v_trace_zt:=v_trace_ap->z+lambda*v_trace_ap->dz-v_trace_zc;
             * V:=* V-v_trace_l_trace*(v_trace_xt*v_trace_xt+v_trace_yt*v_trace_yt+v_trace_zt*v_trace_zt);
             v_trace_i:=v_trace_i+1
             
         };
         return<==1 and RValue:=0;
         skip
     }
     else
     {
         skip
     }
     )
     }; 
  function f_trace ( float lambda,int RValue )
 {
     frame(f_trace_numatm,f_trace_i,f_trace_ap,f_trace_xc,f_trace_yc,f_trace_zc,f_trace_xt,f_trace_yt,f_trace_zt,f_trace_l_trace,return) and ( 
     int return<==0 and skip;
     int f_trace_numatm,f_trace_i and skip;
     ATOM *f_trace_ap and skip;
     float f_trace_xc,f_trace_yc,f_trace_zc and skip;
     float f_trace_xt,f_trace_yt,f_trace_zt and skip;
     float f_trace_l_trace and skip;
     f_trace_numatm:=a_number(RValue);
     if(f_trace_numatm<2) then 
     {
         return<==1 and RValue:=0;
         skip
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         f_trace_l_trace:=get_f_variable("trace",RValue);
         if(f_trace_l_trace=0.0) then 
         {
             f_trace_l_trace:=1.0/ f_trace_numatm
         }
         else 
         {
              skip 
         };
         f_trace_xc:=0.0;
         f_trace_yc:=0.0;
         f_trace_zc:=0.0;
         f_trace_i:=0;
         
         while(f_trace_i<f_trace_numatm)
         {
             f_trace_ap:=a_next(f_trace_i,RValue);
             f_trace_xc:=f_trace_xc+f_trace_ap->x+lambda*f_trace_ap->dx;
             f_trace_yc:=f_trace_yc+f_trace_ap->y+lambda*f_trace_ap->dy;
             f_trace_zc:=f_trace_zc+f_trace_ap->z+lambda*f_trace_ap->dz;
             f_trace_i:=f_trace_i+1
             
         };
         f_trace_xc:=f_trace_xc/ f_trace_numatm;
         f_trace_yc:=f_trace_yc/ f_trace_numatm;
         f_trace_zc:=f_trace_zc/ f_trace_numatm;
         f_trace_l_trace:=2*f_trace_l_trace*(1.0-1.0/ f_trace_numatm);
         f_trace_i:=0;
         
         while(f_trace_i<f_trace_numatm)
         {
             f_trace_ap:=a_next(f_trace_i,RValue);
             f_trace_xt:=f_trace_ap->x+lambda*f_trace_ap->dx-f_trace_xc;
             f_trace_yt:=f_trace_ap->y+lambda*f_trace_ap->dy-f_trace_yc;
             f_trace_zt:=f_trace_ap->z+lambda*f_trace_ap->dz-f_trace_zc;
             f_trace_ap->fx:=f_trace_ap->fx+f_trace_l_trace*f_trace_xt;
             f_trace_ap->fy:=f_trace_ap->fy+f_trace_l_trace*f_trace_yt;
             f_trace_ap->fz:=f_trace_ap->fz+f_trace_l_trace*f_trace_zt;
             f_trace_i:=f_trace_i+1
             
         };
         return<==1 and RValue:=0;
         skip
     }
     else
     {
         skip
     }
     )
     }; 
      struct HYBRID {
     ATOM *atom1,*atom2,*atom3,*atom4 and 
     float k,offset and 
     void *next$ 
 };
 HYBRID *hybrid_first<==NULL and skip;
 HYBRID *hybrid_last<==NULL and skip;
 function hybrid ( int p1,int p2,int p3,int p4,float fk,float off,int RValue )
 {
     frame(hybrid_new,hybrid_ap1,hybrid_ap2,hybrid_ap3,hybrid_ap4,hybrid_line,return) and ( 
     int return<==0 and skip;
     HYBRID *hybrid_new and skip;
     ATOM *hybrid_ap1,*hybrid_ap2,*hybrid_ap3,*hybrid_ap4 and skip;
     char hybrid_line[80] and skip;
     hybrid_ap1:=a_m_serial(p1,RValue);
     hybrid_ap2:=a_m_serial(p2,RValue);
     hybrid_ap3:=a_m_serial(p3,RValue);
     hybrid_ap4:=a_m_serial(p4,RValue);
     if((hybrid_ap1=NULL) OR (hybrid_ap2=NULL) OR (hybrid_ap3=NULL) OR (hybrid_ap4=NULL)) then 
     {
         sprintf(hybrid_line,"undefined atom in hybrid %d %d %d %d \0",p1,p2,p3,p4,RValue) and skip;
         aaerror(hybrid_line);
         return<==1 and RValue:=0;
         skip
         
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         hybrid_new:=malloc((unsigned int)sizeof(HYBRID)) ;
         if((hybrid_new)=NULL) then 
         {
             return<==1 and RValue:=0;
             skip
             
         }
         else 
         {
              skip 
         };
         if(return=0)   then 
         {
             if(hybrid_first=NULL) then 
             {
                 hybrid_first:=hybrid_new
             }
             else 
             {
                  skip 
             };
             if(hybrid_last=NULL) then 
             {
                 hybrid_last:=hybrid_new
             }
             else 
             {
                  skip 
             };
             hybrid_new->atom1:=hybrid_ap1;
             hybrid_new->atom2:=hybrid_ap2;
             hybrid_new->atom3:=hybrid_ap3;
             hybrid_new->atom4:=hybrid_ap4;
             hybrid_new->offset:=off;
             hybrid_new->k:=fk;
             hybrid_new->next$:=hybrid_new;
             hybrid_last->next$:=hybrid_new;
             hybrid_last:=hybrid_new;
             return<==1 and RValue:=1;
             skip
         }
         else
         {
             skip
         }
     }
     else
     {
         skip
     }
     )
     }; 
  function v_hybrid ( float *V,float lambda,int RValue )
 {
     frame(v_hybrid_bp,v_hybrid_x1,v_hybrid_y1,v_hybrid_z1,v_hybrid_x2,v_hybrid_y2,v_hybrid_z2,v_hybrid_x3,v_hybrid_y3,v_hybrid_z3,v_hybrid_r,v_hybrid_cx1,v_hybrid_cy1,v_hybrid_cz1,v_hybrid_hite,v_hybrid_a1,v_hybrid_a2,v_hybrid_a3,v_hybrid_a4,return,continue) and ( 
     int continue<==0 and skip;
     int return<==0 and skip;
     HYBRID *v_hybrid_bp and skip;
     float v_hybrid_x1,v_hybrid_y1,v_hybrid_z1,v_hybrid_x2,v_hybrid_y2,v_hybrid_z2,v_hybrid_x3,v_hybrid_y3,v_hybrid_z3 and skip;
     float v_hybrid_r,v_hybrid_cx1,v_hybrid_cy1,v_hybrid_cz1 and skip;
     float v_hybrid_hite and skip;
     ATOM *v_hybrid_a1,*v_hybrid_a2,*v_hybrid_a3,*v_hybrid_a4 and skip;
     v_hybrid_bp:=hybrid_first;
     if(v_hybrid_bp=NULL) then 
     {
         return<==1 and RValue:=1;
         skip
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         while( return=0 AND  1)
         {
             continue<==0 and skip;
             if(v_hybrid_bp=NULL) then 
             {
                 return<==1 and RValue:=0;
                 skip
             }
             else 
             {
                  skip 
             };
             if(return=0)   then 
             {
                 v_hybrid_a1:=v_hybrid_bp->atom1;
                 v_hybrid_a2:=v_hybrid_bp->atom2;
                 v_hybrid_a3:=v_hybrid_bp->atom3;
                 v_hybrid_a4:=v_hybrid_bp->atom4;
                 if(v_hybrid_a1->active OR v_hybrid_a2->active OR v_hybrid_a3->active OR v_hybrid_a4->active) then 
                 {
                     v_hybrid_x1:=(v_hybrid_a2->x-v_hybrid_a1->x+lambda*(v_hybrid_a2->dx-v_hybrid_a1->dx));
                     v_hybrid_y1:=(v_hybrid_a2->y-v_hybrid_a1->y+lambda*(v_hybrid_a2->dy-v_hybrid_a1->dy));
                     v_hybrid_z1:=(v_hybrid_a2->z-v_hybrid_a1->z+lambda*(v_hybrid_a2->dz-v_hybrid_a1->dz));
                     v_hybrid_x2:=(v_hybrid_a3->x-v_hybrid_a1->x+lambda*(v_hybrid_a3->dx-v_hybrid_a1->dx));
                     v_hybrid_y2:=(v_hybrid_a3->y-v_hybrid_a1->y+lambda*(v_hybrid_a3->dy-v_hybrid_a1->dy));
                     v_hybrid_z2:=(v_hybrid_a3->z-v_hybrid_a1->z+lambda*(v_hybrid_a3->dz-v_hybrid_a1->dz));
                     v_hybrid_x3:=(v_hybrid_a4->x-v_hybrid_a1->x+lambda*(v_hybrid_a4->dx-v_hybrid_a1->dx));
                     v_hybrid_y3:=(v_hybrid_a4->y-v_hybrid_a1->y+lambda*(v_hybrid_a4->dy-v_hybrid_a1->dy));
                     v_hybrid_z3:=(v_hybrid_a4->z-v_hybrid_a1->z+lambda*(v_hybrid_a4->dz-v_hybrid_a1->dz));
                     v_hybrid_cx1:=v_hybrid_y1*v_hybrid_z2-v_hybrid_y2*v_hybrid_z1;
                     v_hybrid_cy1:=-v_hybrid_x1*v_hybrid_z2+v_hybrid_x2*v_hybrid_z1;
                     v_hybrid_cz1:=v_hybrid_x1*v_hybrid_y2-v_hybrid_x2*v_hybrid_y1;
                     v_hybrid_r:=v_hybrid_cx1*v_hybrid_cx1+v_hybrid_cy1*v_hybrid_cy1+v_hybrid_cz1*v_hybrid_cz1;
                     if(v_hybrid_r<1.e-16) then 
                     {
                         if(v_hybrid_bp=v_hybrid_bp->next$) then 
                         {
                             return<==1 and RValue:=1;
                             skip
                         }
                         else 
                         {
                              skip 
                         };
                         if(return=0)   then 
                         {
                             v_hybrid_bp:=v_hybrid_bp->next$;
                             continue<==1 and skip
                          }
                         else
                         {
                             skip
                         }
                     }
                     else
                     {
                         skip
                     }
                     
                 }
                 else 
                 {
                      skip 
                 };
                 if(continue=0)   then 
                 {
                     if(return=0)  then
                     {
                         v_hybrid_r:=sqrt(v_hybrid_r);
                         v_hybrid_hite:=v_hybrid_cx1*v_hybrid_x3+v_hybrid_cy1*v_hybrid_y3+v_hybrid_cz1*v_hybrid_z3;
                         v_hybrid_hite:=v_hybrid_hite/ v_hybrid_r;
                         * V:=* V+(v_hybrid_bp->k)*(v_hybrid_hite-v_hybrid_bp->offset)*(v_hybrid_hite-v_hybrid_bp->offset)
                     }
                     else
                     {
                         skip
                     }
                 }
                 else
                 {
                     skip
                 }
                 
             }
             else 
             {
                  skip 
             };
             if(continue=0)  then
             {
                 if(return=0)  then
                 {
                     if(v_hybrid_bp=v_hybrid_bp->next$) then 
                     {
                         return<==1 and RValue:=1;
                         skip
                     }
                     else 
                     {
                          skip 
                     };
                     if(return=0)   then 
                     {
                         v_hybrid_bp:=v_hybrid_bp->next$
                     }
                     else
                     {
                         skip
                     }
                 }
                 else
                 {
                     skip
                 }
             }
             else
             {
                 skip
             }
         };
         continue<==0 and skip
     }
     else
     {
         skip
     }
     )
     }; 
  function f_hybrid ( float lambda,int RValue )
 {
     frame(f_hybrid_bp,f_hybrid_x1,f_hybrid_y1,f_hybrid_z1,f_hybrid_x2,f_hybrid_y2,f_hybrid_z2,f_hybrid_x3,f_hybrid_y3,f_hybrid_z3,f_hybrid_r,f_hybrid_cx1,f_hybrid_cy1,f_hybrid_cz1,f_hybrid_dx,f_hybrid_dy,f_hybrid_dz,f_hybrid_hite,f_hybrid_df,f_hybrid_r3,f_hybrid_c,f_hybrid_a1,f_hybrid_a2,f_hybrid_a3,f_hybrid_a4,f_hybrid_at,f_hybrid_i,return,continue) and ( 
     int continue<==0 and skip;
     int return<==0 and skip;
     HYBRID *f_hybrid_bp and skip;
     float f_hybrid_x1,f_hybrid_y1,f_hybrid_z1,f_hybrid_x2,f_hybrid_y2,f_hybrid_z2,f_hybrid_x3,f_hybrid_y3,f_hybrid_z3 and skip;
     float f_hybrid_r,f_hybrid_cx1,f_hybrid_cy1,f_hybrid_cz1 and skip;
     float f_hybrid_dx,f_hybrid_dy,f_hybrid_dz and skip;
     float f_hybrid_hite and skip;
     float f_hybrid_df and skip;
     float f_hybrid_r3,f_hybrid_c and skip;
     ATOM *f_hybrid_a1,*f_hybrid_a2,*f_hybrid_a3,*f_hybrid_a4,*f_hybrid_at and skip;
     int f_hybrid_i and skip;
     f_hybrid_bp:=hybrid_first;
     if(f_hybrid_bp=NULL) then 
     {
         return<==1 and RValue:=1;
         skip
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         while( return=0 AND  1)
         {
             if(f_hybrid_bp=NULL) then 
             {
                 return<==1 and RValue:=0;
                 skip
             }
             else 
             {
                  skip 
             };
             if(return=0)   then 
             {
                 f_hybrid_a1:=f_hybrid_bp->atom1;
                 f_hybrid_a2:=f_hybrid_bp->atom2;
                 f_hybrid_a3:=f_hybrid_bp->atom3;
                 f_hybrid_a4:=f_hybrid_bp->atom4;
                 if(f_hybrid_a1->active OR f_hybrid_a2->active OR f_hybrid_a3->active OR f_hybrid_a4->active) then 
                 {
                     continue<==0 and skip;
                     f_hybrid_i:=0;
                     
                     while( return=0 AND  f_hybrid_i<3)
                     {
                          continue<==0 and skip;
                         f_hybrid_x1:=(f_hybrid_a2->x-f_hybrid_a1->x+lambda*(f_hybrid_a2->dx-f_hybrid_a1->dx));
                         f_hybrid_y1:=(f_hybrid_a2->y-f_hybrid_a1->y+lambda*(f_hybrid_a2->dy-f_hybrid_a1->dy));
                         f_hybrid_z1:=(f_hybrid_a2->z-f_hybrid_a1->z+lambda*(f_hybrid_a2->dz-f_hybrid_a1->dz));
                         f_hybrid_x2:=(f_hybrid_a3->x-f_hybrid_a1->x+lambda*(f_hybrid_a3->dx-f_hybrid_a1->dx));
                         f_hybrid_y2:=(f_hybrid_a3->y-f_hybrid_a1->y+lambda*(f_hybrid_a3->dy-f_hybrid_a1->dy));
                         f_hybrid_z2:=(f_hybrid_a3->z-f_hybrid_a1->z+lambda*(f_hybrid_a3->dz-f_hybrid_a1->dz));
                         f_hybrid_x3:=(f_hybrid_a4->x-f_hybrid_a1->x+lambda*(f_hybrid_a4->dx-f_hybrid_a1->dx));
                         f_hybrid_y3:=(f_hybrid_a4->y-f_hybrid_a1->y+lambda*(f_hybrid_a4->dy-f_hybrid_a1->dy));
                         f_hybrid_z3:=(f_hybrid_a4->z-f_hybrid_a1->z+lambda*(f_hybrid_a4->dz-f_hybrid_a1->dz));
                         f_hybrid_cx1:=f_hybrid_y1*f_hybrid_z2-f_hybrid_y2*f_hybrid_z1;
                         f_hybrid_cy1:=-f_hybrid_x1*f_hybrid_z2+f_hybrid_x2*f_hybrid_z1;
                         f_hybrid_cz1:=f_hybrid_x1*f_hybrid_y2-f_hybrid_x2*f_hybrid_y1;
                         f_hybrid_r:=f_hybrid_cx1*f_hybrid_cx1+f_hybrid_cy1*f_hybrid_cy1+f_hybrid_cz1*f_hybrid_cz1;
                         if(f_hybrid_r<1.e-16) then 
                         {
                             if(f_hybrid_bp=f_hybrid_bp->next$) then 
                             {
                                 return<==1 and RValue:=1;
                                 skip
                             }
                             else 
                             {
                                  skip 
                             };
                             if(return=0)   then 
                             {
                                 f_hybrid_bp:=f_hybrid_bp->next$;
                                 continue<==1 and skip;
                                  f_hybrid_i:=f_hybrid_i+1}
                                 else
                                 {
                                     skip
                                 }
                                 
                             }
                             else 
                             {
                                  skip 
                             };
                             if(continue=0)   then 
                             {
                                 if(return=0)  then
                                 {
                                     f_hybrid_r:=sqrt(f_hybrid_r);
                                     f_hybrid_r3:=f_hybrid_r*f_hybrid_r*f_hybrid_r;
                                     f_hybrid_hite:=f_hybrid_cx1*f_hybrid_x3+f_hybrid_cy1*f_hybrid_y3+f_hybrid_cz1*f_hybrid_z3;
                                     f_hybrid_hite:=f_hybrid_hite/ f_hybrid_r;
                                     f_hybrid_df:=2*f_hybrid_bp->k*(f_hybrid_bp->offset-f_hybrid_hite)/ 3;
                                     f_hybrid_a4->fx:=f_hybrid_a4->fx+f_hybrid_df/ f_hybrid_r*f_hybrid_cx1;
                                     f_hybrid_a4->fy:=f_hybrid_a4->fy+f_hybrid_df/ f_hybrid_r*f_hybrid_cy1;
                                     f_hybrid_a4->fz:=f_hybrid_a4->fz+f_hybrid_df/ f_hybrid_r*f_hybrid_cz1;
                                     f_hybrid_a1->fx:=f_hybrid_a1->fx-f_hybrid_df/ f_hybrid_r*f_hybrid_cx1;
                                     f_hybrid_a1->fy:=f_hybrid_a1->fy-f_hybrid_df/ f_hybrid_r*f_hybrid_cy1;
                                     f_hybrid_a1->fz:=f_hybrid_a1->fz-f_hybrid_df/ f_hybrid_r*f_hybrid_cz1;
                                     f_hybrid_dx:=-f_hybrid_cx1*f_hybrid_x3/ f_hybrid_r3*f_hybrid_df;
                                     f_hybrid_dy:=-f_hybrid_cy1*f_hybrid_y3/ f_hybrid_r3*f_hybrid_df;
                                     f_hybrid_dz:=-f_hybrid_cz1*f_hybrid_z3/ f_hybrid_r3*f_hybrid_df;
                                     f_hybrid_c:=f_hybrid_df*((-f_hybrid_y3*f_hybrid_z2+f_hybrid_z3*f_hybrid_y2)/ f_hybrid_r);
                                     f_hybrid_c:=f_hybrid_c+f_hybrid_dx*(f_hybrid_y2*(f_hybrid_x1*f_hybrid_y2-f_hybrid_x2*f_hybrid_y1)-f_hybrid_z2*(f_hybrid_x2*f_hybrid_z1-f_hybrid_x1*f_hybrid_z2));
                                     f_hybrid_a2->fx:=f_hybrid_a2->fx+f_hybrid_c;
                                     f_hybrid_a1->fx:=f_hybrid_a1->fx-f_hybrid_c;
                                     f_hybrid_c:=f_hybrid_df*((-f_hybrid_z3*f_hybrid_x2+f_hybrid_x3*f_hybrid_z2)/ f_hybrid_r);
                                     f_hybrid_c:=f_hybrid_c+f_hybrid_dy*(f_hybrid_z2*(f_hybrid_y1*f_hybrid_z2-f_hybrid_y2*f_hybrid_z1)-f_hybrid_x2*(f_hybrid_x1*f_hybrid_y2-f_hybrid_x2*f_hybrid_y1));
                                     f_hybrid_a2->fy:=f_hybrid_a2->fy+f_hybrid_c;
                                     f_hybrid_a1->fy:=f_hybrid_a1->fy-f_hybrid_c;
                                     f_hybrid_c:=f_hybrid_df*((-f_hybrid_x3*f_hybrid_y2+f_hybrid_y3*f_hybrid_x2)/ f_hybrid_r);
                                     f_hybrid_c:=f_hybrid_c+f_hybrid_dz*(f_hybrid_x2*(f_hybrid_x2*f_hybrid_z1-f_hybrid_x1*f_hybrid_z2)-f_hybrid_y2*(f_hybrid_y1*f_hybrid_z2-f_hybrid_y2*f_hybrid_z1));
                                     f_hybrid_a2->fz:=f_hybrid_a2->fz+f_hybrid_c;
                                     f_hybrid_a1->fz:=f_hybrid_a1->fz-f_hybrid_c;
                                     f_hybrid_c:=f_hybrid_df*((-f_hybrid_z3*f_hybrid_y1+f_hybrid_y3*f_hybrid_z1)/ f_hybrid_r);
                                     f_hybrid_c:=f_hybrid_c-f_hybrid_dx*(f_hybrid_y1*(f_hybrid_x1*f_hybrid_y2-f_hybrid_x2*f_hybrid_y1)-f_hybrid_z1*(f_hybrid_x2*f_hybrid_z1-f_hybrid_x1*f_hybrid_z2));
                                     f_hybrid_a3->fx:=f_hybrid_a3->fx+f_hybrid_c;
                                     f_hybrid_a1->fx:=f_hybrid_a1->fx-f_hybrid_c;
                                     f_hybrid_c:=f_hybrid_df*((-f_hybrid_x3*f_hybrid_z1+f_hybrid_z3*f_hybrid_x1)/ f_hybrid_r);
                                     f_hybrid_c:=f_hybrid_c-f_hybrid_dy*(f_hybrid_z1*(f_hybrid_y1*f_hybrid_z2-f_hybrid_y2*f_hybrid_z1)-f_hybrid_x1*(f_hybrid_x1*f_hybrid_y2-f_hybrid_x2*f_hybrid_y1));
                                     f_hybrid_a3->fy:=f_hybrid_a3->fy+f_hybrid_c;
                                     f_hybrid_a1->fy:=f_hybrid_a1->fy-f_hybrid_c;
                                     f_hybrid_c:=f_hybrid_df*((-f_hybrid_y3*f_hybrid_x1+f_hybrid_x3*f_hybrid_y1)/ f_hybrid_r);
                                     f_hybrid_c:=f_hybrid_c-f_hybrid_dz*(f_hybrid_x1*(f_hybrid_x2*f_hybrid_z1-f_hybrid_x1*f_hybrid_z2)-f_hybrid_y1*(f_hybrid_y1*f_hybrid_z2-f_hybrid_y2*f_hybrid_z1));
                                     f_hybrid_a3->fz:=f_hybrid_a3->fz+f_hybrid_c;
                                     f_hybrid_a1->fz:=f_hybrid_a1->fz-f_hybrid_c;
                                     f_hybrid_at:=f_hybrid_a1;
                                     f_hybrid_a1:=f_hybrid_a2;
                                     f_hybrid_a2:=f_hybrid_a3;
                                     f_hybrid_a3:=f_hybrid_at;
                                     f_hybrid_i:=f_hybrid_i+1
                                 }
                                 else
                                 {
                                     skip
                                 }
                             }
                             else
                             {
                                 skip
                             }
                             
                         };
                         continue<==0 and skip;
                         if(return=0)   then 
                         {
                             if(f_hybrid_a1->active=0) then 
                             {
                                 f_hybrid_a1->fx:=0;
                                 f_hybrid_a1->fy:=0.0;
                                 f_hybrid_a1->fz:=0
                                 
                             }
                             else 
                             {
                                  skip 
                             };
                             if(f_hybrid_a2->active=0) then 
                             {
                                 f_hybrid_a2->fx:=0;
                                 f_hybrid_a2->fy:=0.0;
                                 f_hybrid_a2->fz:=0
                                 
                             }
                             else 
                             {
                                  skip 
                             };
                             if(f_hybrid_a3->active=0) then 
                             {
                                 f_hybrid_a3->fx:=0;
                                 f_hybrid_a3->fy:=0.0;
                                 f_hybrid_a3->fz:=0
                                 
                             }
                             else 
                             {
                                  skip 
                             };
                             if(f_hybrid_a4->active=0) then 
                             {
                                 f_hybrid_a4->fx:=0;
                                 f_hybrid_a4->fy:=0.0;
                                 f_hybrid_a4->fz:=0
                                 
                             }
                             else 
                             {
                                  skip 
                             }
                         }
                         else
                         {
                             skip
                         }
                     }
                     else
                     {
                         skip
                     }
                     
                 }
                 else 
                 {
                      skip 
                 };
                 if(return=0)  then
                 {
                     if(f_hybrid_bp=f_hybrid_bp->next$) then 
                     {
                         return<==1 and RValue:=1;
                         skip
                     }
                     else 
                     {
                          skip 
                     };
                     if(return=0)   then 
                     {
                         f_hybrid_bp:=f_hybrid_bp->next$
                     }
                     else
                     {
                         skip
                     }
                 }
                 else
                 {
                     skip
                 }
             }
         }
         else
         {
             skip
         }
         )
         }; 
  function get_hybrid ( ATOM *a1,ATOM **bonded,int mbond,int *inbond )
 {
     frame(get_hybrid_mine,return) and ( 
     int return<==0 and skip;
     HYBRID *get_hybrid_mine and skip;
     get_hybrid_mine:=hybrid_first;
     * inbond:=0;
     while( return=0 AND  1)
     {
         if((get_hybrid_mine=NULL)) then 
         {
              return<==1 and skip
             
         }
         else 
         {
              skip 
         };
         if(return=0)   then 
         {
             if(get_hybrid_mine->atom1=a1) then 
             {
                 bonded[(* inbond)]:=get_hybrid_mine->atom4;
                 (* inbond):=(* inbond)+1
                 
             }
             else 
             {
                  skip 
             };
             if(get_hybrid_mine->atom4=a1) then 
             {
                 bonded[(* inbond)]:=get_hybrid_mine->atom1;
                 (* inbond):=(* inbond)+1
                 
             }
             else 
             {
                  skip 
             };
             if(get_hybrid_mine=get_hybrid_mine->next$) then 
             {
                  return<==1 and skip
             }
             else 
             {
                  skip 
             };
             if(return=0)   then 
             {
                 get_hybrid_mine:=get_hybrid_mine->next$;
                 if(* inbond=mbond) then 
                 {
                      return<==1 and skip
                 }
                 else 
                 {
                      skip 
                 }
             }
             else
             {
                 skip
             }
         }
         else
         {
             skip
         }
     }
     )
     }; 
  function dump_hybrids ( FILE *where )
 {
     frame(dump_hybrids_b,dump_hybrids_a1,dump_hybrids_a2,dump_hybrids_a3,dump_hybrids_a4,return) and ( 
     int return<==0 and skip;
     HYBRID *dump_hybrids_b and skip;
     ATOM *dump_hybrids_a1,*dump_hybrids_a2,*dump_hybrids_a3,*dump_hybrids_a4 and skip;
     dump_hybrids_b:=hybrid_first;
     if(dump_hybrids_b=NULL) then 
     {
          return<==1 and skip
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         while( return=0 AND  (dump_hybrids_b->next$!=dump_hybrids_b))
         {
             if(dump_hybrids_b->next$=NULL) then 
             {
                  return<==1 and skip
             }
             else 
             {
                  skip 
             };
             if(return=0)   then 
             {
                 dump_hybrids_a1:=dump_hybrids_b->atom1;
                 dump_hybrids_a2:=dump_hybrids_b->atom2;
                 dump_hybrids_a3:=dump_hybrids_b->atom3;
                 dump_hybrids_a4:=dump_hybrids_b->atom4;
                 fprintf(where,"hybrid %d %d %d %d %f %f ;\n",dump_hybrids_a1->serial,dump_hybrids_a2->serial,dump_hybrids_a3->serial,dump_hybrids_a4->serial,dump_hybrids_b->k,dump_hybrids_b->offset,RValue) and skip;
                 dump_hybrids_b:=dump_hybrids_b->next$
             }
             else
             {
                 skip
             }
         };
         if(return=0)   then 
         {
             if(dump_hybrids_b->next$=NULL) then 
             {
                  return<==1 and skip
             }
             else 
             {
                  skip 
             };
             if(return=0)   then 
             {
                 dump_hybrids_a1:=dump_hybrids_b->atom1;
                 dump_hybrids_a2:=dump_hybrids_b->atom2;
                 dump_hybrids_a3:=dump_hybrids_b->atom3;
                 dump_hybrids_a4:=dump_hybrids_b->atom4;
                 fprintf(where,"hybrid %d %d %d %d %f %f ;\n",dump_hybrids_a1->serial,dump_hybrids_a2->serial,dump_hybrids_a3->serial,dump_hybrids_a4->serial,dump_hybrids_b->k,dump_hybrids_b->offset,RValue) and skip
             }
             else
             {
                 skip
             }
         }
         else
         {
             skip
         }
     }
     else
     {
         skip
     }
     )
     }; 
  function a_hybrid ( float *V,float lambda,int ilow,int ihigh,FILE *op,int RValue )
 {
     frame(a_hybrid_bp,a_hybrid_x1,a_hybrid_y1,a_hybrid_z1,a_hybrid_x2,a_hybrid_y2,a_hybrid_z2,a_hybrid_x3,a_hybrid_y3,a_hybrid_z3,a_hybrid_r,a_hybrid_cx1,a_hybrid_cy1,a_hybrid_cz1,a_hybrid_hite,a_hybrid_a1,a_hybrid_a2,a_hybrid_a3,a_hybrid_a4,return,continue) and ( 
     int continue<==0 and skip;
     int return<==0 and skip;
     HYBRID *a_hybrid_bp and skip;
     float a_hybrid_x1,a_hybrid_y1,a_hybrid_z1,a_hybrid_x2,a_hybrid_y2,a_hybrid_z2,a_hybrid_x3,a_hybrid_y3,a_hybrid_z3 and skip;
     float a_hybrid_r,a_hybrid_cx1,a_hybrid_cy1,a_hybrid_cz1 and skip;
     float a_hybrid_hite and skip;
     ATOM *a_hybrid_a1,*a_hybrid_a2,*a_hybrid_a3,*a_hybrid_a4 and skip;
     a_hybrid_bp:=hybrid_first;
     if(a_hybrid_bp=NULL) then 
     {
         return<==1 and RValue:=1;
         skip
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         while( return=0 AND  1)
         {
             continue<==0 and skip;
             if(a_hybrid_bp=NULL) then 
             {
                 return<==1 and RValue:=0;
                 skip
             }
             else 
             {
                  skip 
             };
             if(return=0)   then 
             {
                 a_hybrid_a1:=a_hybrid_bp->atom1;
                 a_hybrid_a2:=a_hybrid_bp->atom2;
                 a_hybrid_a3:=a_hybrid_bp->atom3;
                 a_hybrid_a4:=a_hybrid_bp->atom4;
                 if((a_hybrid_a1->serial>=ilow AND a_hybrid_a1->serial<=ihigh) OR (a_hybrid_a2->serial>=ilow AND a_hybrid_a2->serial<=ihigh) OR (a_hybrid_a3->serial>=ilow AND a_hybrid_a3->serial<=ihigh) OR (a_hybrid_a4->serial>=ilow AND a_hybrid_a4->serial<=ihigh)) then 
                 {
                     a_hybrid_x1:=(a_hybrid_a2->x-a_hybrid_a1->x+lambda*(a_hybrid_a2->dx-a_hybrid_a1->dx));
                     a_hybrid_y1:=(a_hybrid_a2->y-a_hybrid_a1->y+lambda*(a_hybrid_a2->dy-a_hybrid_a1->dy));
                     a_hybrid_z1:=(a_hybrid_a2->z-a_hybrid_a1->z+lambda*(a_hybrid_a2->dz-a_hybrid_a1->dz));
                     a_hybrid_x2:=(a_hybrid_a3->x-a_hybrid_a1->x+lambda*(a_hybrid_a3->dx-a_hybrid_a1->dx));
                     a_hybrid_y2:=(a_hybrid_a3->y-a_hybrid_a1->y+lambda*(a_hybrid_a3->dy-a_hybrid_a1->dy));
                     a_hybrid_z2:=(a_hybrid_a3->z-a_hybrid_a1->z+lambda*(a_hybrid_a3->dz-a_hybrid_a1->dz));
                     a_hybrid_x3:=(a_hybrid_a4->x-a_hybrid_a1->x+lambda*(a_hybrid_a4->dx-a_hybrid_a1->dx));
                     a_hybrid_y3:=(a_hybrid_a4->y-a_hybrid_a1->y+lambda*(a_hybrid_a4->dy-a_hybrid_a1->dy));
                     a_hybrid_z3:=(a_hybrid_a4->z-a_hybrid_a1->z+lambda*(a_hybrid_a4->dz-a_hybrid_a1->dz));
                     a_hybrid_cx1:=a_hybrid_y1*a_hybrid_z2-a_hybrid_y2*a_hybrid_z1;
                     a_hybrid_cy1:=-a_hybrid_x1*a_hybrid_z2+a_hybrid_x2*a_hybrid_z1;
                     a_hybrid_cz1:=a_hybrid_x1*a_hybrid_y2-a_hybrid_x2*a_hybrid_y1;
                     a_hybrid_r:=a_hybrid_cx1*a_hybrid_cx1+a_hybrid_cy1*a_hybrid_cy1+a_hybrid_cz1*a_hybrid_cz1;
                     if(a_hybrid_r<1.e-16) then 
                     {
                         if(a_hybrid_bp=a_hybrid_bp->next$) then 
                         {
                             return<==1 and RValue:=1;
                             skip
                         }
                         else 
                         {
                              skip 
                         };
                         if(return=0)   then 
                         {
                             a_hybrid_bp:=a_hybrid_bp->next$;
                             continue<==1 and skip
                          }
                         else
                         {
                             skip
                         }
                     }
                     else
                     {
                         skip
                     }
                     
                 }
                 else 
                 {
                      skip 
                 };
                 if(continue=0)   then 
                 {
                     if(return=0)  then
                     {
                         a_hybrid_r:=sqrt(a_hybrid_r);
                         a_hybrid_hite:=a_hybrid_cx1*a_hybrid_x3+a_hybrid_cy1*a_hybrid_y3+a_hybrid_cz1*a_hybrid_z3;
                         a_hybrid_hite:=a_hybrid_hite/ a_hybrid_r;
                         a_hybrid_z2:=(a_hybrid_bp->k)*(a_hybrid_hite-a_hybrid_bp->offset)*(a_hybrid_hite-a_hybrid_bp->offset);
                         * V:=* V+a_hybrid_z2;
                         fprintf(op,"Hybrid %s %d %s %d %s %d %s %d E %f value %f error %f\n",a_hybrid_a1->name,a_hybrid_a1->serial,a_hybrid_a2->name,a_hybrid_a2->serial,a_hybrid_a3->name,a_hybrid_a3->serial,a_hybrid_a4->name,a_hybrid_a4->serial,a_hybrid_z2,a_hybrid_hite,a_hybrid_hite-a_hybrid_bp->offset,RValue) and skip
                     }
                     else
                     {
                         skip
                     }
                 }
                 else
                 {
                     skip
                 }
                 
             }
             else 
             {
                  skip 
             };
             if(continue=0)  then
             {
                 if(return=0)  then
                 {
                     if(a_hybrid_bp=a_hybrid_bp->next$) then 
                     {
                         return<==1 and RValue:=1;
                         skip
                     }
                     else 
                     {
                          skip 
                     };
                     if(return=0)   then 
                     {
                         a_hybrid_bp:=a_hybrid_bp->next$
                     }
                     else
                     {
                         skip
                     }
                 }
                 else
                 {
                     skip
                 }
             }
             else
             {
                 skip
             }
         };
         continue<==0 and skip
     }
     else
     {
         skip
     }
     )
     }; 
  function v_ho_hybrid ( float *V,float lambda,int RValue )
 {
     frame(v_ho_hybrid_bp,v_ho_hybrid_x1,v_ho_hybrid_y1,v_ho_hybrid_z1,v_ho_hybrid_x2,v_ho_hybrid_y2,v_ho_hybrid_z2,v_ho_hybrid_x3,v_ho_hybrid_y3,v_ho_hybrid_z3,v_ho_hybrid_r,v_ho_hybrid_cx1,v_ho_hybrid_cy1,v_ho_hybrid_cz1,v_ho_hybrid_hite,v_ho_hybrid_a1,v_ho_hybrid_a2,v_ho_hybrid_a3,v_ho_hybrid_a4,v_ho_hybrid_hol,return,continue) and ( 
     int continue<==0 and skip;
     int return<==0 and skip;
     HYBRID *v_ho_hybrid_bp and skip;
     float v_ho_hybrid_x1,v_ho_hybrid_y1,v_ho_hybrid_z1,v_ho_hybrid_x2,v_ho_hybrid_y2,v_ho_hybrid_z2,v_ho_hybrid_x3,v_ho_hybrid_y3,v_ho_hybrid_z3 and skip;
     float v_ho_hybrid_r,v_ho_hybrid_cx1,v_ho_hybrid_cy1,v_ho_hybrid_cz1 and skip;
     float v_ho_hybrid_hite and skip;
     ATOM *v_ho_hybrid_a1,*v_ho_hybrid_a2,*v_ho_hybrid_a3,*v_ho_hybrid_a4 and skip;
     float v_ho_hybrid_hol and skip;
     v_ho_hybrid_hol:=get_f_variable("lambda",RValue);
     if(v_ho_hybrid_hol>=1.0) then 
     {
         return<==1 and RValue:=0;
         skip
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         if(v_ho_hybrid_hol<=0.0) then 
         {
             v_ho_hybrid_hol:=0.0
         }
         else 
         {
              skip 
         };
         v_ho_hybrid_bp:=hybrid_first;
         if(v_ho_hybrid_bp=NULL) then 
         {
             return<==1 and RValue:=1;
             skip
         }
         else 
         {
              skip 
         };
         if(return=0)   then 
         {
             while( return=0 AND  1)
             {
                 continue<==0 and skip;
                 if(v_ho_hybrid_bp=NULL) then 
                 {
                     return<==1 and RValue:=0;
                     skip
                 }
                 else 
                 {
                      skip 
                 };
                 if(return=0)   then 
                 {
                     v_ho_hybrid_a1:=v_ho_hybrid_bp->atom1;
                     v_ho_hybrid_a2:=v_ho_hybrid_bp->atom2;
                     v_ho_hybrid_a3:=v_ho_hybrid_bp->atom3;
                     v_ho_hybrid_a4:=v_ho_hybrid_bp->atom4;
                     if(v_ho_hybrid_a1->active OR v_ho_hybrid_a2->active OR v_ho_hybrid_a3->active OR v_ho_hybrid_a4->active) then 
                     {
                         v_ho_hybrid_x1:=(v_ho_hybrid_a2->x-v_ho_hybrid_a1->x+lambda*(v_ho_hybrid_a2->dx-v_ho_hybrid_a1->dx));
                         v_ho_hybrid_y1:=(v_ho_hybrid_a2->y-v_ho_hybrid_a1->y+lambda*(v_ho_hybrid_a2->dy-v_ho_hybrid_a1->dy));
                         v_ho_hybrid_z1:=(v_ho_hybrid_a2->z-v_ho_hybrid_a1->z+lambda*(v_ho_hybrid_a2->dz-v_ho_hybrid_a1->dz));
                         v_ho_hybrid_x2:=(v_ho_hybrid_a3->x-v_ho_hybrid_a1->x+lambda*(v_ho_hybrid_a3->dx-v_ho_hybrid_a1->dx));
                         v_ho_hybrid_y2:=(v_ho_hybrid_a3->y-v_ho_hybrid_a1->y+lambda*(v_ho_hybrid_a3->dy-v_ho_hybrid_a1->dy));
                         v_ho_hybrid_z2:=(v_ho_hybrid_a3->z-v_ho_hybrid_a1->z+lambda*(v_ho_hybrid_a3->dz-v_ho_hybrid_a1->dz));
                         v_ho_hybrid_x3:=(v_ho_hybrid_a4->x-v_ho_hybrid_a1->x+lambda*(v_ho_hybrid_a4->dx-v_ho_hybrid_a1->dx));
                         v_ho_hybrid_y3:=(v_ho_hybrid_a4->y-v_ho_hybrid_a1->y+lambda*(v_ho_hybrid_a4->dy-v_ho_hybrid_a1->dy));
                         v_ho_hybrid_z3:=(v_ho_hybrid_a4->z-v_ho_hybrid_a1->z+lambda*(v_ho_hybrid_a4->dz-v_ho_hybrid_a1->dz));
                         v_ho_hybrid_cx1:=v_ho_hybrid_y1*v_ho_hybrid_z2-v_ho_hybrid_y2*v_ho_hybrid_z1;
                         v_ho_hybrid_cy1:=-v_ho_hybrid_x1*v_ho_hybrid_z2+v_ho_hybrid_x2*v_ho_hybrid_z1;
                         v_ho_hybrid_cz1:=v_ho_hybrid_x1*v_ho_hybrid_y2-v_ho_hybrid_x2*v_ho_hybrid_y1;
                         v_ho_hybrid_r:=v_ho_hybrid_cx1*v_ho_hybrid_cx1+v_ho_hybrid_cy1*v_ho_hybrid_cy1+v_ho_hybrid_cz1*v_ho_hybrid_cz1;
                         if(v_ho_hybrid_r<1.e-16) then 
                         {
                             if(v_ho_hybrid_bp=v_ho_hybrid_bp->next$) then 
                             {
                                 return<==1 and RValue:=1;
                                 skip
                             }
                             else 
                             {
                                  skip 
                             };
                             if(return=0)   then 
                             {
                                 v_ho_hybrid_bp:=v_ho_hybrid_bp->next$;
                                 continue<==1 and skip
                              }
                             else
                             {
                                 skip
                             }
                         }
                         else
                         {
                             skip
                         }
                         
                     }
                     else 
                     {
                          skip 
                     };
                     if(continue=0)   then 
                     {
                         if(return=0)  then
                         {
                             v_ho_hybrid_r:=sqrt(v_ho_hybrid_r);
                             v_ho_hybrid_hite:=v_ho_hybrid_cx1*v_ho_hybrid_x3+v_ho_hybrid_cy1*v_ho_hybrid_y3+v_ho_hybrid_cz1*v_ho_hybrid_z3;
                             v_ho_hybrid_hite:=v_ho_hybrid_hite/ v_ho_hybrid_r;
                             v_ho_hybrid_r:=v_ho_hybrid_hite*(1.0+v_ho_hybrid_hol)-v_ho_hybrid_bp->offset*(1.0-v_ho_hybrid_hol);
                             * V:=* V+(v_ho_hybrid_bp->k)*v_ho_hybrid_r*v_ho_hybrid_r
                         }
                         else
                         {
                             skip
                         }
                     }
                     else
                     {
                         skip
                     }
                     
                 }
                 else 
                 {
                      skip 
                 };
                 if(continue=0)  then
                 {
                     if(return=0)  then
                     {
                         if(v_ho_hybrid_bp=v_ho_hybrid_bp->next$) then 
                         {
                             return<==1 and RValue:=1;
                             skip
                         }
                         else 
                         {
                              skip 
                         };
                         if(return=0)   then 
                         {
                             v_ho_hybrid_bp:=v_ho_hybrid_bp->next$
                         }
                         else
                         {
                             skip
                         }
                     }
                     else
                     {
                         skip
                     }
                 }
                 else
                 {
                     skip
                 }
             };
             continue<==0 and skip
         }
         else
         {
             skip
         }
     }
     else
     {
         skip
     }
     )
     }; 
  function f_ho_hybrid ( float lambda,int RValue )
 {
     frame(f_ho_hybrid_bp,f_ho_hybrid_x1,f_ho_hybrid_y1,f_ho_hybrid_z1,f_ho_hybrid_x2,f_ho_hybrid_y2,f_ho_hybrid_z2,f_ho_hybrid_x3,f_ho_hybrid_y3,f_ho_hybrid_z3,f_ho_hybrid_r,f_ho_hybrid_cx1,f_ho_hybrid_cy1,f_ho_hybrid_cz1,f_ho_hybrid_dx,f_ho_hybrid_dy,f_ho_hybrid_dz,f_ho_hybrid_hite,f_ho_hybrid_df,f_ho_hybrid_r3,f_ho_hybrid_c,f_ho_hybrid_a1,f_ho_hybrid_a2,f_ho_hybrid_a3,f_ho_hybrid_a4,f_ho_hybrid_at,f_ho_hybrid_i,f_ho_hybrid_hol,return,continue) and ( 
     int continue<==0 and skip;
     int return<==0 and skip;
     HYBRID *f_ho_hybrid_bp and skip;
     float f_ho_hybrid_x1,f_ho_hybrid_y1,f_ho_hybrid_z1,f_ho_hybrid_x2,f_ho_hybrid_y2,f_ho_hybrid_z2,f_ho_hybrid_x3,f_ho_hybrid_y3,f_ho_hybrid_z3 and skip;
     float f_ho_hybrid_r,f_ho_hybrid_cx1,f_ho_hybrid_cy1,f_ho_hybrid_cz1 and skip;
     float f_ho_hybrid_dx,f_ho_hybrid_dy,f_ho_hybrid_dz and skip;
     float f_ho_hybrid_hite and skip;
     float f_ho_hybrid_df and skip;
     float f_ho_hybrid_r3,f_ho_hybrid_c and skip;
     ATOM *f_ho_hybrid_a1,*f_ho_hybrid_a2,*f_ho_hybrid_a3,*f_ho_hybrid_a4,*f_ho_hybrid_at and skip;
     int f_ho_hybrid_i and skip;
     float f_ho_hybrid_hol and skip;
     f_ho_hybrid_hol:=get_f_variable("lambda",RValue);
     if(f_ho_hybrid_hol>=1.0) then 
     {
         return<==1 and RValue:=0;
         skip
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         if(f_ho_hybrid_hol<=0.0) then 
         {
             f_ho_hybrid_hol:=0.0
         }
         else 
         {
              skip 
         };
         f_ho_hybrid_bp:=hybrid_first;
         if(f_ho_hybrid_bp=NULL) then 
         {
             return<==1 and RValue:=1;
             skip
         }
         else 
         {
              skip 
         };
         if(return=0)   then 
         {
             while( return=0 AND  1)
             {
                 if(f_ho_hybrid_bp=NULL) then 
                 {
                     return<==1 and RValue:=0;
                     skip
                 }
                 else 
                 {
                      skip 
                 };
                 if(return=0)   then 
                 {
                     f_ho_hybrid_a1:=f_ho_hybrid_bp->atom1;
                     f_ho_hybrid_a2:=f_ho_hybrid_bp->atom2;
                     f_ho_hybrid_a3:=f_ho_hybrid_bp->atom3;
                     f_ho_hybrid_a4:=f_ho_hybrid_bp->atom4;
                     if(f_ho_hybrid_a1->active OR f_ho_hybrid_a2->active OR f_ho_hybrid_a3->active OR f_ho_hybrid_a4->active) then 
                     {
                         continue<==0 and skip;
                         f_ho_hybrid_i:=0;
                         
                         while( return=0 AND  f_ho_hybrid_i<3)
                         {
                              continue<==0 and skip;
                             f_ho_hybrid_x1:=(f_ho_hybrid_a2->x-f_ho_hybrid_a1->x+lambda*(f_ho_hybrid_a2->dx-f_ho_hybrid_a1->dx));
                             f_ho_hybrid_y1:=(f_ho_hybrid_a2->y-f_ho_hybrid_a1->y+lambda*(f_ho_hybrid_a2->dy-f_ho_hybrid_a1->dy));
                             f_ho_hybrid_z1:=(f_ho_hybrid_a2->z-f_ho_hybrid_a1->z+lambda*(f_ho_hybrid_a2->dz-f_ho_hybrid_a1->dz));
                             f_ho_hybrid_x2:=(f_ho_hybrid_a3->x-f_ho_hybrid_a1->x+lambda*(f_ho_hybrid_a3->dx-f_ho_hybrid_a1->dx));
                             f_ho_hybrid_y2:=(f_ho_hybrid_a3->y-f_ho_hybrid_a1->y+lambda*(f_ho_hybrid_a3->dy-f_ho_hybrid_a1->dy));
                             f_ho_hybrid_z2:=(f_ho_hybrid_a3->z-f_ho_hybrid_a1->z+lambda*(f_ho_hybrid_a3->dz-f_ho_hybrid_a1->dz));
                             f_ho_hybrid_x3:=(f_ho_hybrid_a4->x-f_ho_hybrid_a1->x+lambda*(f_ho_hybrid_a4->dx-f_ho_hybrid_a1->dx));
                             f_ho_hybrid_y3:=(f_ho_hybrid_a4->y-f_ho_hybrid_a1->y+lambda*(f_ho_hybrid_a4->dy-f_ho_hybrid_a1->dy));
                             f_ho_hybrid_z3:=(f_ho_hybrid_a4->z-f_ho_hybrid_a1->z+lambda*(f_ho_hybrid_a4->dz-f_ho_hybrid_a1->dz));
                             f_ho_hybrid_cx1:=f_ho_hybrid_y1*f_ho_hybrid_z2-f_ho_hybrid_y2*f_ho_hybrid_z1;
                             f_ho_hybrid_cy1:=-f_ho_hybrid_x1*f_ho_hybrid_z2+f_ho_hybrid_x2*f_ho_hybrid_z1;
                             f_ho_hybrid_cz1:=f_ho_hybrid_x1*f_ho_hybrid_y2-f_ho_hybrid_x2*f_ho_hybrid_y1;
                             f_ho_hybrid_r:=f_ho_hybrid_cx1*f_ho_hybrid_cx1+f_ho_hybrid_cy1*f_ho_hybrid_cy1+f_ho_hybrid_cz1*f_ho_hybrid_cz1;
                             if(f_ho_hybrid_r<1.e-16) then 
                             {
                                 if(f_ho_hybrid_bp=f_ho_hybrid_bp->next$) then 
                                 {
                                     return<==1 and RValue:=1;
                                     skip
                                 }
                                 else 
                                 {
                                      skip 
                                 };
                                 if(return=0)   then 
                                 {
                                     f_ho_hybrid_bp:=f_ho_hybrid_bp->next$;
                                     continue<==1 and skip;
                                      f_ho_hybrid_i:=f_ho_hybrid_i+1}
                                     else
                                     {
                                         skip
                                     }
                                     
                                 }
                                 else 
                                 {
                                      skip 
                                 };
                                 if(continue=0)   then 
                                 {
                                     if(return=0)  then
                                     {
                                         f_ho_hybrid_r:=sqrt(f_ho_hybrid_r);
                                         f_ho_hybrid_r3:=f_ho_hybrid_r*f_ho_hybrid_r*f_ho_hybrid_r;
                                         f_ho_hybrid_hite:=f_ho_hybrid_cx1*f_ho_hybrid_x3+f_ho_hybrid_cy1*f_ho_hybrid_y3+f_ho_hybrid_cz1*f_ho_hybrid_z3;
                                         f_ho_hybrid_hite:=f_ho_hybrid_hite/ f_ho_hybrid_r;
                                         f_ho_hybrid_df:=2*f_ho_hybrid_bp->k*(1.0-f_ho_hybrid_hol)*((1.0-f_ho_hybrid_hol)*f_ho_hybrid_bp->offset-(1.0+f_ho_hybrid_hol)*f_ho_hybrid_hite)/ 3;
                                         f_ho_hybrid_a4->fx:=f_ho_hybrid_a4->fx+f_ho_hybrid_df/ f_ho_hybrid_r*f_ho_hybrid_cx1;
                                         f_ho_hybrid_a4->fy:=f_ho_hybrid_a4->fy+f_ho_hybrid_df/ f_ho_hybrid_r*f_ho_hybrid_cy1;
                                         f_ho_hybrid_a4->fz:=f_ho_hybrid_a4->fz+f_ho_hybrid_df/ f_ho_hybrid_r*f_ho_hybrid_cz1;
                                         f_ho_hybrid_a1->fx:=f_ho_hybrid_a1->fx-f_ho_hybrid_df/ f_ho_hybrid_r*f_ho_hybrid_cx1;
                                         f_ho_hybrid_a1->fy:=f_ho_hybrid_a1->fy-f_ho_hybrid_df/ f_ho_hybrid_r*f_ho_hybrid_cy1;
                                         f_ho_hybrid_a1->fz:=f_ho_hybrid_a1->fz-f_ho_hybrid_df/ f_ho_hybrid_r*f_ho_hybrid_cz1;
                                         f_ho_hybrid_dx:=-f_ho_hybrid_cx1*f_ho_hybrid_x3/ f_ho_hybrid_r3*f_ho_hybrid_df;
                                         f_ho_hybrid_dy:=-f_ho_hybrid_cy1*f_ho_hybrid_y3/ f_ho_hybrid_r3*f_ho_hybrid_df;
                                         f_ho_hybrid_dz:=-f_ho_hybrid_cz1*f_ho_hybrid_z3/ f_ho_hybrid_r3*f_ho_hybrid_df;
                                         f_ho_hybrid_c:=f_ho_hybrid_df*((-f_ho_hybrid_y3*f_ho_hybrid_z2+f_ho_hybrid_z3*f_ho_hybrid_y2)/ f_ho_hybrid_r);
                                         f_ho_hybrid_c:=f_ho_hybrid_c+f_ho_hybrid_dx*(f_ho_hybrid_y2*(f_ho_hybrid_x1*f_ho_hybrid_y2-f_ho_hybrid_x2*f_ho_hybrid_y1)-f_ho_hybrid_z2*(f_ho_hybrid_x2*f_ho_hybrid_z1-f_ho_hybrid_x1*f_ho_hybrid_z2));
                                         f_ho_hybrid_a2->fx:=f_ho_hybrid_a2->fx+f_ho_hybrid_c;
                                         f_ho_hybrid_a1->fx:=f_ho_hybrid_a1->fx-f_ho_hybrid_c;
                                         f_ho_hybrid_c:=f_ho_hybrid_df*((-f_ho_hybrid_z3*f_ho_hybrid_x2+f_ho_hybrid_x3*f_ho_hybrid_z2)/ f_ho_hybrid_r);
                                         f_ho_hybrid_c:=f_ho_hybrid_c+f_ho_hybrid_dy*(f_ho_hybrid_z2*(f_ho_hybrid_y1*f_ho_hybrid_z2-f_ho_hybrid_y2*f_ho_hybrid_z1)-f_ho_hybrid_x2*(f_ho_hybrid_x1*f_ho_hybrid_y2-f_ho_hybrid_x2*f_ho_hybrid_y1));
                                         f_ho_hybrid_a2->fy:=f_ho_hybrid_a2->fy+f_ho_hybrid_c;
                                         f_ho_hybrid_a1->fy:=f_ho_hybrid_a1->fy-f_ho_hybrid_c;
                                         f_ho_hybrid_c:=f_ho_hybrid_df*((-f_ho_hybrid_x3*f_ho_hybrid_y2+f_ho_hybrid_y3*f_ho_hybrid_x2)/ f_ho_hybrid_r);
                                         f_ho_hybrid_c:=f_ho_hybrid_c+f_ho_hybrid_dz*(f_ho_hybrid_x2*(f_ho_hybrid_x2*f_ho_hybrid_z1-f_ho_hybrid_x1*f_ho_hybrid_z2)-f_ho_hybrid_y2*(f_ho_hybrid_y1*f_ho_hybrid_z2-f_ho_hybrid_y2*f_ho_hybrid_z1));
                                         f_ho_hybrid_a2->fz:=f_ho_hybrid_a2->fz+f_ho_hybrid_c;
                                         f_ho_hybrid_a1->fz:=f_ho_hybrid_a1->fz-f_ho_hybrid_c;
                                         f_ho_hybrid_c:=f_ho_hybrid_df*((-f_ho_hybrid_z3*f_ho_hybrid_y1+f_ho_hybrid_y3*f_ho_hybrid_z1)/ f_ho_hybrid_r);
                                         f_ho_hybrid_c:=f_ho_hybrid_c-f_ho_hybrid_dx*(f_ho_hybrid_y1*(f_ho_hybrid_x1*f_ho_hybrid_y2-f_ho_hybrid_x2*f_ho_hybrid_y1)-f_ho_hybrid_z1*(f_ho_hybrid_x2*f_ho_hybrid_z1-f_ho_hybrid_x1*f_ho_hybrid_z2));
                                         f_ho_hybrid_a3->fx:=f_ho_hybrid_a3->fx+f_ho_hybrid_c;
                                         f_ho_hybrid_a1->fx:=f_ho_hybrid_a1->fx-f_ho_hybrid_c;
                                         f_ho_hybrid_c:=f_ho_hybrid_df*((-f_ho_hybrid_x3*f_ho_hybrid_z1+f_ho_hybrid_z3*f_ho_hybrid_x1)/ f_ho_hybrid_r);
                                         f_ho_hybrid_c:=f_ho_hybrid_c-f_ho_hybrid_dy*(f_ho_hybrid_z1*(f_ho_hybrid_y1*f_ho_hybrid_z2-f_ho_hybrid_y2*f_ho_hybrid_z1)-f_ho_hybrid_x1*(f_ho_hybrid_x1*f_ho_hybrid_y2-f_ho_hybrid_x2*f_ho_hybrid_y1));
                                         f_ho_hybrid_a3->fy:=f_ho_hybrid_a3->fy+f_ho_hybrid_c;
                                         f_ho_hybrid_a1->fy:=f_ho_hybrid_a1->fy-f_ho_hybrid_c;
                                         f_ho_hybrid_c:=f_ho_hybrid_df*((-f_ho_hybrid_y3*f_ho_hybrid_x1+f_ho_hybrid_x3*f_ho_hybrid_y1)/ f_ho_hybrid_r);
                                         f_ho_hybrid_c:=f_ho_hybrid_c-f_ho_hybrid_dz*(f_ho_hybrid_x1*(f_ho_hybrid_x2*f_ho_hybrid_z1-f_ho_hybrid_x1*f_ho_hybrid_z2)-f_ho_hybrid_y1*(f_ho_hybrid_y1*f_ho_hybrid_z2-f_ho_hybrid_y2*f_ho_hybrid_z1));
                                         f_ho_hybrid_a3->fz:=f_ho_hybrid_a3->fz+f_ho_hybrid_c;
                                         f_ho_hybrid_a1->fz:=f_ho_hybrid_a1->fz-f_ho_hybrid_c;
                                         f_ho_hybrid_at:=f_ho_hybrid_a1;
                                         f_ho_hybrid_a1:=f_ho_hybrid_a2;
                                         f_ho_hybrid_a2:=f_ho_hybrid_a3;
                                         f_ho_hybrid_a3:=f_ho_hybrid_at;
                                         f_ho_hybrid_i:=f_ho_hybrid_i+1
                                     }
                                     else
                                     {
                                         skip
                                     }
                                 }
                                 else
                                 {
                                     skip
                                 }
                                 
                             };
                             continue<==0 and skip;
                             if(return=0)   then 
                             {
                                 if(f_ho_hybrid_a1->active=0) then 
                                 {
                                     f_ho_hybrid_a1->fx:=0;
                                     f_ho_hybrid_a1->fy:=0.0;
                                     f_ho_hybrid_a1->fz:=0
                                     
                                 }
                                 else 
                                 {
                                      skip 
                                 };
                                 if(f_ho_hybrid_a2->active=0) then 
                                 {
                                     f_ho_hybrid_a2->fx:=0;
                                     f_ho_hybrid_a2->fy:=0.0;
                                     f_ho_hybrid_a2->fz:=0
                                     
                                 }
                                 else 
                                 {
                                      skip 
                                 };
                                 if(f_ho_hybrid_a3->active=0) then 
                                 {
                                     f_ho_hybrid_a3->fx:=0;
                                     f_ho_hybrid_a3->fy:=0.0;
                                     f_ho_hybrid_a3->fz:=0
                                     
                                 }
                                 else 
                                 {
                                      skip 
                                 };
                                 if(f_ho_hybrid_a4->active=0) then 
                                 {
                                     f_ho_hybrid_a4->fx:=0;
                                     f_ho_hybrid_a4->fy:=0.0;
                                     f_ho_hybrid_a4->fz:=0
                                     
                                 }
                                 else 
                                 {
                                      skip 
                                 }
                             }
                             else
                             {
                                 skip
                             }
                         }
                         else
                         {
                             skip
                         }
                         
                     }
                     else 
                     {
                          skip 
                     };
                     if(return=0)  then
                     {
                         if(f_ho_hybrid_bp=f_ho_hybrid_bp->next$) then 
                         {
                             return<==1 and RValue:=1;
                             skip
                         }
                         else 
                         {
                              skip 
                         };
                         if(return=0)   then 
                         {
                             f_ho_hybrid_bp:=f_ho_hybrid_bp->next$
                         }
                         else
                         {
                             skip
                         }
                     }
                     else
                     {
                         skip
                     }
                 }
             }
             else
             {
                 skip
             }
         }
         else
         {
             skip
         }
         )
         }; 
  function gsdg_hybrid ( ATOM *who,int RValue )
 {
     frame(gsdg_hybrid_a1,gsdg_hybrid_a2,gsdg_hybrid_a3,gsdg_hybrid_a4,gsdg_hybrid_i,gsdg_hybrid_x3,gsdg_hybrid_y3,gsdg_hybrid_z3,gsdg_hybrid_x1,gsdg_hybrid_y1,gsdg_hybrid_z1,gsdg_hybrid_x2,gsdg_hybrid_y2,gsdg_hybrid_z2,gsdg_hybrid_hite,gsdg_hybrid_r,gsdg_hybrid_cx1,gsdg_hybrid_cy1,gsdg_hybrid_cz1,gsdg_hybrid_hp,return,break$,continue) and ( 
     int continue<==0 and skip;
     int break$<==0 and skip;
     int return<==0 and skip;
     ATOM *gsdg_hybrid_a1,*gsdg_hybrid_a2,*gsdg_hybrid_a3,*gsdg_hybrid_a4 and skip;
     int gsdg_hybrid_i and skip;
     float gsdg_hybrid_x3,gsdg_hybrid_y3,gsdg_hybrid_z3 and skip;
     float gsdg_hybrid_x1,gsdg_hybrid_y1,gsdg_hybrid_z1 and skip;
     float gsdg_hybrid_x2,gsdg_hybrid_y2,gsdg_hybrid_z2 and skip;
     float gsdg_hybrid_hite,gsdg_hybrid_r,gsdg_hybrid_cx1,gsdg_hybrid_cy1,gsdg_hybrid_cz1 and skip;
     HYBRID *gsdg_hybrid_hp and skip;
     if(hybrid_first=NULL) then 
     {
         return<==1 and RValue:=0;
         skip
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         gsdg_hybrid_hp:=hybrid_first;
         if(!who->active) then 
         {
             return<==1 and RValue:=0;
             skip
         }
         else 
         {
              skip 
         };
         if(return=0)   then 
         {
             break$<==0 and skip;
             while( break$=0 AND  gsdg_hybrid_hp!=NULL)
             {
                 continue<==0 and skip;
                 gsdg_hybrid_a1:=gsdg_hybrid_hp->atom1;
                 gsdg_hybrid_a2:=gsdg_hybrid_hp->atom2;
                 gsdg_hybrid_a3:=gsdg_hybrid_hp->atom3;
                 gsdg_hybrid_a4:=gsdg_hybrid_hp->atom4;
                 if(gsdg_hybrid_a4=who) then 
                 {
                     gsdg_hybrid_x1:=(gsdg_hybrid_a2->x-gsdg_hybrid_a1->x);
                     gsdg_hybrid_y1:=(gsdg_hybrid_a2->y-gsdg_hybrid_a1->y);
                     gsdg_hybrid_z1:=(gsdg_hybrid_a2->z-gsdg_hybrid_a1->z);
                     gsdg_hybrid_x2:=(gsdg_hybrid_a3->x-gsdg_hybrid_a1->x);
                     gsdg_hybrid_y2:=(gsdg_hybrid_a3->y-gsdg_hybrid_a1->y);
                     gsdg_hybrid_z2:=(gsdg_hybrid_a3->z-gsdg_hybrid_a1->z);
                     gsdg_hybrid_x3:=(gsdg_hybrid_a4->x-gsdg_hybrid_a1->x);
                     gsdg_hybrid_y3:=(gsdg_hybrid_a4->y-gsdg_hybrid_a1->y);
                     gsdg_hybrid_z3:=(gsdg_hybrid_a4->z-gsdg_hybrid_a1->z);
                     gsdg_hybrid_cx1:=gsdg_hybrid_y1*gsdg_hybrid_z2-gsdg_hybrid_y2*gsdg_hybrid_z1;
                     gsdg_hybrid_cy1:=-gsdg_hybrid_x1*gsdg_hybrid_z2+gsdg_hybrid_x2*gsdg_hybrid_z1;
                     gsdg_hybrid_cz1:=gsdg_hybrid_x1*gsdg_hybrid_y2-gsdg_hybrid_x2*gsdg_hybrid_y1;
                     gsdg_hybrid_r:=gsdg_hybrid_cx1*gsdg_hybrid_cx1+gsdg_hybrid_cy1*gsdg_hybrid_cy1+gsdg_hybrid_cz1*gsdg_hybrid_cz1;
                     if(gsdg_hybrid_r<1.e-16) then 
                     {
                         if(gsdg_hybrid_hp->next$=gsdg_hybrid_hp) then 
                         {
                             break$<==1 and skip
                          }
                         else 
                         {
                              skip 
                         };
                         if(break$=0)   then
                         {
                             gsdg_hybrid_hp:=gsdg_hybrid_hp->next$;
                             continue<==1 and skip
                          }
                         else
                         {
                             skip
                         }
                         
                     }
                     else 
                     {
                          skip 
                     };
                     if(break$=0)   then 
                     {
                         if(continue=0)   then 
                         {
                             gsdg_hybrid_r:=sqrt(gsdg_hybrid_r);
                             gsdg_hybrid_r:=1.0/ gsdg_hybrid_r;
                             gsdg_hybrid_cx1:=gsdg_hybrid_cx1*gsdg_hybrid_r;
                             gsdg_hybrid_cy1:=gsdg_hybrid_cy1*gsdg_hybrid_r;
                             gsdg_hybrid_cz1:=gsdg_hybrid_cz1*gsdg_hybrid_r;
                             gsdg_hybrid_hite:=gsdg_hybrid_cx1*gsdg_hybrid_x3+gsdg_hybrid_cy1*gsdg_hybrid_y3+gsdg_hybrid_cz1*gsdg_hybrid_z3;
                             gsdg_hybrid_hite:=gsdg_hybrid_hp->offset-gsdg_hybrid_hite;
                             gsdg_hybrid_cx1:=gsdg_hybrid_cx1*gsdg_hybrid_hite;
                             gsdg_hybrid_cy1:=gsdg_hybrid_cy1*gsdg_hybrid_hite;
                             gsdg_hybrid_cz1:=gsdg_hybrid_cz1*gsdg_hybrid_hite;
                             gsdg_hybrid_a4->x:=gsdg_hybrid_a4->x+gsdg_hybrid_cx1;
                             gsdg_hybrid_a4->y:=gsdg_hybrid_a4->y+gsdg_hybrid_cy1;
                             gsdg_hybrid_a4->z:=gsdg_hybrid_a4->z+gsdg_hybrid_cz1
                         }
                         else
                         {
                             skip
                         }
                     }
                     else
                     {
                         skip
                     }
                     
                 }
                 else 
                 {
                      skip 
                 };
                 if(break$=0)   then 
                 {
                     if(continue=0)  then
                     {
                         if(gsdg_hybrid_hp->next$=gsdg_hybrid_hp) then 
                         {
                             break$<==1 and skip
                          }
                         else 
                         {
                              skip 
                         };
                         if(break$=0)   then
                         {
                             gsdg_hybrid_hp:=gsdg_hybrid_hp->next$
                         }
                         else
                         {
                             skip
                         }
                     }
                     else
                     {
                         skip
                     }
                 }
                 else
                 {
                     skip
                 }
             };
             break$<==0 and skip;
             continue<==0 and skip;
             return<==1 and RValue:=1;
             skip
         }
         else
         {
             skip
         }
     }
     else
     {
         skip
     }
     )
     }; 


 ATOM *ap and skip;
 function math ( char **tokens,float *fvalue,int *ivalue,FILE *ip,FILE *op,int echo,int RValue )
 {
     frame(math_goto_good_op,math_adata,math_bdata,math_atype,math_btype,math_foutpointer,math_fp,math_fa,math_fb,math_ioutpointer,math_ia,math_ib,math_vp,math_vos,math_i,math_j,math_temp$_1,math_temp$_2,math_temp$_3,math_24_29_33_37_42_50_51_temp$_4,math_24_29_33_37_42_50_51_temp$_5,math_24_29_33_37_42_50_53_55_57_61_65_67_68_goto_goop_op_1,return,break$) and ( 
     int break$<==0 and skip;
     int return<==0 and skip;
     int math_goto_good_op<==0 and skip;
     int math_adata,math_bdata and skip;
     int math_atype,math_btype and skip;
     float *math_foutpointer,*math_fp,math_fa,math_fb and skip;
     int *math_ioutpointer,math_ia,math_ib and skip;
     VARIABLE *math_vp,*math_vos and skip;
     int math_i,math_j and skip;
     int math_temp$_1 and skip;
     math_temp$_1:=a_number(RValue);
     set_i_variable("numatm",math_temp$_1,RValue);
     float math_temp$_2 and skip;
     math_temp$_2:=a_l2_f(RValue);
     set_f_variable("l2f",math_temp$_2,RValue);
     float math_temp$_3 and skip;
     math_temp$_3:=a_max_f(RValue);
     set_f_variable("lmaxf",math_temp$_3,RValue);
     math_vp:=match_variable(&tokens[1,0],RValue) ;
     if((math_vp)!=NULL) then 
     {
         math_adata:=2;
         math_atype:=math_vp->type;
         math_vos:=math_vp;
         if(math_atype=1) then 
         {
             math_fa:=math_vp->value.f
             
         }
         else 
         {
              skip 
         };
         math_foutpointer:=&math_vp->value.f;
         if(math_atype=0) then 
         {
             math_ia:=math_vp->value.i
             
         }
         else 
         {
              skip 
         };
         math_ioutpointer:=&math_vp->value.i
         
     }
     else
     {
         math_foutpointer:=getatomdata(&tokens[1,0],RValue) ;
         if((math_foutpointer)!=NULL) then 
         {
             math_adata:=0;
             math_atype:=1;
             math_fa:=* math_foutpointer
         }
         else
         {
             if(extern validatom(&tokens[1,0],RValue)!=0) then 
             {
                 return<==1 and RValue:=1;
                 skip
             }
             else 
             {
                  skip 
             };
             if(return=0)   then 
             {
                 math_foutpointer:=NULL;
                 math_adata:=1;
                 math_fa:=fvalue[1];
                 math_ia:=ivalue[1];
                 math_atype:=1;
                 if(extern tisint(&tokens[1,0],RValue)=1) then 
                 {
                     math_atype:=0
                 }
                 else 
                 {
                      skip 
                 }
             }
             else
             {
                 skip
             }
         }
     };
     if(return=0)  then
     {
         math_vp:=match_variable(&tokens[2,0],RValue) ;
         if((math_vp)!=NULL) then 
         {
             math_btype:=math_vp->type;
             if(math_btype=1) then 
             {
                 math_fb:=math_vp->value.f
             }
             else 
             {
                  skip 
             };
             if(math_btype=0) then 
             {
                 math_ib:=math_vp->value.i
             }
             else 
             {
                  skip 
             }
             
         }
         else
         {
             math_fp:=getatomdata(&tokens[2,0],RValue) ;
             if((math_fp)!=NULL) then 
             {
                 math_btype:=1;
                 math_fb:=* math_fp
             }
             else
             {
                 if(extern validatom(&tokens[2,0],RValue)!=0) then 
                 {
                     return<==1 and RValue:=1;
                     skip
                 }
                 else 
                 {
                      skip 
                 };
                 if(return=0)   then 
                 {
                     math_fb:=fvalue[2];
                     math_ib:=ivalue[2];
                     math_btype:=1;
                     if(extern tisint(&tokens[2,0],RValue)=1) then 
                     {
                         math_btype:=0
                     }
                     else 
                     {
                          skip 
                     }
                 }
                 else
                 {
                     skip
                 }
             }
         };
         if(return=0)  then
         {
             if(math_atype=1) then 
             {
                 math_ia:=(int)math_fa
             }
             else 
             {
                  skip 
             };
             if(math_atype=0) then 
             {
                 math_fa:=(float)math_ia
             }
             else 
             {
                  skip 
             };
             if(math_btype=1) then 
             {
                 math_ib:=(int)math_fb
             }
             else 
             {
                  skip 
             };
             if(math_btype=0) then 
             {
                 math_fb:=(float)math_ib
             }
             else 
             {
                  skip 
             };
             if(strcmp(&tokens[0,0],"add")=0) then 
             {
                 if(math_atype=1) then 
                 {
                     math_fa:=math_fa+math_fb
                 }
                 else 
                 {
                      skip 
                 };
                 if(math_atype=0) then 
                 {
                     math_ia:=math_ia+math_ib
                 }
                 else 
                 {
                      skip 
                 };
                 math_goto_good_op:=1
                 
             }
             else
             {
                 if(strcmp(&tokens[0,0],"sub")=0) then 
                 {
                     if(math_atype=1) then 
                     {
                         math_fa:=math_fa-math_fb
                     }
                     else 
                     {
                          skip 
                     };
                     if(math_atype=0) then 
                     {
                         math_ia:=math_ia-math_ib
                     }
                     else
                     {
                         math_goto_good_op:=1
                     }
                 }
                 else
                 {
                     if(strcmp(&tokens[0,0],"mul")=0) then 
                     {
                         if(math_atype=1) then 
                         {
                             math_fa:=math_fa*math_fb
                         }
                         else 
                         {
                              skip 
                         };
                         if(math_atype=0) then 
                         {
                             math_ia:=math_ia*math_ib
                         }
                         else 
                         {
                              skip 
                         };
                         math_goto_good_op:=1
                     }
                     else
                     {
                         if(strcmp(&tokens[0,0],"div")=0) then 
                         {
                             if(math_atype=1) then 
                             {
                                 math_fa:=math_fa/ math_fb
                             }
                             else 
                             {
                                  skip 
                             };
                             if(math_atype=0) then 
                             {
                                 math_ia:=math_ia/ math_ib
                             }
                             else 
                             {
                                  skip 
                             };
                             math_goto_good_op:=1
                         }
                         else
                         {
                             if(strcmp(&tokens[0,0],"fix")=0) then 
                             {
                                 if(math_adata=0) then 
                                 {
                                     math_ia:=(int)math_fa;
                                     * math_foutpointer:=(float)math_ia;
                                     if(echo) then 
                                     {
                                         fprintf(op,"%d \n",math_ia,RValue) and skip
                                     }
                                     else 
                                     {
                                          skip 
                                     };
                                     return<==1 and RValue:=1;
                                     skip
                                     
                                 }
                                 else 
                                 {
                                      skip 
                                 };
                                 if(return=0)   then 
                                 {
                                     if(math_atype=1) then 
                                     {
                                         math_atype:=0;
                                         math_ia:=(int)math_fa
                                         
                                     }
                                     else 
                                     {
                                          skip 
                                     };
                                     math_goto_good_op:=1
                                 }
                                 else
                                 {
                                     if(strcmp(&tokens[0,0],"sqrt")=0) then 
                                     {
                                         if(math_adata=0) then 
                                         {
                                             if(math_fa>0.0) then 
                                             {
                                                 * math_foutpointer:=sqrt(math_fa)
                                             }
                                             else
                                             {
                                                 * math_foutpointer:=-sqrt(-math_fa)
                                             };
                                             if(echo) then 
                                             {
                                                 fprintf(op,"%f \n",* math_foutpointer,RValue) and skip
                                             }
                                             else 
                                             {
                                                  skip 
                                             };
                                             return<==1 and RValue:=1;
                                             skip
                                             
                                         }
                                         else 
                                         {
                                              skip 
                                         };
                                         if(return=0)   then 
                                         {
                                             math_atype:=1;
                                             if(math_fa>0) then 
                                             {
                                                 math_fa:=sqrt(math_fa)
                                             }
                                             else
                                             {
                                                 math_fa:=-sqrt(-math_fa)
                                             };
                                             math_goto_good_op:=1
                                         }
                                         else
                                         {
                                             if(strcmp(&tokens[0,0],"linmin")=0) then 
                                             {
                                                 math_fa:=0.0;
                                                 float math_24_29_33_37_42_50_51_temp$_4 and skip;
                                                 math_24_29_33_37_42_50_51_temp$_4:=a_max_d(RValue);
                                                 int math_24_29_33_37_42_50_51_temp$_5 and skip;
                                                 math_24_29_33_37_42_50_51_temp$_5:=sqrt(math_24_29_33_37_42_50_51_temp$_4);
                                                 math_fa:=linmin(potentials,nused,math_24_29_33_37_42_50_51_temp$_5,RValue);
                                                 if(echo) then 
                                                 {
                                                     fprintf(op,"%f step to minimum\n",math_fa,RValue) and skip
                                                 }
                                                 else 
                                                 {
                                                      skip 
                                                 };
                                                 a_inc_d(math_fa,RValue);
                                                 math_goto_good_op:=1
                                             }
                                             else
                                             {
                                                 if(strcmp(&tokens[0,0],"nop")=0) then 
                                                 {
                                                     math_goto_good_op:=1
                                                 }
                                                 else
                                                 {
                                                     if(strcmp(&tokens[0,0],"mov")=0) then 
                                                     {
                                                         math_ia:=math_ib;
                                                         math_fa:=math_fb;
                                                         math_atype:=math_btype;
                                                         math_goto_good_op:=1
                                                     }
                                                     else
                                                     {
                                                         if(strcmp(&tokens[0,0],"max")=0) then 
                                                         {
                                                             if(math_atype=1 AND math_fa<math_fb) then 
                                                             {
                                                                 math_fa:=math_fb
                                                             }
                                                             else 
                                                             {
                                                                  skip 
                                                             };
                                                             if(math_atype=0 AND math_ia<math_ib) then 
                                                             {
                                                                 math_ia:=math_ib
                                                             }
                                                             else 
                                                             {
                                                                  skip 
                                                             };
                                                             math_goto_good_op:=1
                                                         }
                                                         else
                                                         {
                                                             if(strcmp(&tokens[0,0],"min")=0) then 
                                                             {
                                                                 if(math_atype=1 AND math_fa>math_fb) then 
                                                                 {
                                                                     math_fa:=math_fb
                                                                 }
                                                                 else 
                                                                 {
                                                                      skip 
                                                                 };
                                                                 if(math_atype=0 AND math_ia>math_ib) then 
                                                                 {
                                                                     math_ia:=math_ib
                                                                 }
                                                                 else 
                                                                 {
                                                                      skip 
                                                                 };
                                                                 math_goto_good_op:=1
                                                             }
                                                             else
                                                             {
                                                                 if(strcmp(&tokens[0,0],"randf")=0) then 
                                                                 {
                                                                     math_atype:=1;
                                                                     math_fa:=randf(RValue);
                                                                     math_goto_good_op:=1
                                                                 }
                                                                 else
                                                                 {
                                                                     if(strcmp(&tokens[0,0],"serial")=0) then 
                                                                     {
                                                                         int math_24_29_33_37_42_50_53_55_57_61_65_67_68_goto_goop_op_1<==0 and skip;
                                                                         math_ia:=100*math_ib-1;
                                                                         math_j:=math_ia+100;
                                                                         math_i:=-1;
                                                                         break$<==0 and skip;
                                                                         ap:=a_next(math_i,RValue) ;
                                                                         while( break$=0 AND  (ap)!=NULL)
                                                                         {
                                                                             math_i:=1;
                                                                             if(ap->serial>math_ia AND ap->serial<math_j) then 
                                                                             {
                                                                                 if(extern math_match_atom(&tokens[3,0],ap,RValue)!=0) then 
                                                                                 {
                                                                                     math_atype:=0;
                                                                                     math_ia:=ap->serial;
                                                                                     math_24_29_33_37_42_50_53_55_57_61_65_67_68_goto_goop_op_1:=1;
                                                                                     math_goto_good_op:=1;
                                                                                     break$<==1 and skip
                                                                                      
                                                                                 }
                                                                                 else 
                                                                                 {
                                                                                      skip 
                                                                                 }
                                                                             }
                                                                             else 
                                                                             {
                                                                                  skip 
                                                                             };
                                                                             ap:=a_next(math_i,RValue) 
                                                                         };
                                                                         break$<==0 and skip;
                                                                         if(!math_goto_good_op) then 
                                                                         {
                                                                             math_ia:=-1;
                                                                             math_atype:=0;
                                                                             math_goto_good_op:=1
                                                                             
                                                                         }
                                                                         else 
                                                                         {
                                                                              skip 
                                                                         }
                                                                     }
                                                                     else
                                                                     {
                                                                         if(strcmp(&tokens[0,0],"index")=0) then 
                                                                         {
                                                                             ap:=a_next(-1,RValue);
                                                                             math_i:=0;
                                                                             
                                                                             while(math_i<math_ib)
                                                                             {
                                                                                 ap:=a_next(math_i,RValue);
                                                                                 math_i:=math_i+1
                                                                                 
                                                                             };
                                                                             math_ia:=ap->serial;
                                                                             math_atype:=0;
                                                                             math_goto_good_op:=1
                                                                         }
                                                                         else
                                                                         {
                                                                             if(strcmp(&tokens[0,0],"jes")=0) then 
                                                                             {
                                                                                 if(tokens[3,0]='\0') then 
                                                                                 {
                                                                                     aaerror("label: required for a jump \n",RValue);
                                                                                     math_goto_good_op:=1
                                                                                 }
                                                                                 else
                                                                                 {
                                                                                     ap:=a_m_serial(math_ia,RValue);
                                                                                     if(ap=NULL) then 
                                                                                     {
                                                                                         return<==1 and RValue:=1;
                                                                                         skip
                                                                                     }
                                                                                     else 
                                                                                     {
                                                                                          skip 
                                                                                     };
                                                                                     if(return=0)   then 
                                                                                     {
                                                                                         if(strcmp(&ap->name[0],&tokens[2,0])=0) then 
                                                                                         {
                                                                                             rewind(ip,RValue) and skip;
                                                                                             math_findlabel(ip,&tokens[3,0],RValue)
                                                                                             
                                                                                         }
                                                                                         else 
                                                                                         {
                                                                                              skip 
                                                                                         };
                                                                                         math_goto_good_op:=1
                                                                                     }
                                                                                     else
                                                                                     {
                                                                                         skip
                                                                                     }
                                                                                 }
                                                                                 
                                                                             }
                                                                             else
                                                                     {
                                                                         if(strcmp(&tokens[0,0],"jnes")=0) then 
                                                                         {
                                                                             if(tokens[3,0]='\0') then 
                                                                             {
                                                                                 aaerror("label: required for a jump \n",RValue);
                                                                                 math_goto_good_op:=1
                                                                             }
                                                                             else
                                                                             {
                                                                                 ap:=a_m_serial(math_ia,RValue);
                                                                                 if(ap=NULL) then 
                                                                                 {
                                                                                     rewind(ip,RValue) and skip;
                                                                                     math_findlabel(ip,&tokens[3,0],RValue);
                                                                                     math_goto_good_op:=1
                                                                                     
                                                                                 }
                                                                                 else
                                                                                 {
                                                                                     if(strcmp(&ap->name[0],&tokens[2,0])!=0) then 
                                                                                     {
                                                                                         rewind(ip,RValue) and skip;
                                                                                         math_findlabel(ip,&tokens[3,0],RValue)
                                                                                         
                                                                                     }
                                                                                     else 
                                                                                     {
                                                                                          skip 
                                                                                     }
                                                                                 };
                                                                                 math_goto_good_op:=1
                                                                             }
                                                                             
                                                                         }
                                                                         else 
                                                                         {
                                                                              skip 
                                                                         }
                                                                     }
                                                                         }
                                                                     }
                                                                    
                                                                 }
                                                             }
                                                         }
                                                     }
                                                 }
                                             }
                                         }
                                     }
                                 }
                             }
                         }
                     }
                 }
             };
             if(return=0)  then
             {
                 if(strcmp(&tokens[0,0],"jne")=0) then 
                 {
                     if(tokens[3,0]='\0') then 
                     {
                         aaerror("label: required for a jump \n",RValue);
                         math_goto_good_op:=1
                         
                     }
                     else
                     {
                         if((math_atype=0 AND math_ia!=math_ib) OR (math_atype=1 AND math_fa!=math_fb)) then 
                         {
                             rewind(ip,RValue) and skip;
                             math_findlabel(ip,&tokens[3,0],RValue)
                             
                         }
                         else 
                         {
                              skip 
                         }
                     };
                     math_goto_good_op:=1
                     
                 }
                 else
                 {
                     if(strcmp(&tokens[0,0],"je")=0) then 
                     {
                         if(tokens[3,0]='\0') then 
                         {
                             aaerror("label: required for a jump \n",RValue);
                             math_goto_good_op:=1
                             
                         }
                         else
                         {
                             if((math_atype=0 AND math_ia=math_ib) OR (math_atype=1 AND math_fa=math_fb)) then 
                             {
                                 rewind(ip,RValue) and skip;
                                 math_findlabel(ip,&tokens[3,0],RValue)
                                 
                             }
                             else 
                             {
                                  skip 
                             }
                         };
                         math_goto_good_op:=1
                     }
                     else
                     {
                         if(strcmp(&tokens[0,0],"jg")=0) then 
                         {
                             if(tokens[3,0]='\0') then 
                             {
                                 aaerror("label: required for a jump \n",RValue);
                                 math_goto_good_op:=1
                                 
                             }
                             else
                             {
                                 if((math_atype=0 AND math_ia>math_ib) OR (math_atype=1 AND math_fa>math_fb)) then 
                                 {
                                     rewind(ip,RValue) and skip;
                                     math_findlabel(ip,&tokens[3,0],RValue)
                                     
                                 }
                                 else 
                                 {
                                      skip 
                                 }
                             };
                             math_goto_good_op:=1
                         }
                         else
                         {
                             if(strcmp(&tokens[0,0],"jl")=0) then 
                             {
                                 if(tokens[3,0]='\0') then 
                                 {
                                     aaerror("label: required for a jump \n",RValue);
                                     math_goto_good_op:=1
                                     
                                 }
                                 else
                                 {
                                     if((math_atype=0 AND math_ia<math_ib) OR (math_atype=1 AND math_fa<math_fb)) then 
                                     {
                                         rewind(ip,RValue) and skip;
                                         math_findlabel(ip,&tokens[3,0],RValue)
                                         
                                     }
                                     else 
                                     {
                                          skip 
                                     }
                                 };
                                 math_goto_good_op:=1
                                 
                             }
                             else 
                             {
                                  skip 
                             }
                         }
                     }
                 };
                 if(!math_goto_good_op) then 
                 {
                     return<==1 and RValue:=(-1);
                     skip
                     
                 }
                 else 
                 {
                      skip 
                 };
                 if(return=0)   then 
                 {
                     if(extern tisvariable(&tokens[1,0],RValue) AND tokens[1,0]!='\0' AND math_adata=1) then 
                     {
                         set_i_variable(&tokens[1,0],0,RValue);
                         math_adata:=2;
                         math_vos:=match_variable(&tokens[1,0],RValue);
                         math_foutpointer:=&math_vos->value.f;
                         math_ioutpointer:=&math_vos->value.i
                         
                     }
                     else 
                     {
                          skip 
                     };
                     if(math_adata!=1) then 
                     {
                         if(math_adata=2) then 
                         {
                             math_vos->type:=math_atype
                         }
                         else 
                         {
                              skip 
                         };
                         if(math_adata=0) then 
                         {
                             if(math_atype=0) then 
                             {
                                 math_atype:=1
                                 
                             }
                             else 
                             {
                                  skip 
                             }
                             
                         }
                         else 
                         {
                              skip 
                         };
                         if(math_atype=1 AND math_foutpointer!=NULL) then 
                         {
                             * math_foutpointer:=math_fa
                         }
                         else 
                         {
                              skip 
                         };
                         if(math_atype=0 AND math_ioutpointer!=NULL) then 
                         {
                             * math_ioutpointer:=math_ia
                         }
                         else 
                         {
                              skip 
                         }
                         
                     }
                     else 
                     {
                          skip 
                     };
                     if(echo AND math_atype=0) then 
                     {
                         fprintf(op,"%d \n",math_ia,RValue) and skip
                     }
                     else 
                     {
                          skip 
                     };
                     if(echo AND math_atype=1) then 
                     {
                         fprintf(op,"%f \n",math_fa,RValue) and skip
                     }
                     else 
                     {
                          skip 
                     };
                     return<==1 and RValue:=1;
                     skip
                 }
                 else
                 {
                     skip
                 }
             }
             else
             {
                 skip
             }
         }
         else
         {
             skip
         }
     }
     else
     {
         skip
     }
     )
     }; 
  function validatom ( char *who,int RValue )
 {
     frame(validatom_cp,validatom_pp,validatom_cp1,validatom_cp2,validatom_cp3,validatom_i,return) and ( 
     int return<==0 and skip;
     char *validatom_cp,*validatom_pp,*validatom_cp1,*validatom_cp2,*validatom_cp3 and skip;
     int validatom_i and skip;
     validatom_cp:=who;
     validatom_i:=0;
     while(* validatom_cp!='\0')
     {
         if(* validatom_cp='.') then 
         {
             validatom_i:=validatom_i+1;
             validatom_pp:=validatom_cp
             
         }
         else 
         {
              skip 
         };
         validatom_cp:=validatom_cp+1
     };
     if(validatom_i!=1) then 
     {
         return<==1 and RValue:=0;
         skip
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         validatom_cp:=validatom_pp;
         validatom_cp:=validatom_cp+1;
         validatom_cp1:=validatom_cp;
         validatom_cp1:=validatom_cp1+1;
         validatom_cp2:=validatom_cp1;
         validatom_cp2:=validatom_cp2+1;
         validatom_cp3:=validatom_cp2;
         validatom_cp3:=validatom_cp3+1;
         if(* validatom_cp1='\0') then 
         {
             if(* validatom_cp='x') then 
             {
                 return<==1 and RValue:=1;
                 skip
             }
             else 
             {
                  skip 
             };
             if(return=0)   then 
             {
                 if(* validatom_cp='y') then 
                 {
                     return<==1 and RValue:=2;
                     skip
                 }
                 else 
                 {
                      skip 
                 };
                 if(return=0)   then 
                 {
                     if(* validatom_cp='z') then 
                     {
                         return<==1 and RValue:=3;
                         skip
                     }
                     else 
                     {
                          skip 
                     };
                     if(return=0)   then 
                     {
                         if(* validatom_cp='q') then 
                         {
                             return<==1 and RValue:=13;
                             skip
                         }
                         else 
                         {
                              skip 
                         };
                         if(return=0)   then 
                         {
                             if(* validatom_cp='a') then 
                             {
                                 return<==1 and RValue:=14;
                                 skip
                             }
                             else 
                             {
                                  skip 
                             };
                             if(return=0)   then 
                             {
                                 if(* validatom_cp='b') then 
                                 {
                                     return<==1 and RValue:=15;
                                     skip
                                 }
                                 else 
                                 {
                                      skip 
                                 };
                                 if(return=0)   then 
                                 {
                                     if(* validatom_cp='m') then 
                                     {
                                         return<==1 and RValue:=16;
                                         skip
                                     }
                                     else 
                                     {
                                          skip 
                                     };
                                     if(return=0)   then 
                                     {
                                         return<==1 and RValue:=0;
                                         skip
                                     }
                                     else
                                     {
                                         skip
                                     }
                                 }
                                 else
                                 {
                                     skip
                                 }
                             }
                             else
                             {
                                 skip
                             }
                         }
                         else
                         {
                             skip
                         }
                     }
                     else
                     {
                         skip
                     }
                 }
                 else
                 {
                     skip
                 }
             }
             else
             {
                 skip
             }
             
         }
         else 
         {
              skip 
         };
         if(return=0)  then
         {
             if(return=0)   then 
             {
                 if(* validatom_cp2='\0') then 
                 {
                     if(* validatom_cp='f') then 
                     {
                         if(* validatom_cp1='x') then 
                         {
                             return<==1 and RValue:=4;
                             skip
                         }
                         else 
                         {
                              skip 
                         };
                         if(return=0)   then 
                         {
                             if(* validatom_cp1='y') then 
                             {
                                 return<==1 and RValue:=5;
                                 skip
                             }
                             else 
                             {
                                  skip 
                             };
                             if(return=0)   then 
                             {
                                 if(* validatom_cp1='z') then 
                                 {
                                     return<==1 and RValue:=6;
                                     skip
                                 }
                                 else 
                                 {
                                      skip 
                                 }
                             }
                             else
                             {
                                 skip
                             }
                         }
                         else
                         {
                             skip
                         }
                         
                     }
                     else 
                     {
                          skip 
                     };
                     if(return=0)  then
                     {
                         if(* validatom_cp='d') then 
                         {
                             if(* validatom_cp1='x') then 
                             {
                                 return<==1 and RValue:=7;
                                 skip
                             }
                             else 
                             {
                                  skip 
                             };
                             if(return=0)   then 
                             {
                                 if(* validatom_cp1='y') then 
                                 {
                                     return<==1 and RValue:=8;
                                     skip
                                 }
                                 else 
                                 {
                                      skip 
                                 };
                                 if(return=0)   then 
                                 {
                                     if(* validatom_cp1='z') then 
                                     {
                                         return<==1 and RValue:=9;
                                         skip
                                     }
                                     else 
                                     {
                                          skip 
                                     }
                                 }
                                 else
                                 {
                                     skip
                                 }
                             }
                             else
                             {
                                 skip
                             }
                         }
                         else
                         {
                             skip
                         }
                         
                     }
                     else 
                     {
                          skip 
                     };
                     if(return=0)  then
                     {
                         if(* validatom_cp='v') then 
                         {
                             if(* validatom_cp1='x') then 
                             {
                                 return<==1 and RValue:=10;
                                 skip
                             }
                             else 
                             {
                                  skip 
                             };
                             if(return=0)   then 
                             {
                                 if(* validatom_cp1='y') then 
                                 {
                                     return<==1 and RValue:=11;
                                     skip
                                 }
                                 else 
                                 {
                                      skip 
                                 };
                                 if(return=0)   then 
                                 {
                                     if(* validatom_cp1='z') then 
                                     {
                                         return<==1 and RValue:=12;
                                         skip
                                     }
                                     else 
                                     {
                                          skip 
                                     }
                                 }
                                 else
                                 {
                                     skip
                                 }
                             }
                             else
                             {
                                 skip
                             }
                         }
                         else
                         {
                             skip
                         }
                         
                     }
                     else 
                     {
                          skip 
                     };
                     if(return=0)  then
                     {
                         if(* validatom_cp='n') then 
                         {
                             if(* validatom_cp1='a') then 
                             {
                                 return<==1 and RValue:=19;
                                 skip
                             }
                             else 
                             {
                                  skip 
                             }
                         }
                         else
                         {
                             skip
                         }
                         
                     }
                     else 
                     {
                          skip 
                     }
                     
                 }
                 else 
                 {
                      skip 
                 };
                 if(return=0)  then
                 {
                     if(* validatom_cp3='\0') then 
                     {
                         if(* validatom_cp='c' AND * validatom_cp1='h' AND * validatom_cp2='i') then 
                         {
                             return<==1 and RValue:=17;
                             skip
                         }
                         else 
                         {
                              skip 
                         };
                         if(return=0)   then 
                         {
                             if(* validatom_cp='j' AND * validatom_cp1='a' AND * validatom_cp2='a') then 
                             {
                                 return<==1 and RValue:=18;
                                 skip
                             }
                             else 
                             {
                                  skip 
                             }
                         }
                         else
                         {
                             skip
                         }
                         
                     }
                     else 
                     {
                          skip 
                     };
                     if(return=0)  then
                     {
                         return<==1 and RValue:=0;
                         skip
                     }
                     else
                     {
                         skip
                     }
                 }
                 else
                 {
                     skip
                 }
             }
             else
             {
                 skip
             }
         }
         else
         {
             skip
         }
     }
     else
     {
         skip
     }
     )
     }; 
	  float getatomdata_fx,getatomdata_fy,getatomdata_fz and skip;
  function getatomdata ( char *who,float* RValue )
 {
     frame(getatomdata_i,getatomdata_j,getatomdata_aser,getatomdata_cp,getatomdata_ap,getatomdata_vp,return) and ( 
     int return<==0 and skip;
     int getatomdata_i,getatomdata_j and skip;
     char getatomdata_aser[80],*getatomdata_cp and skip;
     ATOM *getatomdata_ap and skip;
     VARIABLE *getatomdata_vp and skip;
    
     getatomdata_i:=validatom(who,RValue);
     if(getatomdata_i=0) then 
     {
         return<==1 and RValue:=NULL;
         skip
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         getatomdata_cp:=who;
         getatomdata_j:=0;
         while(* getatomdata_cp!='.')
         {
             getatomdata_aser[getatomdata_j]:=* getatomdata_cp;
             getatomdata_j:=getatomdata_j+1;
             getatomdata_cp:=getatomdata_cp+1
         };
         getatomdata_aser[getatomdata_j]:='\0';
         getatomdata_vp:=match_variable(getatomdata_aser,RValue) ;
         if((getatomdata_vp)=NULL) then 
         {
             getatomdata_j:=atoi(getatomdata_aser,RValue)
             
         }
         else
         {
             if(getatomdata_vp->type=0) then 
             {
                 getatomdata_j:=getatomdata_vp->value.i
             }
             else 
             {
                  skip 
             };
             if(getatomdata_vp->type=1) then 
             {
                 getatomdata_j:=(int)getatomdata_vp->value.f
             }
             else 
             {
                  skip 
             }
         };
         getatomdata_ap:=a_m_serial(getatomdata_j,RValue);
         if(getatomdata_ap=NULL) then 
         {
             return<==1 and RValue:=NULL;
             skip
         }
         else 
         {
              skip 
         };
         if(return=0)   then 
         {
             if(getatomdata_i=1) then 
             {
                 return<==1 and RValue:=(&getatomdata_ap->x);
                 skip
             }
             else 
             {
                  skip 
             };
             if(return=0)   then 
             {
                 if(getatomdata_i=2) then 
                 {
                     return<==1 and RValue:=(&getatomdata_ap->y);
                     skip
                 }
                 else 
                 {
                      skip 
                 };
                 if(return=0)   then 
                 {
                     if(getatomdata_i=3) then 
                     {
                         return<==1 and RValue:=(&getatomdata_ap->z);
                         skip
                     }
                     else 
                     {
                          skip 
                     };
                     if(return=0)   then 
                     {
                         if(getatomdata_i=4) then 
                         {
                             getatomdata_fx:=getatomdata_ap->fx;
                             return<==1 and RValue:=(&getatomdata_fx);
                             skip
                             
                         }
                         else 
                         {
                              skip 
                         };
                         if(return=0)   then 
                         {
                             if(getatomdata_i=5) then 
                             {
                                 getatomdata_fy:=getatomdata_ap->fy;
                                 return<==1 and RValue:=(&getatomdata_fy);
                                 skip
                                 
                             }
                             else 
                             {
                                  skip 
                             };
                             if(return=0)   then 
                             {
                                 if(getatomdata_i=6) then 
                                 {
                                     getatomdata_fz:=getatomdata_ap->fz;
                                     return<==1 and RValue:=(&getatomdata_fz);
                                     skip
                                     
                                 }
                                 else 
                                 {
                                      skip 
                                 };
                                 if(return=0)   then 
                                 {
                                     if(getatomdata_i=7) then 
                                     {
                                         return<==1 and RValue:=(&getatomdata_ap->dx);
                                         skip
                                     }
                                     else 
                                     {
                                          skip 
                                     };
                                     if(return=0)   then 
                                     {
                                         if(getatomdata_i=8) then 
                                         {
                                             return<==1 and RValue:=(&getatomdata_ap->dy);
                                             skip
                                         }
                                         else 
                                         {
                                              skip 
                                         };
                                         if(return=0)   then 
                                         {
                                             if(getatomdata_i=9) then 
                                             {
                                                 return<==1 and RValue:=(&getatomdata_ap->dz);
                                                 skip
                                             }
                                             else 
                                             {
                                                  skip 
                                             };
                                             if(return=0)   then 
                                             {
                                                 if(getatomdata_i=10) then 
                                                 {
                                                     return<==1 and RValue:=(&getatomdata_ap->vx);
                                                     skip
                                                 }
                                                 else 
                                                 {
                                                      skip 
                                                 };
                                                 if(return=0)   then 
                                                 {
                                                     if(getatomdata_i=11) then 
                                                     {
                                                         return<==1 and RValue:=(&getatomdata_ap->vy);
                                                         skip
                                                     }
                                                     else 
                                                     {
                                                          skip 
                                                     };
                                                     if(return=0)   then 
                                                     {
                                                         if(getatomdata_i=12) then 
                                                         {
                                                             return<==1 and RValue:=(&getatomdata_ap->vz);
                                                             skip
                                                         }
                                                         else 
                                                         {
                                                              skip 
                                                         };
                                                         if(return=0)   then 
                                                         {
                                                             if(getatomdata_i=13) then 
                                                             {
                                                                 return<==1 and RValue:=(&getatomdata_ap->q);
                                                                 skip
                                                             }
                                                             else 
                                                             {
                                                                  skip 
                                                             };
                                                             if(return=0)   then 
                                                             {
                                                                 if(getatomdata_i=14) then 
                                                                 {
                                                                     return<==1 and RValue:=(&getatomdata_ap->a);
                                                                     skip
                                                                 }
                                                                 else 
                                                                 {
                                                                      skip 
                                                                 };
                                                                 if(return=0)   then 
                                                                 {
                                                                     if(getatomdata_i=15) then 
                                                                     {
                                                                         return<==1 and RValue:=(&getatomdata_ap->b);
                                                                         skip
                                                                     }
                                                                     else 
                                                                     {
                                                                          skip 
                                                                     };
                                                                     if(return=0)   then 
                                                                     {
                                                                         if(getatomdata_i=16) then 
                                                                         {
                                                                             return<==1 and RValue:=(&getatomdata_ap->mass);
                                                                             skip
                                                                         }
                                                                         else 
                                                                         {
                                                                              skip 
                                                                         };
                                                                         if(return=0)   then 
                                                                         {
                                                                             if(getatomdata_i=17) then 
                                                                             {
                                                                                 return<==1 and RValue:=(&getatomdata_ap->chi);
                                                                                 skip
                                                                             }
                                                                             else 
                                                                             {
                                                                                  skip 
                                                                             };
                                                                             if(return=0)   then 
                                                                             {
                                                                                 if(getatomdata_i=18) then 
                                                                                 {
                                                                                     return<==1 and RValue:=(&getatomdata_ap->jaa);
                                                                                     skip
                                                                                 }
                                                                                 else 
                                                                                 {
                                                                                      skip 
                                                                                 };
                                                                                 if(return=0)   then 
                                                                                 {
                                                                                     return<==1 and RValue:=NULL;
                                                                                     skip
                                                                                 }
                                                                                 else
                                                                                 {
                                                                                     skip
                                                                                 }
                                                                             }
                                                                             else
                                                                             {
                                                                                 skip
                                                                             }
                                                                         }
                                                                         else
                                                                         {
                                                                             skip
                                                                         }
                                                                     }
                                                                     else
                                                                     {
                                                                         skip
                                                                     }
                                                                 }
                                                                 else
                                                                 {
                                                                     skip
                                                                 }
                                                             }
                                                             else
                                                             {
                                                                 skip
                                                             }
                                                         }
                                                         else
                                                         {
                                                             skip
                                                         }
                                                     }
                                                     else
                                                     {
                                                         skip
                                                     }
                                                 }
                                                 else
                                                 {
                                                     skip
                                                 }
                                             }
                                             else
                                             {
                                                 skip
                                             }
                                         }
                                         else
                                         {
                                             skip
                                         }
                                     }
                                     else
                                     {
                                         skip
                                     }
                                 }
                                 else
                                 {
                                     skip
                                 }
                             }
                             else
                             {
                                 skip
                             }
                         }
                         else
                         {
                             skip
                         }
                     }
                     else
                     {
                         skip
                     }
                 }
                 else
                 {
                     skip
                 }
             }
             else
             {
                 skip
             }
         }
         else
         {
             skip
         }
     }
     else
     {
         skip
     }
     )
     }; 
  function math_match_atom ( char *who,ATOM *ap,int RValue )
 {
     frame(math_match_atom_cp,return) and ( 
     int return<==0 and skip;
     char *math_match_atom_cp and skip;
     math_match_atom_cp:=&ap->name[0];
     while( return=0 AND  * math_match_atom_cp!='.')
     {
         if(* math_match_atom_cp='\0') then 
         {
             return<==1 and RValue:=0;
             skip
         }
         else 
         {
              skip 
         };
         if(return=0)   then 
         {
             math_match_atom_cp:=math_match_atom_cp+1
         }
         else
         {
             skip
         }
     };
     if(return=0)   then 
     {
         math_match_atom_cp:=math_match_atom_cp+1;
         if(strcmp(who,math_match_atom_cp)=0) then 
         {
             return<==1 and RValue:=1;
             skip
             
         }
         else 
         {
              skip 
         };
         if(return=0)   then 
         {
             return<==1 and RValue:=0;
             skip
         }
         else
         {
             skip
         }
     }
     else
     {
         skip
     }
     )
     }; 
  function math_findlabel ( FILE *fp,char *label,int RValue )
 {
     frame(math_findlabel_cp,math_findlabel_lp,math_findlabel_llabel,math_findlabel_myline,math_findlabel_inmyline,math_findlabel_i,math_findlabel_ac,return) and ( 
     int return<==0 and skip;
     char *math_findlabel_cp,*math_findlabel_lp and skip;
     char math_findlabel_llabel[80] and skip;
     char math_findlabel_myline[80] and skip;
     int math_findlabel_inmyline and skip;
     int math_findlabel_i and skip;
     char math_findlabel_ac and skip;
     math_findlabel_cp:=label;
     math_findlabel_lp:=&math_findlabel_llabel[0];
     while(* math_findlabel_cp!='\0')
     {
         * math_findlabel_lp:=* math_findlabel_cp;
         math_findlabel_lp:=math_findlabel_lp+1;
         math_findlabel_cp:=math_findlabel_cp+1
     };
     math_findlabel_cp:=math_findlabel_lp;
     math_findlabel_cp:=math_findlabel_cp-1;
     if(* math_findlabel_cp!=':') then 
     {
         * math_findlabel_lp:=':';
         math_findlabel_lp:=math_findlabel_lp+1
         
     }
     else 
     {
          skip 
     };
     * math_findlabel_lp:='\0';
     math_findlabel_inmyline:=0;
     math_findlabel_lp:=&math_findlabel_llabel[0];
     math_findlabel_i:=fgetc(fp,RValue) ;
     //while( return=0 AND  (math_findlabel_i)!=EOF)
     while( return=0 AND  (math_findlabel_i)!=-1)
     {
         math_findlabel_ac:=(char)math_findlabel_i;
         if(!isspace((int)math_findlabel_ac,RValue)) then 
         {
             if(math_findlabel_ac=';') then 
             {
                 math_findlabel_myline[math_findlabel_inmyline]:='\0';
                 if(strcmp(math_findlabel_lp,&math_findlabel_myline[0])=0) then 
                 {
                     return<==1 and RValue:=0;
                     skip
                 }
                 else 
                 {
                      skip 
                 };
                 if(return=0)   then 
                 {
                     math_findlabel_inmyline:=0
                 }
                 else
                 {
                     if(math_findlabel_inmyline>80) then 
                     {
                         math_findlabel_inmyline:=0
                     }
                     else 
                     {
                          skip 
                     };
                     math_findlabel_myline[math_findlabel_inmyline]:=math_findlabel_ac;
                     math_findlabel_inmyline:=math_findlabel_inmyline+1
                 }
             }
             else
             {
                 skip
             }
             
         }
         else 
         {
              skip 
         };
         math_findlabel_i:=fgetc(fp,RValue) 
     };
     if(return=0)   then 
     {
         return<==1 and RValue:=0;
         skip
     }
     else
     {
         skip
     }
     )
     }; 
      ATOM *mom_list[100] and skip;
     int in_mom_list<==0 and skip;
 function mom ( FILE *op,float tq,int niter )
 {
     frame(mom_v,mom_Z,mom_Zk,mom_r,mom_dx,mom_dy,mom_dz,mom_dv,mom_tv,mom_i,mom_j,mom_row,return) and ( 
     int return<==0 and skip;
     float *mom_v,*mom_Z,*mom_Zk and skip;
     float mom_r,mom_dx,mom_dy,mom_dz and skip;
     float mom_dv,mom_tv and skip;
     int mom_i,mom_j,mom_row and skip;
     if(in_mom_list=0) then 
     {
          return<==1 and skip
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         if(niter<=0) then 
         {
             niter:=20
         }
         else 
         {
              skip 
         };
         mom_v:=(float *)malloc(in_mom_list*sizeof(float));
         mom_Z:=(float *)malloc(in_mom_list*in_mom_list*sizeof(float));
         mom_Zk:=(float *)malloc(in_mom_list*in_mom_list*sizeof(float));
         if(mom_v=NULL OR mom_Z=NULL OR mom_Zk=NULL) then 
         {
             aaerror(" cannot allocate memory in mom\n");
              return<==1 and skip
             
         }
         else 
         {
              skip 
         };
         if(return=0)   then 
         {
             mom_row:=in_mom_list;
             mom_i:=0;
             
             while(mom_i<mom_row)
             {
                 mom_j:=mom_i+1;
                 
                 while(mom_j<mom_row)
                 {
                     mom_dx:=mom_list[mom_j]->x-mom_list[mom_i]->x;
                     mom_dy:=mom_list[mom_j]->y-mom_list[mom_i]->y;
                     mom_dz:=mom_list[mom_j]->z-mom_list[mom_i]->z;
                     mom_r:=sqrt(mom_dx*mom_dx+mom_dy*mom_dy+mom_dz*mom_dz);
                     mom_Zk[mom_i+mom_j*mom_row]:=mom_jab(mom_r,mom_list[mom_i]->jaa,mom_list[mom_j]->jaa,RValue);
                     mom_Zk[mom_j+mom_i*mom_row]:=mom_Zk[mom_i+mom_j*mom_row];
                     mom_j:=mom_j+1
                     
                 };
                 mom_i:=mom_i+1
                 
             };
             mom_i:=0;
             
             while(mom_i<mom_row)
             {
                 mom_Zk[mom_i+mom_i*mom_row]:=mom_list[mom_i]->jaa/ 2;
                 mom_i:=mom_i+1
                 
             };
             mom_dv:=0;
             mom_j:=0;
             
             while(mom_j<niter)
             {
                 mom_i:=0;
                 
                 while(mom_i<mom_row*mom_row)
                 {
                     mom_Z[mom_i]:=mom_Zk[mom_i];
                     mom_i:=mom_i+1
                     
                 };
                 mom_i:=0;
                 
                 while(mom_i<mom_row)
                 {
                     mom_v[mom_i]:=-mom_list[mom_i]->chi;
                     mom_i:=mom_i+1
                     
                 };
                 mom_tv:=0.0;
                 mom_i:=0;
                 
                 while(mom_i<mom_row)
                 {
                     mom_tv:=mom_tv+mom_v[mom_i];
                     mom_i:=mom_i+1
                     
                 };
                 mom_tv:=mom_tv/ mom_row+mom_dv;
                 mom_i:=0;
                 
                 while(mom_i<mom_row)
                 {
                     mom_v[mom_i]:=mom_v[mom_i]-mom_tv;
                     mom_i:=mom_i+1
                     
                 };
                 mom_solve(mom_Z,mom_v,mom_row,mom_row,RValue);
                 mom_tv:=0.0;
                 mom_i:=0;
                 
                 while(mom_i<mom_row)
                 {
                     mom_tv:=mom_tv+mom_v[mom_i];
                     mom_i:=mom_i+1
                     
                 };
                 mom_dv:=mom_dv+14.4*(mom_tv-tq)/ mom_row*0.25;
                 fprintf(op,"MoM iter %d error %e\n",mom_j,mom_tv-tq,RValue) and skip;
                 mom_j:=mom_j+1
                 
             };
             mom_i:=0;
             
             while(mom_i<mom_row)
             {
                 mom_list[mom_i]->q:=mom_v[mom_i];
                 mom_i:=mom_i+1
                 
             };
             free(mom_Zk) and skip;
             free(mom_Z) and skip;
             free(mom_v) and skip;
             in_mom_list:=0
         }
         else
         {
             skip
         }
     }
     else
     {
         skip
     }
     )
     }; 
  function mom_add ( int s1,int s2 )
 {
     frame(mom_add_i,mom_add_j,mom_add_ok,mom_add_ap,mom_add_numatm,return,break$) and ( 
     int break$<==0 and skip;
     int return<==0 and skip;
     int mom_add_i,mom_add_j,mom_add_ok and skip;
     ATOM *mom_add_ap and skip;
     int mom_add_numatm and skip;
     mom_add_numatm:=a_number(RValue);
     if(mom_add_numatm=0) then 
     {
          return<==1 and skip
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         if(s2>0 AND s1>s2) then 
         {
             mom_add_i:=s1;
             s1:=s2;
             s2:=mom_add_i
             
         }
         else 
         {
              skip 
         };
         if(s2>s1) then 
         {
             mom_add_i:=0;
             
             while(mom_add_i<mom_add_numatm)
             {
                 mom_add_ap:=a_next(mom_add_i,RValue);
                 if(mom_add_ap->serial>=s1 AND mom_add_ap->serial<=s2) then 
                 {
                     if(mom_add_ap->chi>0.0 AND mom_add_ap->jaa>0.0) then 
                     {
                         mom_add_ok:=0;
                         break$<==0 and skip;
                         mom_add_j:=0;
                         
                         while( break$=0 AND  mom_add_j<in_mom_list)
                         {
                             if(mom_list[mom_add_j]=mom_add_ap) then 
                             {
                                 mom_add_ok:=1;
                                 break$<==1 and skip
                                  
                             }
                             else 
                             {
                                  skip 
                             };
                             if(break$=0)   then
                             {
                                 mom_add_j:=mom_add_j+1
                             }
                             else
                             {
                                 skip
                             }
                             
                         };
                         break$<==0 and skip;
                         if(mom_add_ok=0) then 
                         {
                             mom_list[in_mom_list]:=mom_add_ap;
                             in_mom_list:=in_mom_list+1
                         }
                         else 
                         {
                              skip 
                         };
                         if(in_mom_list=100) then 
                         {
                             in_mom_list:=in_mom_list-1
                         }
                         else 
                         {
                              skip 
                         }
                         
                     }
                     else 
                     {
                          skip 
                     }
                     
                 }
                 else 
                 {
                      skip 
                 };
                 mom_add_i:=mom_add_i+1
                 
             };
              return<==1 and skip
             
         }
         else 
         {
              skip 
         };
         if(return=0)   then 
         {
             mom_add_ap:=a_m_serial(s1,RValue) ;
             if((mom_add_ap)!=NULL) then 
             {
                 if(mom_add_ap->chi>0.0 AND mom_add_ap->jaa>0.0) then 
                 {
                     mom_add_ok:=0;
                     break$<==0 and skip;
                     mom_add_j:=0;
                     
                     while( break$=0 AND  mom_add_j<in_mom_list)
                     {
                         if(mom_add_ap=mom_list[mom_add_j]) then 
                         {
                             mom_add_ok:=1;
                             break$<==1 and skip
                              
                         }
                         else 
                         {
                              skip 
                         };
                         if(break$=0)   then
                         {
                             mom_add_j:=mom_add_j+1
                         }
                         else
                         {
                             skip
                         }
                         
                     };
                     break$<==0 and skip;
                     if(mom_add_ok=0) then 
                     {
                         mom_list[in_mom_list]:=mom_add_ap;
                         in_mom_list:=in_mom_list+1
                     }
                     else 
                     {
                          skip 
                     };
                     if(in_mom_list=100) then 
                     {
                         in_mom_list:=in_mom_list-1
                     }
                     else 
                     {
                          skip 
                     }
                     
                 }
                 else 
                 {
                      skip 
                 }
                 
             }
             else 
             {
                  skip 
             }
         }
         else
         {
             skip
         }
     }
     else
     {
         skip
     }
     )
     }; 
  function mom_param ( int serial,float chi,float jaa )
 {
     frame(mom_param_ap,return) and ( 
     int return<==0 and skip;
     ATOM *mom_param_ap and skip;
     mom_param_ap:=a_m_serial(serial,RValue) ;
     if((mom_param_ap)=NULL) then 
     {
         aaerror(" MOM> cannot modify non-extant atom ");
          return<==1 and skip
         
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         mom_param_ap->chi:=chi;
         mom_param_ap->jaa:=jaa
     }
     else
     {
         skip
     }
     )
     }; 
  function mom_jab ( float r,float j1,float j2,float RValue )
 {
     frame(mom_jab_a,mom_jab_b,mom_jab_b2,mom_jab_b3,return) and ( 
     int return<==0 and skip;
     float mom_jab_a,mom_jab_b,mom_jab_b2,mom_jab_b3 and skip;
     if(r<30.0) then 
     {
         mom_jab_a:=sqrt(j1*j2)/ 2.0;
         r:=1.1*r;
         mom_jab_b:=exp(-r);
         mom_jab_b2:=1.0+(15*r-9*r*r-r*r*r)/ 48.0;
         return<==1 and RValue:=mom_jab_a/ r*(mom_jab_b*mom_jab_b2);
         skip
         
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         return<==1 and RValue:=14.4/ r/ 2;
         skip
     }
     else
     {
         skip
     }
     )
     }; 
  function mom_solve ( float **matrix,float **vector,int irow,int ilead,int RValue )
 {
     frame(mom_solve_quotient,mom_solve_i,mom_solve_j,mom_solve_k,mom_solve_mpi,mom_solve_mpj,mom_solve_mpk,return) and ( 
     int return<==0 and skip;
     float mom_solve_quotient and skip;
     int mom_solve_i,mom_solve_j,mom_solve_k and skip;
     int mom_solve_mpi,mom_solve_mpj,mom_solve_mpk and skip;
     mom_solve_mpi:=0;
     mom_solve_i:=0;
     
     while( return=0 AND  mom_solve_i<irow-1)
     {
         mom_solve_j:=mom_solve_i;
         mom_solve_mpj:=mom_solve_mpi;
         while( return=0 AND  (* matrix)[mom_solve_mpi+mom_solve_i]=0)
         {
             if(mom_solve_j=irow) then 
             {
                 return<==1 and RValue:=(-1);
                 skip
                 
             }
             else 
             {
                  skip 
             };
             if(return=0)   then 
             {
                 mom_solve_j:=mom_solve_j+1;
                 mom_solve_mpj:=mom_solve_mpj+ilead;
                 (* vector)[mom_solve_i]:=(* vector)[mom_solve_i]+(* vector)[mom_solve_j];
                 mom_solve_k:=mom_solve_i;
                 
                 while(mom_solve_k<irow)
                 {
                     (* matrix)[mom_solve_mpi+mom_solve_k]:=(* matrix)[mom_solve_mpi+mom_solve_k]+(* matrix)[mom_solve_mpj+mom_solve_k];
                     mom_solve_k:=mom_solve_k+1
                     
                 }
             }
             else
             {
                 skip
             }
         };
         if(return=0)   then 
         {
             mom_solve_mpj:=mom_solve_mpi+ilead;
             mom_solve_j:=mom_solve_i+1;
             
             while(mom_solve_j<irow)
             {
                 if((* matrix)[mom_solve_mpj+mom_solve_i]!=0) then 
                 {
                     mom_solve_quotient:=(* matrix)[mom_solve_mpj+mom_solve_i]/ (* matrix)[mom_solve_mpi+mom_solve_i];
                     (* vector)[mom_solve_j]:=(* vector)[mom_solve_j]-(* vector)[mom_solve_i]*mom_solve_quotient;
                     mom_solve_k:=mom_solve_i;
                     
                     while(mom_solve_k<irow)
                     {
                         (* matrix)[mom_solve_mpj+mom_solve_k]:=(* matrix)[mom_solve_mpj+mom_solve_k]-(* matrix)[mom_solve_mpi+mom_solve_k]*mom_solve_quotient;
                         mom_solve_k:=mom_solve_k+1
                         
                     }
                     
                 }
                 else 
                 {
                      skip 
                 };
                 mom_solve_mpj:=mom_solve_mpj+ilead;
                 mom_solve_j:=mom_solve_j+1
                 
             };
             mom_solve_mpi:=mom_solve_mpi+ilead;
             mom_solve_i:=mom_solve_i+1
         }
         else
         {
             skip
         }
         
     };
     if(return=0)   then 
     {
         mom_solve_mpi:=0;
         mom_solve_i:=0;
         
         while(mom_solve_i<irow-1)
         {
             mom_solve_k:=irow-mom_solve_i-1;
             mom_solve_mpj:=0;
             mom_solve_mpk:=mom_solve_k*ilead;
             mom_solve_j:=0;
             
             while(mom_solve_j<mom_solve_k)
             {
                 (* vector)[mom_solve_j]:=(* vector)[mom_solve_j]-(* matrix)[mom_solve_mpj+mom_solve_k]/ (* matrix)[mom_solve_mpk+mom_solve_k]*(* vector)[mom_solve_k];
                 mom_solve_mpj:=mom_solve_mpj+ilead;
                 mom_solve_j:=mom_solve_j+1
                 
             };
             mom_solve_i:=mom_solve_i+1
             
         };
         mom_solve_mpi:=0;
         mom_solve_i:=0;
         
         while(mom_solve_i<irow)
         {
             (* vector)[mom_solve_i]:=(* vector)[mom_solve_i]/ (* matrix)[mom_solve_mpi+mom_solve_i];
             mom_solve_mpi:=mom_solve_mpi+ilead;
             mom_solve_i:=mom_solve_i+1
             
         };
         return<==1 and RValue:=0;
         skip
     }
     else
     {
         skip
     }
     )
     }; 
  function AMMPmonitor ( void (*vfs[])(float*, float, int RValue),void (*ffs[])(float, int RValue),int nfs,FILE *op )
 {
     frame(AMMPmonitor_mxdq,AMMPmonitor_V,AMMPmonitor_T,AMMPmonitor_vt,AMMPmonitor_ap,AMMPmonitor_ifs,AMMPmonitor_temp$_1,AMMPmonitor_temp$_2,return) and ( 
     int return<==0 and skip;
     float AMMPmonitor_mxdq and skip;
     float AMMPmonitor_V,AMMPmonitor_T,AMMPmonitor_vt and skip;
     ATOM *AMMPmonitor_ap and skip;
     int AMMPmonitor_ifs and skip;
     if((extern a_number(RValue))<1) then 
     {
         aaerror(" no atoms defined - nothing to calculate \n");
          return<==1 and skip
         
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         AMMPmonitor_V:=0.0;
         AMMPmonitor_T:=0.0;
         a_f_zero(RValue);
         AMMPmonitor_ifs:=0;
         
         while(AMMPmonitor_ifs<nfs)
         {
             AMMPmonitor_vt:=0.0;
             vfs[AMMPmonitor_ifs](&AMMPmonitor_vt,0.0,RValue);

             AMMPmonitor_mxdq:=get_f_variable("mxdq",RValue);
             set_f_variable("mxdq",100.0,RValue);
             ffs[AMMPmonitor_ifs](0.0,RValue);
             set_f_variable("mxdq",AMMPmonitor_mxdq,RValue);
             AMMPmonitor_V:=AMMPmonitor_V+AMMPmonitor_vt;

             if(vfs[AMMPmonitor_ifs]=v_bond) then 
             {
                 fprintf(op," %f bond energy\n",AMMPmonitor_vt,RValue) and skip
             }
             else
             {
                 if(vfs[AMMPmonitor_ifs]=v_ho_bond) then 
                 {
                     fprintf(op," %f homotopy bond energy\n",AMMPmonitor_vt,RValue) and skip;
                     AMMPmonitor_vt:=0;
                     v_bond(&AMMPmonitor_vt,0.0,RValue);
                     fprintf(op," %f bond energy\n",AMMPmonitor_vt,RValue) and skip
                 }
                 else
                 {
                     if(vfs[AMMPmonitor_ifs]=v_mmbond) then 
                     {
                         fprintf(op," %f mm bond energy\n",AMMPmonitor_vt,RValue) and skip
                     }
                     else
                     {
                         if(vfs[AMMPmonitor_ifs]=v_c_angle) then 
                         {
                             fprintf(op," %f cangle energy\n",AMMPmonitor_vt,RValue) and skip
                         }
                         else
                         {
                             if(vfs[AMMPmonitor_ifs]=v_mmangle) then 
                             {
                                 fprintf(op," %f mm angle energy\n",AMMPmonitor_vt,RValue) and skip
                             }
                             else
                             {
                                 if(vfs[AMMPmonitor_ifs]=v_angle) then 
                                 {
                                     fprintf(op," %f angle energy\n",AMMPmonitor_vt,RValue) and skip
                                 }
                                 else
                                 {
                                     if(vfs[AMMPmonitor_ifs]=v_ho_angle) then 
                                     {
                                         fprintf(op," %f homotopy angle energy\n",AMMPmonitor_vt,RValue) and skip;
                                         AMMPmonitor_vt:=0.0;
                                         v_angle(&AMMPmonitor_vt,0.0,RValue);
                                         fprintf(op," %f angle energy\n",AMMPmonitor_vt,RValue) and skip
                                     }
                                     else
                                     {
                                         if(vfs[AMMPmonitor_ifs]=v_noel) then 
                                         {
                                             fprintf(op," %f noel energy\n",AMMPmonitor_vt,RValue) and skip
                                         }
                                         else
                                         {
                                             if(vfs[AMMPmonitor_ifs]=v_ho_noel) then 
                                             {
                                                 fprintf(op," %f homotopy noel energy\n",AMMPmonitor_vt,RValue) and skip;
                                                 AMMPmonitor_vt:=0.0;
                                                 v_noel(&AMMPmonitor_vt,0.0,RValue);
                                                 fprintf(op," %f noel energy\n",AMMPmonitor_vt,RValue) and skip
                                             }
                                             else
                                             {
                                                 if(vfs[AMMPmonitor_ifs]=u_v_nonbon) then 
                                                 {
                                                     fprintf(op," %f non-bonded energy\n",AMMPmonitor_vt,RValue) and skip
                                                 }
                                                 else
                                                 {
                                                     if(vfs[AMMPmonitor_ifs]=v_nonbon) then 
                                                     {
                                                         fprintf(op," %f non-bonded energy\n",AMMPmonitor_vt,RValue) and skip
                                                     }
                                                     else
                                                     {
                                                         if(vfs[AMMPmonitor_ifs]=v_torsion) then 
                                                         {
                                                             fprintf(op," %f torsion energy\n",AMMPmonitor_vt,RValue) and skip
                                                         }
                                                         else
                                                         {
                                                             if(vfs[AMMPmonitor_ifs]=v_hybrid) then 
                                                             {
                                                                 fprintf(op," %f hybrid energy\n",AMMPmonitor_vt,RValue) and skip
                                                             }
                                                             else
                                                             {
                                                                 if(vfs[AMMPmonitor_ifs]=v_tether) then 
                                                                 {
                                                                     fprintf(op," %f tether restraint energy\n",AMMPmonitor_vt,RValue) and skip
                                                                 }
                                                                 else
                                                                 {
                                                                     if(vfs[AMMPmonitor_ifs]=v_restrain) then 
                                                                     {
                                                                         fprintf(op," %f restraint bond energy\n",AMMPmonitor_vt,RValue) and skip
                                                                     }
                                                                     else
                                                                     {
                                                                         fprintf(op," %f unknown potential type\n",AMMPmonitor_vt,RValue) and skip
                                                                     }
                                                                 }
                                                             }
                                                         }
                                                     }
                                                 }
                                             }
                                         }
                                     }
                                 }
                             }
                         }
                     }
                 }
             };
             AMMPmonitor_vt:=0.0;
             AMMPmonitor_ifs:=AMMPmonitor_ifs+1
             
         };
         fprintf(op," %f total potential energy\n",AMMPmonitor_V,RValue) and skip;
         float AMMPmonitor_temp$_1 and skip;
         AMMPmonitor_temp$_1:=a_l2_f(RValue);
         set_f_variable("l2f",AMMPmonitor_temp$_1,RValue);
         float AMMPmonitor_temp$_2 and skip;
         AMMPmonitor_temp$_2:=a_max_f(RValue);
         set_f_variable("lmaxf",AMMPmonitor_temp$_2,RValue);
         set_f_variable("totalp",AMMPmonitor_V,RValue);
         AMMPmonitor_ifs:=-1;
         AMMPmonitor_ap:=a_next(AMMPmonitor_ifs,RValue) ;
         while((AMMPmonitor_ap)!=NULL)
         {
             AMMPmonitor_ifs:=1;
             AMMPmonitor_T:=AMMPmonitor_T+AMMPmonitor_ap->vx*AMMPmonitor_ap->vx*AMMPmonitor_ap->mass;
             AMMPmonitor_T:=AMMPmonitor_T+AMMPmonitor_ap->vy*AMMPmonitor_ap->vy*AMMPmonitor_ap->mass;
             AMMPmonitor_T:=AMMPmonitor_T+AMMPmonitor_ap->vz*AMMPmonitor_ap->vz*AMMPmonitor_ap->mass;
             AMMPmonitor_ap:=a_next(AMMPmonitor_ifs,RValue) 
         };
         AMMPmonitor_T:=AMMPmonitor_T*0.5/ 4.184/ 1000/ 1000;
         set_f_variable("totalk",AMMPmonitor_T,RValue);
         fprintf(op," %f total kinetic energy\n",AMMPmonitor_T,RValue) and skip;
         fprintf(op," %f total energy\n",AMMPmonitor_T+AMMPmonitor_V,RValue) and skip;
         fprintf(op," %f total action\n",AMMPmonitor_T-AMMPmonitor_V,RValue) and skip
     }
     else
     {
         skip
     }
     )
     }; 
  function AMMPmonitor_mute ( void (*vfs[])(float*, float, int RValue), void (*ffs[])(float, int RValue),int nfs,FILE *op )
 {
     frame(AMMPmonitor_mute_mxdq,AMMPmonitor_mute_V,AMMPmonitor_mute_T,AMMPmonitor_mute_vt,AMMPmonitor_mute_ap,AMMPmonitor_mute_ifs,AMMPmonitor_mute_temp$_1,AMMPmonitor_mute_temp$_2,return) and ( 
     int return<==0 and skip;
     float AMMPmonitor_mute_mxdq and skip;
     float AMMPmonitor_mute_V,AMMPmonitor_mute_T,AMMPmonitor_mute_vt and skip;
     ATOM *AMMPmonitor_mute_ap and skip;
     int AMMPmonitor_mute_ifs and skip;
     if(extern a_number(RValue)<1) then 
     {
         aaerror(" no atoms defined - nothing to calculate \n");
          return<==1 and skip
         
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         AMMPmonitor_mute_V:=0.0;
         AMMPmonitor_mute_T:=0.0;
         a_f_zero(RValue);
         AMMPmonitor_mute_ifs:=0;
         
         while(AMMPmonitor_mute_ifs<nfs)
         {
             AMMPmonitor_mute_vt:=0.0;
             vfs[AMMPmonitor_mute_ifs](&AMMPmonitor_mute_vt,0.0,RValue);
             AMMPmonitor_mute_mxdq:=get_f_variable("mxdq",RValue);
             set_f_variable("mxdq",100.0,RValue);
             ffs[AMMPmonitor_mute_ifs](0.0,RValue);
             set_f_variable("mxdq",AMMPmonitor_mute_mxdq,RValue);
             AMMPmonitor_mute_V:=AMMPmonitor_mute_V+AMMPmonitor_mute_vt;
             AMMPmonitor_mute_ifs:=AMMPmonitor_mute_ifs+1
             
         };
         float AMMPmonitor_mute_temp$_1 and skip;
         AMMPmonitor_mute_temp$_1:=a_l2_f(RValue);
         set_f_variable("l2f",AMMPmonitor_mute_temp$_1,RValue);
         float AMMPmonitor_mute_temp$_2 and skip;
         AMMPmonitor_mute_temp$_2:=a_max_f(RValue);
         set_f_variable("lmaxf",AMMPmonitor_mute_temp$_2,RValue);
         set_f_variable("totalp",AMMPmonitor_mute_V,RValue);
         AMMPmonitor_mute_ifs:=-1;
         AMMPmonitor_mute_ap:=a_next(AMMPmonitor_mute_ifs,RValue) ;
         while((AMMPmonitor_mute_ap)!=NULL)
         {
             AMMPmonitor_mute_ifs:=1;
             AMMPmonitor_mute_T:=AMMPmonitor_mute_T+AMMPmonitor_mute_ap->vx*AMMPmonitor_mute_ap->vx*AMMPmonitor_mute_ap->mass;
             AMMPmonitor_mute_T:=AMMPmonitor_mute_T+AMMPmonitor_mute_ap->vy*AMMPmonitor_mute_ap->vy*AMMPmonitor_mute_ap->mass;
             AMMPmonitor_mute_T:=AMMPmonitor_mute_T+AMMPmonitor_mute_ap->vz*AMMPmonitor_mute_ap->vz*AMMPmonitor_mute_ap->mass;
             AMMPmonitor_mute_ap:=a_next(AMMPmonitor_mute_ifs,RValue) 
         };
         AMMPmonitor_mute_T:=AMMPmonitor_mute_T*0.5/ 4.184/ 1000/ 1000;
         set_f_variable("totalk",AMMPmonitor_mute_T,RValue);
         fprintf(op," %f total energy\n",AMMPmonitor_mute_T+AMMPmonitor_mute_V,RValue) and skip
     }
     else
     {
         skip
     }
     )
     }; 
      struct NOEL {
     ATOM *atom1,*atom2 and 
     float d,dm,dh,km,kh and 
     void *next$ 
 };
 NOEL *noel_first<==NULL and skip;
 NOEL *noel_last<==NULL and skip;
 function noel ( int p1,int p2,float d,float dm,float dh,float km,float kh,int RValue )
 {
     frame(noel_ap1,noel_ap2,noel_new,noel_line,return,break$) and ( 
     int break$<==0 and skip;
     int return<==0 and skip;
     ATOM *noel_ap1,*noel_ap2 and skip;
     NOEL *noel_new and skip;
     char noel_line[80] and skip;
     noel_ap1:=a_m_serial(p1,RValue);
     noel_ap2:=a_m_serial(p2,RValue);
     if((noel_ap1=NULL) OR (noel_ap2=NULL)) then 
     {
         sprintf(noel_line,"undefined atom in noel %d %d \0",p1,p2,RValue) and skip;
         aaerror(noel_line);
         return<==1 and RValue:=0;
         skip
         
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         noel_new:=noel_first;
         if(noel_new!=NULL) then 
         {
             break$<==0 and skip;
             while( return=0 AND   break$=0 AND 1)
             {
                 if(noel_new=NULL) then 
                 {
                     break$<==1 and skip
                  }
                 else 
                 {
                      skip 
                 };
                 if(break$=0)   then
                 {
                     if((noel_new->atom1=noel_ap1 AND noel_new->atom2=noel_ap2) OR (noel_new->atom1=noel_ap2 AND noel_new->atom2=noel_ap1)) then 
                     {
                         noel_new->d:=d;
                         noel_new->dm:=dm;
                         noel_new->dh:=dh;
                         noel_new->km:=km;
                         noel_new->kh:=kh;
                         return<==1 and RValue:=1;
                         skip
                         
                     }
                     else 
                     {
                          skip 
                     };
                     if(return=0)   then 
                     {
                         if(noel_new=noel_new->next$) then 
                         {
                             break$<==1 and skip
                          }
                         else 
                         {
                              skip 
                         };
                         if(break$=0)   then
                         {
                             noel_new:=noel_new->next$
                         }
                         else
                         {
                             skip
                         }
                     }
                     else
                     {
                         skip
                     }
                 }
                 else
                 {
                     skip
                 }
             };
             break$<==0 and skip
             
         }
         else 
         {
              skip 
         };
         if(return=0)  then
         {
             noel_new:=malloc(sizeof(NOEL)) ;
             if((noel_new)=NULL) then 
             {
                 return<==1 and RValue:=0;
                 skip
                 
             }
             else 
             {
                  skip 
             };
             if(return=0)   then 
             {
                 if(noel_first=NULL) then 
                 {
                     noel_first:=noel_new
                 }
                 else 
                 {
                      skip 
                 };
                 if(noel_last=NULL) then 
                 {
                     noel_last:=noel_new
                 }
                 else 
                 {
                      skip 
                 };
                 noel_new->atom1:=noel_ap1;
                 noel_new->atom2:=noel_ap2;
                 noel_new->d:=d;
                 noel_new->dm:=dm;
                 noel_new->dh:=dh;
                 noel_new->km:=km;
                 noel_new->kh:=kh;
                 noel_new->next$:=noel_new;
                 noel_last->next$:=noel_new;
                 noel_last:=noel_new;
                 return<==1 and RValue:=1;
                 skip
             }
             else
             {
                 skip
             }
         }
         else
         {
             skip
         }
     }
     else
     {
         skip
     }
     )
     }; 
  function v_noel ( float *V,float lambda,int RValue )
 {
     frame(v_noel_bp,v_noel_r,v_noel_xt,v_noel_yt,v_noel_zt,v_noel_a1,v_noel_a2,return) and ( 
     int return<==0 and skip;
     NOEL *v_noel_bp and skip;
     float v_noel_r,v_noel_xt,v_noel_yt,v_noel_zt and skip;
     ATOM *v_noel_a1,*v_noel_a2 and skip;
     v_noel_bp:=noel_first;
     if(v_noel_bp=NULL) then 
     {
         return<==1 and RValue:=1;
         skip
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         while( return=0 AND  1)
         {
             if(v_noel_bp=NULL) then 
             {
                 return<==1 and RValue:=0;
                 skip
             }
             else 
             {
                  skip 
             };
             if(return=0)   then 
             {
                 v_noel_a1:=v_noel_bp->atom1;
                 v_noel_a2:=v_noel_bp->atom2;
                 if(v_noel_a1->active OR v_noel_a2->active) then 
                 {
                     if(lambda=0.0) then 
                     {
                         v_noel_r:=(v_noel_a1->x-v_noel_a2->x)*(v_noel_a1->x-v_noel_a2->x);
                         v_noel_r:=v_noel_r+(v_noel_a1->y-v_noel_a2->y)*(v_noel_a1->y-v_noel_a2->y);
                         v_noel_r:=v_noel_r+(v_noel_a1->z-v_noel_a2->z)*(v_noel_a1->z-v_noel_a2->z)
                         
                     }
                     else
                     {
                         v_noel_xt:=(v_noel_a1->x-v_noel_a2->x+lambda*(v_noel_a1->dx-v_noel_a2->dx));
                         v_noel_yt:=(v_noel_a1->y-v_noel_a2->y+lambda*(v_noel_a1->dy-v_noel_a2->dy));
                         v_noel_zt:=(v_noel_a1->z-v_noel_a2->z+lambda*(v_noel_a1->dz-v_noel_a2->dz));
                         v_noel_r:=v_noel_xt*v_noel_xt+v_noel_yt*v_noel_yt+v_noel_zt*v_noel_zt
                     };
                     v_noel_r:=sqrt(v_noel_r);
                     if(v_noel_r<v_noel_bp->d-v_noel_bp->dm) then 
                     {
                         v_noel_r:=v_noel_r-v_noel_bp->d+v_noel_bp->dm;
                         * V:=* V+v_noel_bp->km*v_noel_r*v_noel_r
                     }
                     else
                     {
                         if(v_noel_r>v_noel_bp->d+v_noel_bp->dh) then 
                         {
                             v_noel_r:=v_noel_r-v_noel_bp->d-v_noel_bp->dh;
                             * V:=* V+v_noel_bp->kh*v_noel_r*v_noel_r
                             
                         }
                         else 
                         {
                              skip 
                         }
                     }
                     
                 }
                 else 
                 {
                      skip 
                 };
                 if(v_noel_bp=v_noel_bp->next$) then 
                 {
                     return<==1 and RValue:=1;
                     skip
                 }
                 else 
                 {
                      skip 
                 };
                 if(return=0)   then 
                 {
                     v_noel_bp:=v_noel_bp->next$
                 }
                 else
                 {
                     skip
                 }
             }
             else
             {
                 skip
             }
         }
     }
     else
     {
         skip
     }
     )
     }; 
  function f_noel ( float lambda,int RValue )
 {
     frame(f_noel_bp,f_noel_r,f_noel_k,f_noel_ux,f_noel_uy,f_noel_uz,f_noel_a1,f_noel_a2,return) and ( 
     int return<==0 and skip;
     NOEL *f_noel_bp and skip;
     float f_noel_r,f_noel_k,f_noel_ux,f_noel_uy,f_noel_uz and skip;
     ATOM *f_noel_a1,*f_noel_a2 and skip;
     f_noel_bp:=noel_first;
     if(f_noel_bp=NULL) then 
     {
         return<==1 and RValue:=1;
         skip
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         while( return=0 AND  1)
         {
             if(f_noel_bp=NULL) then 
             {
                 return<==1 and RValue:=0;
                 skip
             }
             else 
             {
                  skip 
             };
             if(return=0)   then 
             {
                 f_noel_a1:=f_noel_bp->atom1;
                 f_noel_a2:=f_noel_bp->atom2;
                 if(f_noel_a1->active OR f_noel_a2->active) then 
                 {
                     if(lambda=0.0) then 
                     {
                         f_noel_ux:=(f_noel_a2->x-f_noel_a1->x);
                         f_noel_uy:=(f_noel_a2->y-f_noel_a1->y);
                         f_noel_uz:=(f_noel_a2->z-f_noel_a1->z)
                         
                     }
                     else
                     {
                         f_noel_ux:=(f_noel_a2->x-f_noel_a1->x+lambda*(f_noel_a2->dx-f_noel_a1->dx));
                         f_noel_uy:=(f_noel_a2->y-f_noel_a1->y+lambda*(f_noel_a2->dy-f_noel_a1->dy));
                         f_noel_uz:=(f_noel_a2->z-f_noel_a1->z+lambda*(f_noel_a2->dz-f_noel_a1->dz))
                     };
                     f_noel_r:=f_noel_ux*f_noel_ux+f_noel_uy*f_noel_uy+f_noel_uz*f_noel_uz;
                     if(f_noel_r<=1.e-5) then 
                     {
                         f_noel_r:=0;
                         f_noel_ux:=1.0;
                         f_noel_uy:=0.0;
                         f_noel_uz:=0.0
                         
                     }
                     else
                     {
                         f_noel_r:=sqrt(f_noel_r);
                         f_noel_ux:=f_noel_ux/ f_noel_r;
                         f_noel_uy:=f_noel_uy/ f_noel_r;
                         f_noel_uz:=f_noel_uz/ f_noel_r
                     };
                     if(f_noel_r<f_noel_bp->d-f_noel_bp->dm) then 
                     {
                         f_noel_r:=f_noel_r-f_noel_bp->d+f_noel_bp->dm;
                         f_noel_ux:=2*f_noel_bp->km*f_noel_r*f_noel_ux;
                         f_noel_uy:=2*f_noel_bp->km*f_noel_r*f_noel_uy;
                         f_noel_uz:=2*f_noel_bp->km*f_noel_r*f_noel_uz
                         
                     }
                     else
                     {
                         if(f_noel_r>f_noel_bp->d+f_noel_bp->dh) then 
                         {
                             f_noel_r:=f_noel_r-f_noel_bp->d-f_noel_bp->dh;
                             f_noel_ux:=2*f_noel_bp->kh*f_noel_r*f_noel_ux;
                             f_noel_uy:=2*f_noel_bp->kh*f_noel_r*f_noel_uy;
                             f_noel_uz:=2*f_noel_bp->kh*f_noel_r*f_noel_uz
                         }
                         else
                         {
                             f_noel_ux:=0.0;
                             f_noel_uy:=0.0;
                             f_noel_uz:=0.0
                         }
                     };
                     if(f_noel_a1->active) then 
                     {
                         f_noel_a1->fx:=f_noel_a1->fx+f_noel_ux;
                         f_noel_a1->fy:=f_noel_a1->fy+f_noel_uy;
                         f_noel_a1->fz:=f_noel_a1->fz+f_noel_uz
                         
                     }
                     else 
                     {
                          skip 
                     };
                     if(f_noel_a2->active) then 
                     {
                         f_noel_a2->fx:=f_noel_a2->fx-f_noel_ux;
                         f_noel_a2->fy:=f_noel_a2->fy-f_noel_uy;
                         f_noel_a2->fz:=f_noel_a2->fz-f_noel_uz
                         
                     }
                     else 
                     {
                          skip 
                     }
                     
                 }
                 else 
                 {
                      skip 
                 };
                 if(f_noel_bp=f_noel_bp->next$) then 
                 {
                     return<==1 and RValue:=1;
                     skip
                 }
                 else 
                 {
                      skip 
                 };
                 if(return=0)   then 
                 {
                     f_noel_bp:=f_noel_bp->next$
                 }
                 else
                 {
                     skip
                 }
             }
             else
             {
                 skip
             }
         }
     }
     else
     {
         skip
     }
     )
     }; 
  function get_noel ( ATOM *a1,ATOM **noeled,int mnoel,int *innoel )
 {
     frame(get_noel_mine,return) and ( 
     int return<==0 and skip;
     NOEL *get_noel_mine and skip;
     get_noel_mine:=noel_first;
     * innoel:=0;
     while( return=0 AND  1)
     {
         if((get_noel_mine=NULL)) then 
         {
              return<==1 and skip
             
         }
         else 
         {
              skip 
         };
         if(return=0)   then 
         {
             if(get_noel_mine->atom1=a1) then 
             {
                 noeled[(* innoel)]:=get_noel_mine->atom2;
                 (* innoel):=(* innoel)+1
                 
             }
             else 
             {
                  skip 
             };
             if(get_noel_mine->atom2=a1) then 
             {
                 noeled[(* innoel)]:=get_noel_mine->atom1;
                 (* innoel):=(* innoel)+1
                 
             }
             else 
             {
                  skip 
             };
             if(get_noel_mine=get_noel_mine->next$) then 
             {
                  return<==1 and skip
             }
             else 
             {
                  skip 
             };
             if(return=0)   then 
             {
                 get_noel_mine:=get_noel_mine->next$;
                 if(* innoel=mnoel) then 
                 {
                      return<==1 and skip
                 }
                 else 
                 {
                      skip 
                 }
             }
             else
             {
                 skip
             }
         }
         else
         {
             skip
         }
     }
     )
     }; 
  function dump_noels ( FILE *where )
 {
     frame(dump_noels_b,dump_noels_a1,dump_noels_a2,return) and ( 
     int return<==0 and skip;
     NOEL *dump_noels_b and skip;
     ATOM *dump_noels_a1,*dump_noels_a2 and skip;
     dump_noels_b:=noel_first;
     if(dump_noels_b=NULL) then 
     {
          return<==1 and skip
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         while( return=0 AND  (dump_noels_b->next$!=dump_noels_b))
         {
             if(dump_noels_b->next$=NULL) then 
             {
                  return<==1 and skip
             }
             else 
             {
                  skip 
             };
             if(return=0)   then 
             {
                 dump_noels_a1:=dump_noels_b->atom1;
                 dump_noels_a2:=dump_noels_b->atom2;
                 fprintf(where,"noel %d %d %f %f %f %f %f;\n",dump_noels_a1->serial,dump_noels_a2->serial,dump_noels_b->d,dump_noels_b->dm,dump_noels_b->dh,dump_noels_b->km,dump_noels_b->kh,RValue) and skip;
                 dump_noels_b:=dump_noels_b->next$
             }
             else
             {
                 skip
             }
         };
         if(return=0)   then 
         {
             if(dump_noels_b->next$=NULL) then 
             {
                  return<==1 and skip
             }
             else 
             {
                  skip 
             };
             if(return=0)   then 
             {
                 dump_noels_a1:=dump_noels_b->atom1;
                 dump_noels_a2:=dump_noels_b->atom2;
                 fprintf(where,"noel %d %d %f %f %f %f %f ;\n",dump_noels_a1->serial,dump_noels_a2->serial,dump_noels_b->d,dump_noels_b->dm,dump_noels_b->dh,dump_noels_b->km,dump_noels_b->kh,RValue) and skip
             }
             else
             {
                 skip
             }
         }
         else
         {
             skip
         }
     }
     else
     {
         skip
     }
     )
     }; 
  function a_noel ( float *V,float lambda,int ilow,int ihigh,FILE *op,int RValue )
 {
     frame(a_noel_bp,a_noel_r,a_noel_xt,a_noel_yt,a_noel_zt,a_noel_a1,a_noel_a2,return) and ( 
     int return<==0 and skip;
     NOEL *a_noel_bp and skip;
     float a_noel_r,a_noel_xt,a_noel_yt,a_noel_zt and skip;
     ATOM *a_noel_a1,*a_noel_a2 and skip;
     a_noel_bp:=noel_first;
     if(a_noel_bp=NULL) then 
     {
         return<==1 and RValue:=1;
         skip
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         while( return=0 AND  1)
         {
             if(a_noel_bp=NULL) then 
             {
                 return<==1 and RValue:=0;
                 skip
             }
             else 
             {
                  skip 
             };
             if(return=0)   then 
             {
                 a_noel_a1:=a_noel_bp->atom1;
                 a_noel_a2:=a_noel_bp->atom2;
                 if((a_noel_a1->serial>=ilow AND a_noel_a1->serial<=ihigh) OR (a_noel_a2->serial>=ilow AND a_noel_a2->serial<=ihigh)) then 
                 {
                     if(lambda=0.0) then 
                     {
                         a_noel_r:=(a_noel_a1->x-a_noel_a2->x)*(a_noel_a1->x-a_noel_a2->x);
                         a_noel_r:=a_noel_r+(a_noel_a1->y-a_noel_a2->y)*(a_noel_a1->y-a_noel_a2->y);
                         a_noel_r:=a_noel_r+(a_noel_a1->z-a_noel_a2->z)*(a_noel_a1->z-a_noel_a2->z)
                         
                     }
                     else
                     {
                         a_noel_xt:=(a_noel_a1->x-a_noel_a2->x+lambda*(a_noel_a1->dx-a_noel_a2->dx));
                         a_noel_yt:=(a_noel_a1->y-a_noel_a2->y+lambda*(a_noel_a1->dy-a_noel_a2->dy));
                         a_noel_zt:=(a_noel_a1->z-a_noel_a2->z+lambda*(a_noel_a1->dz-a_noel_a2->dz));
                         a_noel_r:=a_noel_xt*a_noel_xt+a_noel_yt*a_noel_yt+a_noel_zt*a_noel_zt
                     };
                     a_noel_r:=sqrt(a_noel_r);
                     a_noel_zt:=0;
                     if(a_noel_r<a_noel_bp->d-a_noel_bp->dm) then 
                     {
                         a_noel_zt:=a_noel_bp->km*(a_noel_r-a_noel_bp->d+a_noel_bp->dm)*(a_noel_r-a_noel_bp->d+a_noel_bp->dm)
                     }
                     else 
                     {
                          skip 
                     };
                     if(a_noel_r>a_noel_bp->d+a_noel_bp->dh) then 
                     {
                         a_noel_zt:=a_noel_bp->kh*(a_noel_r-a_noel_bp->d-a_noel_bp->dh)*(a_noel_r-a_noel_bp->d-a_noel_bp->dh)
                     }
                     else 
                     {
                          skip 
                     };
                     * V:=* V+a_noel_zt;
                     fprintf(op,"NOEl %s %d %s %d E %f value %f error %f\n",a_noel_a1->name,a_noel_a1->serial,a_noel_a2->name,a_noel_a2->serial,a_noel_zt,a_noel_r,a_noel_r-a_noel_bp->d,RValue) and skip
                     
                 }
                 else 
                 {
                      skip 
                 };
                 if(a_noel_bp=a_noel_bp->next$) then 
                 {
                     return<==1 and RValue:=1;
                     skip
                 }
                 else 
                 {
                      skip 
                 };
                 if(return=0)   then 
                 {
                     a_noel_bp:=a_noel_bp->next$
                 }
                 else
                 {
                     skip
                 }
             }
             else
             {
                 skip
             }
         }
     }
     else
     {
         skip
     }
     )
     }; 
  function gsdg_noel ( ATOM *ap,int RValue )
 {
     frame(gsdg_noel_bp,gsdg_noel_np,return) and ( 
     int return<==0 and skip;
     ATOM *gsdg_noel_bp and skip;
     NOEL *gsdg_noel_np and skip;
     gsdg_noel_np:=noel_first;
     while( return=0 AND  1)
     {
         if(gsdg_noel_np=NULL) then 
         {
             return<==1 and RValue:=1;
             skip
         }
         else 
         {
              skip 
         };
         if(return=0)   then 
         {
             if(gsdg_noel_np->atom1=ap) then 
             {
                 gsdg_noel_bp:=gsdg_noel_np->atom2;
                 gsdg_noel_bp->vx:=(gsdg_noel_np->d*gsdg_noel_np->d);
                 gsdg_noel_bp->vy:=gsdg_noel_np->km
                 
             }
             else 
             {
                  skip 
             };
             if(gsdg_noel_np->atom2=ap) then 
             {
                 gsdg_noel_bp:=gsdg_noel_np->atom1;
                 gsdg_noel_bp->vx:=(gsdg_noel_np->d*gsdg_noel_np->d);
                 gsdg_noel_bp->vy:=gsdg_noel_np->km
                 
             }
             else 
             {
                  skip 
             };
             if(gsdg_noel_np=gsdg_noel_np->next$) then 
             {
                 return<==1 and RValue:=1;
                 skip
             }
             else 
             {
                  skip 
             };
             if(return=0)   then 
             {
                 gsdg_noel_np:=gsdg_noel_np->next$
             }
             else
             {
                 skip
             }
         }
         else
         {
             skip
         }
     };
     if(return=0)   then 
     {
         return<==1 and RValue:=0;
         skip
     }
     else
     {
         skip
     }
     )
     }; 
  function v_ho_noel ( float *V,float lambda,int RValue )
 {
     frame(v_ho_noel_bp,v_ho_noel_r,v_ho_noel_xt,v_ho_noel_yt,v_ho_noel_zt,v_ho_noel_a1,v_ho_noel_a2,v_ho_noel_hol,v_ho_noel_target,return) and ( 
     int return<==0 and skip;
     NOEL *v_ho_noel_bp and skip;
     float v_ho_noel_r,v_ho_noel_xt,v_ho_noel_yt,v_ho_noel_zt and skip;
     ATOM *v_ho_noel_a1,*v_ho_noel_a2 and skip;
     float v_ho_noel_hol,v_ho_noel_target and skip;
     v_ho_noel_hol:=get_f_variable("lambda",RValue);
     if(v_ho_noel_hol>1.0) then 
     {
         v_ho_noel_hol:=1.0
     }
     else 
     {
          skip 
     };
     if(v_ho_noel_hol<0.0) then 
     {
         v_ho_noel_hol:=0.0
     }
     else 
     {
          skip 
     };
     v_ho_noel_bp:=noel_first;
     if(v_ho_noel_bp=NULL) then 
     {
         return<==1 and RValue:=1;
         skip
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         while( return=0 AND  1)
         {
             if(v_ho_noel_bp=NULL) then 
             {
                 return<==1 and RValue:=0;
                 skip
             }
             else 
             {
                  skip 
             };
             if(return=0)   then 
             {
                 v_ho_noel_a1:=v_ho_noel_bp->atom1;
                 v_ho_noel_a2:=v_ho_noel_bp->atom2;
                 if(v_ho_noel_a1->active OR v_ho_noel_a2->active) then 
                 {
                     if(lambda=0.0) then 
                     {
                         v_ho_noel_r:=(v_ho_noel_a1->x-v_ho_noel_a2->x)*(v_ho_noel_a1->x-v_ho_noel_a2->x);
                         v_ho_noel_r:=v_ho_noel_r+(v_ho_noel_a1->y-v_ho_noel_a2->y)*(v_ho_noel_a1->y-v_ho_noel_a2->y);
                         v_ho_noel_r:=v_ho_noel_r+(v_ho_noel_a1->z-v_ho_noel_a2->z)*(v_ho_noel_a1->z-v_ho_noel_a2->z)
                         
                     }
                     else
                     {
                         v_ho_noel_xt:=(v_ho_noel_a1->x-v_ho_noel_a2->x+lambda*(v_ho_noel_a1->dx-v_ho_noel_a2->dx));
                         v_ho_noel_yt:=(v_ho_noel_a1->y-v_ho_noel_a2->y+lambda*(v_ho_noel_a1->dy-v_ho_noel_a2->dy));
                         v_ho_noel_zt:=(v_ho_noel_a1->z-v_ho_noel_a2->z+lambda*(v_ho_noel_a1->dz-v_ho_noel_a2->dz));
                         v_ho_noel_r:=v_ho_noel_xt*v_ho_noel_xt+v_ho_noel_yt*v_ho_noel_yt+v_ho_noel_zt*v_ho_noel_zt
                     };
                     v_ho_noel_r:=sqrt(v_ho_noel_r);
                     if(v_ho_noel_r<v_ho_noel_bp->d-v_ho_noel_bp->dm) then 
                     {
                         v_ho_noel_target:=v_ho_noel_hol*v_ho_noel_r+(1.0-v_ho_noel_hol)*(v_ho_noel_bp->d-v_ho_noel_bp->dm);
                         v_ho_noel_r:=v_ho_noel_r-v_ho_noel_target;
                         * V:=* V+v_ho_noel_bp->km*v_ho_noel_r*v_ho_noel_r
                     }
                     else
                     {
                         if(v_ho_noel_r>v_ho_noel_bp->d+v_ho_noel_bp->dh) then 
                         {
                             v_ho_noel_target:=v_ho_noel_hol*v_ho_noel_r+(1.0-v_ho_noel_hol)*(v_ho_noel_bp->d+v_ho_noel_bp->dh);
                             v_ho_noel_r:=v_ho_noel_r-v_ho_noel_target;
                             * V:=* V+v_ho_noel_bp->kh*v_ho_noel_r*v_ho_noel_r
                             
                         }
                         else 
                         {
                              skip 
                         }
                     }
                     
                 }
                 else 
                 {
                      skip 
                 };
                 if(v_ho_noel_bp=v_ho_noel_bp->next$) then 
                 {
                     return<==1 and RValue:=1;
                     skip
                 }
                 else 
                 {
                      skip 
                 };
                 if(return=0)   then 
                 {
                     v_ho_noel_bp:=v_ho_noel_bp->next$
                 }
                 else
                 {
                     skip
                 }
             }
             else
             {
                 skip
             }
         }
     }
     else
     {
         skip
     }
     )
     }; 
  function f_ho_noel ( float lambda,int RValue )
 {
     frame(f_ho_noel_bp,f_ho_noel_r,f_ho_noel_k,f_ho_noel_ux,f_ho_noel_uy,f_ho_noel_uz,f_ho_noel_a1,f_ho_noel_a2,f_ho_noel_hol,f_ho_noel_target,return) and ( 
     int return<==0 and skip;
     NOEL *f_ho_noel_bp and skip;
     float f_ho_noel_r,f_ho_noel_k,f_ho_noel_ux,f_ho_noel_uy,f_ho_noel_uz and skip;
     ATOM *f_ho_noel_a1,*f_ho_noel_a2 and skip;
     float f_ho_noel_hol,f_ho_noel_target and skip;
     f_ho_noel_hol:=get_f_variable("lambda",RValue);
     if(f_ho_noel_hol>1.0) then 
     {
         f_ho_noel_hol:=1.0
     }
     else 
     {
          skip 
     };
     if(f_ho_noel_hol<0.0) then 
     {
         f_ho_noel_hol:=0.0
     }
     else 
     {
          skip 
     };
     f_ho_noel_bp:=noel_first;
     if(f_ho_noel_bp=NULL) then 
     {
         return<==1 and RValue:=1;
         skip
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         while( return=0 AND  1)
         {
             if(f_ho_noel_bp=NULL) then 
             {
                 return<==1 and RValue:=0;
                 skip
             }
             else 
             {
                  skip 
             };
             if(return=0)   then 
             {
                 f_ho_noel_a1:=f_ho_noel_bp->atom1;
                 f_ho_noel_a2:=f_ho_noel_bp->atom2;
                 if(f_ho_noel_a1->active OR f_ho_noel_a2->active) then 
                 {
                     if(lambda=0.0) then 
                     {
                         f_ho_noel_ux:=(f_ho_noel_a2->x-f_ho_noel_a1->x);
                         f_ho_noel_uy:=(f_ho_noel_a2->y-f_ho_noel_a1->y);
                         f_ho_noel_uz:=(f_ho_noel_a2->z-f_ho_noel_a1->z)
                         
                     }
                     else
                     {
                         f_ho_noel_ux:=(f_ho_noel_a2->x-f_ho_noel_a1->x+lambda*(f_ho_noel_a2->dx-f_ho_noel_a1->dx));
                         f_ho_noel_uy:=(f_ho_noel_a2->y-f_ho_noel_a1->y+lambda*(f_ho_noel_a2->dy-f_ho_noel_a1->dy));
                         f_ho_noel_uz:=(f_ho_noel_a2->z-f_ho_noel_a1->z+lambda*(f_ho_noel_a2->dz-f_ho_noel_a1->dz))
                     };
                     f_ho_noel_r:=f_ho_noel_ux*f_ho_noel_ux+f_ho_noel_uy*f_ho_noel_uy+f_ho_noel_uz*f_ho_noel_uz;
                     if(f_ho_noel_r<=1.e-5) then 
                     {
                         f_ho_noel_r:=0;
                         f_ho_noel_ux:=1.0;
                         f_ho_noel_uy:=0.0;
                         f_ho_noel_uz:=0.0
                         
                     }
                     else
                     {
                         f_ho_noel_r:=sqrt(f_ho_noel_r);
                         f_ho_noel_ux:=f_ho_noel_ux/ f_ho_noel_r;
                         f_ho_noel_uy:=f_ho_noel_uy/ f_ho_noel_r;
                         f_ho_noel_uz:=f_ho_noel_uz/ f_ho_noel_r
                     };
                     if(f_ho_noel_r<f_ho_noel_bp->d-f_ho_noel_bp->dm) then 
                     {
                         f_ho_noel_target:=f_ho_noel_hol*f_ho_noel_r+(1.0-f_ho_noel_hol)*(f_ho_noel_bp->d-f_ho_noel_bp->dm);
                         f_ho_noel_r:=f_ho_noel_r-f_ho_noel_target;
                         f_ho_noel_ux:=2*f_ho_noel_bp->km*f_ho_noel_r*(1.0-f_ho_noel_hol)*f_ho_noel_ux;
                         f_ho_noel_uy:=2*f_ho_noel_bp->km*f_ho_noel_r*(1.0-f_ho_noel_hol)*f_ho_noel_uy;
                         f_ho_noel_uz:=2*f_ho_noel_bp->km*f_ho_noel_r*(1.0-f_ho_noel_hol)*f_ho_noel_uz
                         
                     }
                     else
                     {
                         if(f_ho_noel_r>f_ho_noel_bp->d+f_ho_noel_bp->dh) then 
                         {
                             f_ho_noel_target:=f_ho_noel_hol*f_ho_noel_r+(1.0-f_ho_noel_hol)*(f_ho_noel_bp->d+f_ho_noel_bp->dh);
                             f_ho_noel_r:=f_ho_noel_r-f_ho_noel_target;
                             f_ho_noel_ux:=2*f_ho_noel_bp->kh*f_ho_noel_r*(1.0-f_ho_noel_hol)*f_ho_noel_ux;
                             f_ho_noel_uy:=2*f_ho_noel_bp->kh*f_ho_noel_r*(1.0-f_ho_noel_hol)*f_ho_noel_uy;
                             f_ho_noel_uz:=2*f_ho_noel_bp->kh*f_ho_noel_r*(1.0-f_ho_noel_hol)*f_ho_noel_uz
                         }
                         else
                         {
                             f_ho_noel_ux:=0.0;
                             f_ho_noel_uy:=0.0;
                             f_ho_noel_uz:=0.0
                         }
                     };
                     if(f_ho_noel_a1->active) then 
                     {
                         f_ho_noel_a1->fx:=f_ho_noel_a1->fx+f_ho_noel_ux;
                         f_ho_noel_a1->fy:=f_ho_noel_a1->fy+f_ho_noel_uy;
                         f_ho_noel_a1->fz:=f_ho_noel_a1->fz+f_ho_noel_uz
                         
                     }
                     else 
                     {
                          skip 
                     };
                     if(f_ho_noel_a2->active) then 
                     {
                         f_ho_noel_a2->fx:=f_ho_noel_a2->fx-f_ho_noel_ux;
                         f_ho_noel_a2->fy:=f_ho_noel_a2->fy-f_ho_noel_uy;
                         f_ho_noel_a2->fz:=f_ho_noel_a2->fz-f_ho_noel_uz
                         
                     }
                     else 
                     {
                          skip 
                     }
                     
                 }
                 else 
                 {
                      skip 
                 };
                 if(f_ho_noel_bp=f_ho_noel_bp->next$) then 
                 {
                     return<==1 and RValue:=1;
                     skip
                 }
                 else 
                 {
                      skip 
                 };
                 if(return=0)   then 
                 {
                     f_ho_noel_bp:=f_ho_noel_bp->next$
                 }
                 else
                 {
                     skip
                 }
             }
             else
             {
                 skip
             }
         }
     }
     else
     {
         skip
     }
     )
     }; 
  function steep (void (*vfs[])(float*, float, int RValue), void (*ffs[])(float, int RValue),int nfs,int nstep,float toler,int RValue )
 {
     frame(steep_i,steep_j,steep_ifs,steep_vb,steep_vt,steep_vto,steep_lam,steep_5_temp$_1,return,break$) and ( 
     int break$<==0 and skip;
     int return<==0 and skip;
     int steep_i,steep_j,steep_ifs and skip;
     float steep_vb,steep_vt,steep_vto and skip;
     float steep_lam and skip;
     steep_i:=0;
     
     while( return=0 AND  steep_i<nstep)
     {
         steep_vb:=0.0;
         steep_ifs:=0;
         
         while(steep_ifs<nfs)
         {
             vfs[steep_ifs](&steep_vb,0.0,RValue);
             steep_ifs:=steep_ifs+1
             
         };
         a_f_zero(RValue);
         steep_ifs:=0;
         
         while(steep_ifs<nfs)
         {
             ffs[steep_ifs](0.0,RValue);
             steep_ifs:=steep_ifs+1
             
         };
         steep_lam:=a_max_f(RValue);
         if(steep_lam<=toler) then 
         {
             return<==1 and RValue:=1;
             skip
         }
         else 
         {
              skip 
         };
         if(return=0)   then 
         {
             if(steep_lam<=1.0) then 
             {
                 a_ftodx(1.0,0.0,RValue)
                 
             }
             else
             {
                 int steep_5_temp$_1 and skip;
                 steep_5_temp$_1:=sqrt(steep_lam);
                 a_ftodx(1.0/ steep_5_temp$_1,0.0,RValue)
             };
             steep_vto:=steep_vb;
             steep_lam:=0.0;
             break$<==0 and skip;
             steep_j:=0;
             
             while( break$=0 AND  steep_j<200)
             {
                 steep_vt:=0.0;
                 steep_lam:=steep_lam+0.01*steep_j;
                 steep_ifs:=0;
                 
                 while(steep_ifs<nfs)
                 {
                     vfs[steep_ifs](&steep_vt,steep_lam,RValue);
                     steep_ifs:=steep_ifs+1
                     
                 };
                 if(steep_vt>steep_vto AND steep_j=0) then 
                 {
                     a_ftodx(0.0,0.1,RValue)
                     
                 }
                 else
                 {
                     if(steep_vt>steep_vto) then 
                     {
                         steep_lam:=steep_lam-0.01*steep_j;
                         break$<==1 and skip
                          
                     }
                     else 
                     {
                          skip 
                     }
                 };
                 if(break$=0)  then 
                 {
                     steep_vto:=steep_vt;
                     steep_j:=steep_j+1
                 }
                 else
                 {
                     skip
                 }
                 
             };
             break$<==0 and skip;
             a_inc_d(steep_lam,RValue);
             steep_i:=steep_i+1
         }
         else
         {
             skip
         }
         
     };
     if(return=0)   then 
     {
         return<==1 and RValue:=0;
         skip
     }
     else
     {
         skip
     }
     )
     }; 
  function cngdel (void (*vfs[])(float*, float, int RValue),void (*ffs[])(float, int RValue),int nfs,int nstep,int nreset,float toler,int echo,int RValue )
 {
     frame(cngdel_i,cngdel_j,cngdel_ifs,cngdel_vb,cngdel_vt,cngdel_vto,cngdel_lam,cngdel_beta,cngdel_betad,cngdel_temp$_1,cngdel_temp$_2,cngdel_7_temp$_3,return) and ( 
     int return<==0 and skip;
     int cngdel_i,cngdel_j,cngdel_ifs and skip;
     float cngdel_vb,cngdel_vt,cngdel_vto and skip;
     float cngdel_lam and skip;
     float cngdel_beta,cngdel_betad and skip;
     if(nreset<1) then 
     {
         nreset:=nstep
     }
     else 
     {
          skip 
     };
     a_g_zero(RValue);
     a_d_zero(RValue);
     cngdel_i:=0;
     
     while( return=0 AND  cngdel_i<nstep)
     {
         cngdel_vb:=0.0;
         cngdel_ifs:=0;
         
         while(cngdel_ifs<nfs)
         {
             vfs[cngdel_ifs](&cngdel_vb,0.0,RValue);
             cngdel_ifs:=cngdel_ifs+1
             
         };
         a_f_zero(RValue);
         cngdel_ifs:=0;
         
         while(cngdel_ifs<nfs)
         {
             ffs[cngdel_ifs](0.0,RValue);
             cngdel_ifs:=cngdel_ifs+1
             
         };
         cngdel_lam:=a_max_f(RValue);
         cngdel_beta:=a_pr_beta(RValue);
         if((cngdel_i % nreset)=0) then 
         {
             cngdel_beta:=0.0
         }
         else 
         {
              skip 
         };
         if(echo) then 
         {
             output (" vb, maxf ",cngdel_vb," ",cngdel_lam," ",cngdel_beta," \n") and skip
         }
         else 
         {
              skip 
         };
         if(cngdel_lam<=toler) then 
         {
             return<==1 and RValue:=1;
             skip
         }
         else 
         {
              skip 
         };
         if(return=0)   then 
         {
             cngdel_lam:=a_max_f(RValue);
             a_ftodx(1.0,cngdel_beta,RValue);
             a_ftogx(1.0,0.0,RValue);
             float cngdel_temp$_1 and skip;
             cngdel_temp$_1:=a_max_d(RValue);
             int cngdel_temp$_2 and skip;
             cngdel_temp$_2:=sqrt(cngdel_temp$_1);
             cngdel_lam:=linmin(vfs,nfs,cngdel_temp$_2,RValue);
             if(cngdel_lam<1.e-6) then 
             {
                 a_f_zero(RValue);
                 cngdel_ifs:=0;
                 
                 while(cngdel_ifs<nfs)
                 {
                     ffs[cngdel_ifs](0.0,RValue);
                     cngdel_ifs:=cngdel_ifs+1
                     
                 };
                 float cngdel_7_temp$_3 and skip;
                 cngdel_7_temp$_3:=a_max_f(RValue);
                 cngdel_lam:=sqrt(cngdel_7_temp$_3);
                 if(cngdel_lam<1.0) then 
                 {
                     cngdel_lam:=1.0
                 }
                 else 
                 {
                      skip 
                 };
                 a_ftodx(1.0/ cngdel_lam,0.0,RValue);
                 cngdel_lam:=linmin(vfs,nfs,1.0,RValue);
                 if(cngdel_lam<1.e-6) then 
                 {
                     return<==1 and RValue:=0;
                     skip
                 }
                 else 
                 {
                      skip 
                 }
             }
             else
             {
                 skip
             }
             
         }
         else 
         {
              skip 
         };
         if(return=0)  then
         {
             a_inc_d(cngdel_lam,RValue);
             cngdel_i:=cngdel_i+1
         }
         else
         {
             skip
         }
         
     };
     if(return=0)   then 
     {
         return<==1 and RValue:=0;
         skip
     }
     else
     {
         skip
     }
     )
     }; 
  function linmin ( void (*ffs[])(float*, float, int RValue),int nfs,float damp,float RValue )
 {
     frame(linmin_i,linmin_iter,linmin_jter,linmin_imin,linmin_ok,linmin_alpha,linmin_fval,linmin_dstep,linmin_step,linmin_stpmin,linmin_fvt,linmin_fmin,linmin_fold,linmin_nostep,linmin_mxdq,return,break$,continue) and ( 
     int continue<==0 and skip;
     int break$<==0 and skip;
     int return<==0 and skip;
     int linmin_i,linmin_iter,linmin_jter,linmin_imin,linmin_ok and skip;
     float linmin_alpha[401],linmin_fval[401],linmin_dstep,linmin_step,linmin_stpmin,linmin_fvt,linmin_fmin,linmin_fold and skip;
     int linmin_nostep and skip;
     float linmin_mxdq and skip;
     linmin_nostep:=get_i_variable("nostep",RValue);
     if(linmin_nostep<1) then 
     {
         linmin_nostep:=8
     }
     else 
     {
          skip 
     };
     linmin_mxdq:=get_f_variable("mxdq",RValue);
     set_f_variable("mxdq",100.0,RValue);
     linmin_dstep:=1.0;
     linmin_step:=0;
     linmin_stpmin:=0.0;
     linmin_imin:=0;
     linmin_alpha[0]:=0;
     linmin_fval[0]:=0;
     if(damp<1.0) then 
     {
         linmin_dstep:=0.25
         
     }
     else
     {
         linmin_dstep:=1.0/ damp
     };
     linmin_i:=0;
     
     while(linmin_i<nfs)
     {
         ffs[linmin_i](&linmin_fval[0],0.0,RValue);
         linmin_i:=linmin_i+1
         
     };
     linmin_fmin:=linmin_fval[0];
     linmin_fold:=linmin_fmin;
     linmin_imin:=linmin_imin+1;
     linmin_ok:=0;
     break$<==0 and skip;
     while( break$=0 AND  1)
     {
         continue<==0 and skip;
         linmin_alpha[linmin_imin]:=linmin_dstep;
         linmin_fval[linmin_imin]:=0.0;
         linmin_i:=0;
         
         while(linmin_i<nfs)
         {
             ffs[linmin_i](&linmin_fval[linmin_imin],linmin_dstep,RValue);
             linmin_i:=linmin_i+1
             
         };
         if(linmin_fval[linmin_imin]>linmin_fval[0]) then 
         {
             linmin_dstep:=linmin_dstep*0.25;
             if(linmin_dstep>1.e-8) then 
             {
                 continue<==1 and skip
              }
             else 
             {
                  skip 
             };
             if(continue=0)   then 
             {
                 linmin_ok:=1;
                 break$<==1 and skip
              }
             else
             {
                 skip
             }
             
         }
         else 
         {
              skip 
         };
         if(break$=0)   then
         {
             if(continue=0)  then
             {
                 linmin_ok:=0;
                 break$<==1 and skip
              }
             else
             {
                 skip
             }
         }
         else
         {
             skip
         }
     };
     break$<==0 and skip;
     continue<==0 and skip;
     if(linmin_ok=0) then 
     {
         linmin_iter:=0;
         
         while(linmin_iter<linmin_nostep)
         {
             break$<==0 and skip;
             linmin_jter:=1;
             
             while( break$=0 AND  linmin_jter<100)
             {
                 linmin_step:=linmin_step+linmin_dstep;
                 linmin_ok:=0;
                 break$<==0 and skip;
                 linmin_i:=0;
                 
                 while( break$=0 AND  linmin_i<linmin_imin)
                 {
                     if(linmin_alpha[linmin_i]=linmin_step) then 
                     {
                         linmin_fvt:=linmin_fval[linmin_i];
                         linmin_ok:=1;
                         break$<==1 and skip
                          
                     }
                     else 
                     {
                          skip 
                     };
                     if(break$=0)   then
                     {
                         linmin_i:=linmin_i+1
                     }
                     else
                     {
                         skip
                     }
                     
                 };
                 break$<==0 and skip;
                 if(linmin_ok=0) then 
                 {
                     linmin_fvt:=0.0;
                     linmin_i:=0;
                     
                     while(linmin_i<nfs)
                     {
                         ffs[linmin_i](&linmin_fvt,linmin_step,RValue);
                         linmin_i:=linmin_i+1
                         
                     };
                     linmin_alpha[linmin_imin]:=linmin_step;
                     linmin_fval[linmin_imin]:=linmin_fvt;
                     linmin_imin:=linmin_imin+1;
                     if(linmin_imin>400) then 
                     {
                         linmin_imin:=400
                     }
                     else 
                     {
                          skip 
                     }
                     
                 }
                 else 
                 {
                      skip 
                 };
                 if(linmin_fvt<linmin_fmin) then 
                 {
                     linmin_fmin:=linmin_fvt;
                     linmin_stpmin:=linmin_step
                     
                 }
                 else 
                 {
                      skip 
                 };
                 if(linmin_fvt>linmin_fold) then 
                 {
                     linmin_dstep:=-linmin_dstep/ 2;
                     break$<==1 and skip
                      
                 }
                 else 
                 {
                      skip 
                 };
                 if(break$=0)   then
                 {
                     linmin_fold:=linmin_fvt;
                     linmin_jter:=linmin_jter+1
                 }
                 else
                 {
                     skip
                 }
                 
             };
             break$<==0 and skip;
             linmin_iter:=linmin_iter+1
             
         }
         
     }
     else 
     {
          skip 
     };
     set_f_variable("mxdq",linmin_mxdq,RValue);
     return<==1 and RValue:=linmin_stpmin;
     skip
     )
     }; 
	  float randf_buff[55] and skip;
     int randf_ip<==0,randf_jp<==0,randf_kp and skip;
  function randf ( float RValue )
 {
     frame(randf_i,randf_seed,randf_xva,return) and ( 
     int return<==0 and skip;
    
     int randf_i,randf_seed and skip;
     float randf_xva and skip;
     if(randf_ip=0 AND randf_jp=0) then 
     {
         randf_seed:=get_i_variable("seed",RValue);
         randf_ip:=0;
         
         while(randf_ip<55)
         {
             randf_seed:=(randf_seed*2349+14867) % 32767;
             randf_buff[randf_ip]:=(float)randf_seed/ 32767.0;
             if(randf_buff[randf_ip]>1.0) then 
             {
                 randf_buff[randf_ip]:=randf_buff[randf_ip]-1.0
             }
             else 
             {
                  skip 
             };
             if(randf_buff[randf_ip]<0.0) then 
             {
                 randf_buff[randf_ip]:=randf_buff[randf_ip]+1.0
             }
             else 
             {
                  skip 
             };
             randf_ip:=randf_ip+1
             
         };
         randf_ip:=24;
         randf_jp:=55-randf_ip;
         randf_kp:=0
         
     }
     else 
     {
          skip 
     };
     randf_i:=randf_kp;
     randf_xva:=randf_buff[randf_jp]+randf_buff[randf_ip];
     if(randf_xva>1.0) then 
     {
         randf_xva:=randf_xva-1.0
     }
     else 
     {
          skip 
     };
     randf_buff[randf_kp]:=randf_xva;
     randf_kp:=(randf_kp+1) % 55;
     randf_ip:=(randf_ip+1) % 55;
     randf_jp:=(randf_jp+1) % 55;
     return<==1 and RValue:=randf_buff[randf_i];
     skip
     )
     }; 
  function randg ( float RValue )
 {
     frame(randg_x1,randg_x2,randg_norm,randg_temp$_1,return) and ( 
     int return<==0 and skip;
     float randg_x1,randg_x2,randg_norm and skip;
     randg_norm:=2.0;
     while(randg_norm>1.0)
     {
         randg_x1:=2.0*randf(RValue)-1;
         randg_x2:=2.0*randf(RValue)-1;
         randg_norm:=randg_x1*randg_x1+randg_x2*randg_x2
     };
     if(randg_norm<1.e-9) then 
     {
         randg_norm:=1.e-9
     }
     else 
     {
          skip 
     };
     int randg_temp$_1 and skip;
     randg_temp$_1:=log(randg_norm);
     return<==1 and RValue:=randg_x1*sqrt(-2.0*randg_temp$_1/ randg_norm);
     skip
     )
     }; 
  function rand3 ( float *x,float *y,float *z )
 {
     frame(rand3_alpha,rand3_norm,rand3_x1,rand3_x2) and ( 
     float rand3_alpha,rand3_norm,rand3_x1,rand3_x2 and skip;
     rand3_norm:=2.0;
     while(rand3_norm>1.0)
     {
         rand3_x1:=2.0*randf(RValue)-1;
         rand3_x2:=2.0*randf(RValue)-1;
         rand3_norm:=rand3_x1*rand3_x1+rand3_x2*rand3_x2
     };
     * x:=rand3_x1;
     * y:=rand3_x2;
     rand3_norm:=sqrt(1.0-rand3_norm);
     * z:=rand3_norm;
     if(extern randf(RValue)<0.5) then 
     {
         * z:=-rand3_norm
     }
     else 
     {
          skip 
     }
     )
     }; 
      struct MMNODE {
     float xc,yc,zc and 
     float sqp and 
     float sa,xa,ya,za and 
     float q100,q010,q001 and 
     float q200,q020,q002,q110,q101,q011 and 
     float q300,q030,q003,q210,q201,q120,q021,q102,q012,q111 and 
     int first,last,innode 
 };
 struct MMATOM {
 ATOM *who and 
 int next$,which 
 };
 function mm_fv_update_nonbon ( float lambda,int RValue )
 {
     frame(mm_fv_update_nonbon_ok,mm_fv_update_nonbon_r,mm_fv_update_nonbon_r0,mm_fv_update_nonbon_xt,mm_fv_update_nonbon_yt,mm_fv_update_nonbon_zt,mm_fv_update_nonbon_xt2,mm_fv_update_nonbon_xt3,mm_fv_update_nonbon_xt4,mm_fv_update_nonbon_yt2,mm_fv_update_nonbon_yt3,mm_fv_update_nonbon_yt4,mm_fv_update_nonbon_zt2,mm_fv_update_nonbon_zt3,mm_fv_update_nonbon_zt4,mm_fv_update_nonbon_k,mm_fv_update_nonbon_k1,mm_fv_update_nonbon_k2,mm_fv_update_nonbon_k3,mm_fv_update_nonbon_k4,mm_fv_update_nonbon_k5,mm_fv_update_nonbon_ka2,mm_fv_update_nonbon_ka3,mm_fv_update_nonbon_kb2,mm_fv_update_nonbon_kb3,mm_fv_update_nonbon_c1,mm_fv_update_nonbon_c2,mm_fv_update_nonbon_c3,mm_fv_update_nonbon_c4,mm_fv_update_nonbon_c5,mm_fv_update_nonbon_inbond,mm_fv_update_nonbon_inangle,mm_fv_update_nonbon_i,mm_fv_update_nonbon_ap,mm_fv_update_nonbon_a1,mm_fv_update_nonbon_a2,mm_fv_update_nonbon_bonded,mm_fv_update_nonbon_angled,mm_fv_update_nonbon_ii,mm_fv_update_nonbon_j,mm_fv_update_nonbon_jj,mm_fv_update_nonbon_imax,mm_fv_update_nonbon_inclose,mm_fv_update_nonbon_vector,mm_fv_update_nonbon_close,mm_fv_update_nonbon_atomall,mm_fv_update_nonbon_mxdq,mm_fv_update_nonbon_dielectric,mm_fv_update_nonbon_mxcut,mm_fv_update_nonbon_mmbox,mm_fv_update_nonbon_xmax,mm_fv_update_nonbon_xmin,mm_fv_update_nonbon_ymax,mm_fv_update_nonbon_ymin,mm_fv_update_nonbon_zmax,mm_fv_update_nonbon_zmin,mm_fv_update_nonbon_nx,mm_fv_update_nonbon_ny,mm_fv_update_nonbon_nz,mm_fv_update_nonbon_ix,mm_fv_update_nonbon_iy,mm_fv_update_nonbon_iz,mm_fv_update_nonbon_inode,mm_fv_update_nonbon_naybor,mm_fv_update_nonbon_line,return,break$) and ( 
     int break$<==0 and skip;
     int return<==0 and skip;
     int mm_fv_update_nonbon_ok and skip;
     float mm_fv_update_nonbon_r,mm_fv_update_nonbon_r0,mm_fv_update_nonbon_xt,mm_fv_update_nonbon_yt,mm_fv_update_nonbon_zt and skip;
     float mm_fv_update_nonbon_xt2,mm_fv_update_nonbon_xt3,mm_fv_update_nonbon_xt4,mm_fv_update_nonbon_yt2,mm_fv_update_nonbon_yt3,mm_fv_update_nonbon_yt4,mm_fv_update_nonbon_zt2,mm_fv_update_nonbon_zt3,mm_fv_update_nonbon_zt4 and skip;
     float mm_fv_update_nonbon_k,mm_fv_update_nonbon_k1,mm_fv_update_nonbon_k2,mm_fv_update_nonbon_k3,mm_fv_update_nonbon_k4,mm_fv_update_nonbon_k5 and skip;
     float mm_fv_update_nonbon_ka2,mm_fv_update_nonbon_ka3 and skip;
     float mm_fv_update_nonbon_kb2,mm_fv_update_nonbon_kb3 and skip;
     float mm_fv_update_nonbon_c1,mm_fv_update_nonbon_c2,mm_fv_update_nonbon_c3,mm_fv_update_nonbon_c4,mm_fv_update_nonbon_c5 and skip;
     int mm_fv_update_nonbon_inbond,mm_fv_update_nonbon_inangle,mm_fv_update_nonbon_i and skip;
     ATOM *mm_fv_update_nonbon_ap,*mm_fv_update_nonbon_a1,*mm_fv_update_nonbon_a2,*mm_fv_update_nonbon_bonded[10],*mm_fv_update_nonbon_angled[10] and skip;
     int mm_fv_update_nonbon_ii,mm_fv_update_nonbon_j,mm_fv_update_nonbon_jj,mm_fv_update_nonbon_imax,mm_fv_update_nonbon_inclose and skip;
     float *mm_fv_update_nonbon_vector and skip;
     ATOM *mm_fv_update_nonbon_close[200],**mm_fv_update_nonbon_atomall and skip;
     float mm_fv_update_nonbon_mxdq,mm_fv_update_nonbon_dielectric,mm_fv_update_nonbon_mxcut and skip;
     float mm_fv_update_nonbon_mmbox and skip;
     float mm_fv_update_nonbon_xmax,mm_fv_update_nonbon_xmin,mm_fv_update_nonbon_ymax,mm_fv_update_nonbon_ymin,mm_fv_update_nonbon_zmax,mm_fv_update_nonbon_zmin and skip;
     int mm_fv_update_nonbon_nx,mm_fv_update_nonbon_ny,mm_fv_update_nonbon_nz and skip;
     int mm_fv_update_nonbon_ix,mm_fv_update_nonbon_iy,mm_fv_update_nonbon_iz,mm_fv_update_nonbon_inode and skip;
     int mm_fv_update_nonbon_naybor[27] and skip;
     char mm_fv_update_nonbon_line[80] and skip;
     MMNODE  * nodelist and skip;
     MMATOM  * atomlist and skip;
     mm_fv_update_nonbon_mmbox:=get_f_variable("mmbox",RValue);
     mm_fv_update_nonbon_mxcut:=get_f_variable("mxcut",RValue);
     if(mm_fv_update_nonbon_mxcut<0.0) then 
     {
         mm_fv_update_nonbon_mxcut:=5.0
     }
     else 
     {
          skip 
     };
     mm_fv_update_nonbon_dielectric:=get_f_variable("dielec",RValue);
     if(mm_fv_update_nonbon_dielectric<=0.0) then 
     {
         mm_fv_update_nonbon_dielectric:=1.0
     }
     else 
     {
          skip 
     };
     mm_fv_update_nonbon_dielectric:=332.17752/ mm_fv_update_nonbon_dielectric;
     mm_fv_update_nonbon_i:=a_number(RValue);
     mm_fv_update_nonbon_vector:=malloc(4*mm_fv_update_nonbon_i*sizeof(float));
     if(mm_fv_update_nonbon_vector=NULL) then 
     {
         aaerror("cannot allocate memory in mm_fv_update\n");
         return<==1 and RValue:=0;
         skip
         
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         mm_fv_update_nonbon_atomall:=malloc(mm_fv_update_nonbon_i*sizeof(ATOM *));
         if(mm_fv_update_nonbon_atomall=NULL) then 
         {
             aaerror("cannot allocate memory in mm_fv_update\n");
             return<==1 and RValue:=0;
             skip
             
         }
         else 
         {
              skip 
         };
         if(return=0)   then 
         {
             atomlist:=malloc(mm_fv_update_nonbon_i*sizeof(MMATOM));
             if(atomlist=NULL) then 
             {
                 aaerror("cannot allocate memory in mm_fv_update\n");
                 return<==1 and RValue:=0;
                 skip
                 
             }
             else 
             {
                  skip 
             };
             if(return=0)   then 
             {
                 mm_fv_update_nonbon_imax:=a_number(RValue);
                 mm_fv_update_nonbon_jj:=mm_fv_update_nonbon_imax;
                 mm_fv_update_nonbon_i:=0;
                 
                 while(mm_fv_update_nonbon_i<mm_fv_update_nonbon_imax)
                 {
                     mm_fv_update_nonbon_atomall[mm_fv_update_nonbon_i]:=a_next(mm_fv_update_nonbon_i,RValue);
                     atomlist[mm_fv_update_nonbon_i].who:=mm_fv_update_nonbon_atomall[mm_fv_update_nonbon_i];
                     mm_fv_update_nonbon_i:=mm_fv_update_nonbon_i+1
                     
                 };
                 mm_fv_update_nonbon_ii:=0;
                 
                 while(mm_fv_update_nonbon_ii<mm_fv_update_nonbon_imax)
                 {
                     mm_fv_update_nonbon_a1:=mm_fv_update_nonbon_atomall[mm_fv_update_nonbon_ii];
                     mm_fv_update_nonbon_j:=mm_fv_update_nonbon_ii*4;
                     mm_fv_update_nonbon_vector[mm_fv_update_nonbon_j]:=mm_fv_update_nonbon_a1->dx*lambda+mm_fv_update_nonbon_a1->x;
                     mm_fv_update_nonbon_vector[mm_fv_update_nonbon_j+1]:=mm_fv_update_nonbon_a1->dy*lambda+mm_fv_update_nonbon_a1->y;
                     mm_fv_update_nonbon_vector[mm_fv_update_nonbon_j+2]:=mm_fv_update_nonbon_a1->dz*lambda+mm_fv_update_nonbon_a1->z;
                     mm_fv_update_nonbon_ii:=mm_fv_update_nonbon_ii+1
                     
                 };
                 mm_fv_update_nonbon_xmax:=-10e10;
                 mm_fv_update_nonbon_ymax:=-10e10;
                 mm_fv_update_nonbon_zmax:=-10e10;
                 mm_fv_update_nonbon_xmin:=10e10;
                 mm_fv_update_nonbon_ymin:=10e10;
                 mm_fv_update_nonbon_zmin:=10e10;
                 mm_fv_update_nonbon_ii:=0;
                 
                 while(mm_fv_update_nonbon_ii<mm_fv_update_nonbon_imax)
                 {
                     mm_fv_update_nonbon_j:=mm_fv_update_nonbon_ii*4;
                     if(mm_fv_update_nonbon_xmax<mm_fv_update_nonbon_vector[mm_fv_update_nonbon_j]) then 
                     {
                         mm_fv_update_nonbon_xmax:=mm_fv_update_nonbon_vector[mm_fv_update_nonbon_j]
                     }
                     else 
                     {
                          skip 
                     };
                     if(mm_fv_update_nonbon_ymax<mm_fv_update_nonbon_vector[mm_fv_update_nonbon_j+1]) then 
                     {
                         mm_fv_update_nonbon_ymax:=mm_fv_update_nonbon_vector[mm_fv_update_nonbon_j+1]
                     }
                     else 
                     {
                          skip 
                     };
                     if(mm_fv_update_nonbon_zmax<mm_fv_update_nonbon_vector[mm_fv_update_nonbon_j+2]) then 
                     {
                         mm_fv_update_nonbon_zmax:=mm_fv_update_nonbon_vector[mm_fv_update_nonbon_j+2]
                     }
                     else 
                     {
                          skip 
                     };
                     if(mm_fv_update_nonbon_xmin>mm_fv_update_nonbon_vector[mm_fv_update_nonbon_j]) then 
                     {
                         mm_fv_update_nonbon_xmin:=mm_fv_update_nonbon_vector[mm_fv_update_nonbon_j]
                     }
                     else 
                     {
                          skip 
                     };
                     if(mm_fv_update_nonbon_ymin>mm_fv_update_nonbon_vector[mm_fv_update_nonbon_j+1]) then 
                     {
                         mm_fv_update_nonbon_ymin:=mm_fv_update_nonbon_vector[mm_fv_update_nonbon_j+1]
                     }
                     else 
                     {
                          skip 
                     };
                     if(mm_fv_update_nonbon_zmin>mm_fv_update_nonbon_vector[mm_fv_update_nonbon_j+2]) then 
                     {
                         mm_fv_update_nonbon_zmin:=mm_fv_update_nonbon_vector[mm_fv_update_nonbon_j+2]
                     }
                     else 
                     {
                          skip 
                     };
                     mm_fv_update_nonbon_ii:=mm_fv_update_nonbon_ii+1
                     
                 };
                 mm_fv_update_nonbon_nx:=(mm_fv_update_nonbon_xmax-mm_fv_update_nonbon_xmin)/ mm_fv_update_nonbon_mmbox+1;
                 mm_fv_update_nonbon_ny:=(mm_fv_update_nonbon_ymax-mm_fv_update_nonbon_ymin)/ mm_fv_update_nonbon_mmbox+1;
                 mm_fv_update_nonbon_nz:=(mm_fv_update_nonbon_zmax-mm_fv_update_nonbon_zmin)/ mm_fv_update_nonbon_mmbox+1;
                 nodelist:=malloc(mm_fv_update_nonbon_nx*mm_fv_update_nonbon_ny*mm_fv_update_nonbon_nz*sizeof(MMNODE));
                 if(nodelist=NULL) then 
                 {
                     aaerror("cannot allocate node memory in mm_fv_update (doubling grid )\n");
                     sprintf(mm_fv_update_nonbon_line,"mmbox %f nx %d ny %d nz %d ",mm_fv_update_nonbon_mmbox,mm_fv_update_nonbon_nx,mm_fv_update_nonbon_ny,mm_fv_update_nonbon_nz,RValue) and skip;
                     aaerror(mm_fv_update_nonbon_line);
                     sprintf(mm_fv_update_nonbon_line," xmin xmax %f %f ymin ymax %f %f zmin zmax %f %f",mm_fv_update_nonbon_xmin,mm_fv_update_nonbon_xmax,mm_fv_update_nonbon_ymin,mm_fv_update_nonbon_ymax,mm_fv_update_nonbon_zmin,mm_fv_update_nonbon_zmax,RValue) and skip;
                     aaerror(mm_fv_update_nonbon_line);
                     mm_fv_update_nonbon_mmbox:=mm_fv_update_nonbon_mmbox*2;
                     set_f_variable("mmbox",mm_fv_update_nonbon_mmbox,RValue);
                     mm_fv_update_nonbon_nx:=(mm_fv_update_nonbon_xmax-mm_fv_update_nonbon_xmin)/ mm_fv_update_nonbon_mmbox+1;
                     mm_fv_update_nonbon_ny:=(mm_fv_update_nonbon_ymax-mm_fv_update_nonbon_ymin)/ mm_fv_update_nonbon_mmbox+1;
                     mm_fv_update_nonbon_nz:=(mm_fv_update_nonbon_zmax-mm_fv_update_nonbon_zmin)/ mm_fv_update_nonbon_mmbox+1;
                     nodelist:=malloc(mm_fv_update_nonbon_nx*mm_fv_update_nonbon_ny*mm_fv_update_nonbon_nz*sizeof(MMNODE));
                     if(nodelist=NULL) then 
                     {
                         aaerror("cannot allocate node memory in mm_fv_update (cannot do it)\n");
                         return<==1 and RValue:=0;
                         skip
                         
                     }
                     else 
                     {
                          skip 
                     }
                     
                 }
                 else 
                 {
                      skip 
                 };
                 if(return=0)  then
                 {
                     mm_fv_update_nonbon_ix:=0;
                     
                     while(mm_fv_update_nonbon_ix<mm_fv_update_nonbon_nx)
                     {
                         mm_fv_update_nonbon_iy:=0;
                         
                         while(mm_fv_update_nonbon_iy<mm_fv_update_nonbon_ny)
                         {
                             mm_fv_update_nonbon_iz:=0;
                             
                             while(mm_fv_update_nonbon_iz<mm_fv_update_nonbon_nz)
                             {
                                 mm_fv_update_nonbon_inode:=((mm_fv_update_nonbon_iz*mm_fv_update_nonbon_ny)+mm_fv_update_nonbon_iy)*mm_fv_update_nonbon_nx+mm_fv_update_nonbon_ix;
                                 nodelist[mm_fv_update_nonbon_inode].xc:=mm_fv_update_nonbon_ix*mm_fv_update_nonbon_mmbox+0.5*mm_fv_update_nonbon_mmbox+mm_fv_update_nonbon_xmin;
                                 nodelist[mm_fv_update_nonbon_inode].yc:=mm_fv_update_nonbon_iy*mm_fv_update_nonbon_mmbox+0.5*mm_fv_update_nonbon_mmbox+mm_fv_update_nonbon_ymin;
                                 nodelist[mm_fv_update_nonbon_inode].zc:=mm_fv_update_nonbon_iz*mm_fv_update_nonbon_mmbox+0.5*mm_fv_update_nonbon_mmbox+mm_fv_update_nonbon_zmin;
                                 mm_fv_update_nonbon_iz:=mm_fv_update_nonbon_iz+1
                                 
                             };
                             mm_fv_update_nonbon_iy:=mm_fv_update_nonbon_iy+1
                             
                         };
                         mm_fv_update_nonbon_ix:=mm_fv_update_nonbon_ix+1
                         
                     };
                     mm_fv_update_nonbon_ii:=0;
                     
                     while(mm_fv_update_nonbon_ii<mm_fv_update_nonbon_nx*mm_fv_update_nonbon_ny*mm_fv_update_nonbon_nz)
                     {
                         nodelist[mm_fv_update_nonbon_ii].sqp:=0.0;
                         nodelist[mm_fv_update_nonbon_ii].sa:=0.0;
                         nodelist[mm_fv_update_nonbon_ii].xa:=0.0;
                         nodelist[mm_fv_update_nonbon_ii].ya:=0.0;
                         nodelist[mm_fv_update_nonbon_ii].za:=0.0;
                         nodelist[mm_fv_update_nonbon_ii].q100:=0.0;
                         nodelist[mm_fv_update_nonbon_ii].q010:=0.0;
                         nodelist[mm_fv_update_nonbon_ii].q001:=0.0;
                         nodelist[mm_fv_update_nonbon_ii].q200:=0.0;
                         nodelist[mm_fv_update_nonbon_ii].q020:=0.0;
                         nodelist[mm_fv_update_nonbon_ii].q002:=0.0;
                         nodelist[mm_fv_update_nonbon_ii].q101:=0.0;
                         nodelist[mm_fv_update_nonbon_ii].q110:=0.0;
                         nodelist[mm_fv_update_nonbon_ii].q011:=0.0;
                         nodelist[mm_fv_update_nonbon_ii].q300:=0.0;
                         nodelist[mm_fv_update_nonbon_ii].q030:=0.0;
                         nodelist[mm_fv_update_nonbon_ii].q003:=0.0;
                         nodelist[mm_fv_update_nonbon_ii].q210:=0.0;
                         nodelist[mm_fv_update_nonbon_ii].q120:=0.0;
                         nodelist[mm_fv_update_nonbon_ii].q201:=0.0;
                         nodelist[mm_fv_update_nonbon_ii].q102:=0.0;
                         nodelist[mm_fv_update_nonbon_ii].q021:=0.0;
                         nodelist[mm_fv_update_nonbon_ii].q012:=0.0;
                         nodelist[mm_fv_update_nonbon_ii].q111:=0.0;
                         nodelist[mm_fv_update_nonbon_ii].first:=-1;
                         nodelist[mm_fv_update_nonbon_ii].last:=-1;
                         nodelist[mm_fv_update_nonbon_ii].innode:=0;
                         mm_fv_update_nonbon_ii:=mm_fv_update_nonbon_ii+1
                         
                     };
                     mm_fv_update_nonbon_ii:=0;
                     
                     while(mm_fv_update_nonbon_ii<mm_fv_update_nonbon_imax)
                     {
                         mm_fv_update_nonbon_j:=mm_fv_update_nonbon_ii*4;
                         mm_fv_update_nonbon_ix:=(mm_fv_update_nonbon_vector[mm_fv_update_nonbon_j]-mm_fv_update_nonbon_xmin)/ mm_fv_update_nonbon_mmbox;
                         mm_fv_update_nonbon_iy:=(mm_fv_update_nonbon_vector[mm_fv_update_nonbon_j+1]-mm_fv_update_nonbon_ymin)/ mm_fv_update_nonbon_mmbox;
                         mm_fv_update_nonbon_iz:=(mm_fv_update_nonbon_vector[mm_fv_update_nonbon_j+2]-mm_fv_update_nonbon_zmin)/ mm_fv_update_nonbon_mmbox;
                         mm_fv_update_nonbon_inode:=((mm_fv_update_nonbon_iz*mm_fv_update_nonbon_ny)+mm_fv_update_nonbon_iy)*mm_fv_update_nonbon_nx+mm_fv_update_nonbon_ix;
                         atomlist[mm_fv_update_nonbon_ii].which:=mm_fv_update_nonbon_inode;
                         mm_fv_update_nonbon_ii:=mm_fv_update_nonbon_ii+1
                         
                     };
                     mm_fv_update_nonbon_inode:=0;
                     
                     while(mm_fv_update_nonbon_inode<mm_fv_update_nonbon_nx*mm_fv_update_nonbon_ny*mm_fv_update_nonbon_nz)
                     {
                         break$<==0 and skip;
                         mm_fv_update_nonbon_ii:=0;
                         
                         while( break$=0 AND  mm_fv_update_nonbon_ii<mm_fv_update_nonbon_imax)
                         {
                             if(atomlist[mm_fv_update_nonbon_ii].which=mm_fv_update_nonbon_inode) then 
                             {
                                 nodelist[mm_fv_update_nonbon_inode].first:=mm_fv_update_nonbon_ii;
                                 nodelist[mm_fv_update_nonbon_inode].last:=mm_fv_update_nonbon_ii;
                                 nodelist[mm_fv_update_nonbon_inode].innode:=nodelist[mm_fv_update_nonbon_inode].innode+1;
                                 mm_fv_update_nonbon_ap:=atomlist[mm_fv_update_nonbon_ii].who;
                                 break$<==1 and skip
                                  
                             }
                             else 
                             {
                                  skip 
                             };
                             if(break$=0)   then
                             {
                                 mm_fv_update_nonbon_ii:=mm_fv_update_nonbon_ii+1
                             }
                             else
                             {
                                 skip
                             }
                             
                         };
                         break$<==0 and skip;
                         if(mm_fv_update_nonbon_ii!=mm_fv_update_nonbon_imax) then 
                         {
                             mm_fv_update_nonbon_ii:=nodelist[mm_fv_update_nonbon_inode].first;
                             
                             while(mm_fv_update_nonbon_ii<mm_fv_update_nonbon_imax)
                             {
                                 if(atomlist[mm_fv_update_nonbon_ii].which=mm_fv_update_nonbon_inode) then 
                                 {
                                     atomlist[nodelist[mm_fv_update_nonbon_inode].last].next$:=mm_fv_update_nonbon_ii;
                                     nodelist[mm_fv_update_nonbon_inode].last:=mm_fv_update_nonbon_ii;
                                     nodelist[mm_fv_update_nonbon_inode].innode:=nodelist[mm_fv_update_nonbon_inode].innode+1;
                                     mm_fv_update_nonbon_ap:=atomlist[mm_fv_update_nonbon_ii].who;
                                     mm_fv_update_nonbon_xt:=mm_fv_update_nonbon_ap->x+lambda*mm_fv_update_nonbon_ap->dx-nodelist[mm_fv_update_nonbon_inode].xc;
                                     mm_fv_update_nonbon_yt:=mm_fv_update_nonbon_ap->y+lambda*mm_fv_update_nonbon_ap->dy-nodelist[mm_fv_update_nonbon_inode].yc;
                                     mm_fv_update_nonbon_zt:=mm_fv_update_nonbon_ap->z+lambda*mm_fv_update_nonbon_ap->dz-nodelist[mm_fv_update_nonbon_inode].zc;
                                     nodelist[mm_fv_update_nonbon_inode].sqp:=nodelist[mm_fv_update_nonbon_inode].sqp+mm_fv_update_nonbon_ap->q;
                                     nodelist[mm_fv_update_nonbon_inode].sa:=nodelist[mm_fv_update_nonbon_inode].sa+mm_fv_update_nonbon_ap->a;
                                     nodelist[mm_fv_update_nonbon_inode].xa:=nodelist[mm_fv_update_nonbon_inode].xa+mm_fv_update_nonbon_ap->a*mm_fv_update_nonbon_xt;
                                     nodelist[mm_fv_update_nonbon_inode].ya:=nodelist[mm_fv_update_nonbon_inode].ya+mm_fv_update_nonbon_ap->a*mm_fv_update_nonbon_yt;
                                     nodelist[mm_fv_update_nonbon_inode].za:=nodelist[mm_fv_update_nonbon_inode].za+mm_fv_update_nonbon_ap->a*mm_fv_update_nonbon_zt;
                                     mm_fv_update_nonbon_xt2:=mm_fv_update_nonbon_xt*mm_fv_update_nonbon_xt;
                                     mm_fv_update_nonbon_xt3:=mm_fv_update_nonbon_xt2*mm_fv_update_nonbon_xt;
                                     mm_fv_update_nonbon_xt4:=mm_fv_update_nonbon_xt3*mm_fv_update_nonbon_xt;
                                     mm_fv_update_nonbon_yt2:=mm_fv_update_nonbon_yt*mm_fv_update_nonbon_yt;
                                     mm_fv_update_nonbon_yt3:=mm_fv_update_nonbon_yt2*mm_fv_update_nonbon_yt;
                                     mm_fv_update_nonbon_yt4:=mm_fv_update_nonbon_yt3*mm_fv_update_nonbon_yt;
                                     mm_fv_update_nonbon_zt2:=mm_fv_update_nonbon_zt*mm_fv_update_nonbon_zt;
                                     mm_fv_update_nonbon_zt3:=mm_fv_update_nonbon_zt2*mm_fv_update_nonbon_zt;
                                     mm_fv_update_nonbon_zt4:=mm_fv_update_nonbon_zt3*mm_fv_update_nonbon_zt;
                                     nodelist[mm_fv_update_nonbon_inode].q100:=nodelist[mm_fv_update_nonbon_inode].q100+mm_fv_update_nonbon_ap->q*mm_fv_update_nonbon_xt;
                                     nodelist[mm_fv_update_nonbon_inode].q010:=nodelist[mm_fv_update_nonbon_inode].q010+mm_fv_update_nonbon_ap->q*mm_fv_update_nonbon_yt;
                                     nodelist[mm_fv_update_nonbon_inode].q001:=nodelist[mm_fv_update_nonbon_inode].q001+mm_fv_update_nonbon_ap->q*mm_fv_update_nonbon_zt;
                                     nodelist[mm_fv_update_nonbon_inode].q200:=nodelist[mm_fv_update_nonbon_inode].q200+mm_fv_update_nonbon_ap->q*mm_fv_update_nonbon_xt2;
                                     nodelist[mm_fv_update_nonbon_inode].q020:=nodelist[mm_fv_update_nonbon_inode].q020+mm_fv_update_nonbon_ap->q*mm_fv_update_nonbon_yt2;
                                     nodelist[mm_fv_update_nonbon_inode].q002:=nodelist[mm_fv_update_nonbon_inode].q002+mm_fv_update_nonbon_ap->q*mm_fv_update_nonbon_zt2;
                                     nodelist[mm_fv_update_nonbon_inode].q101:=nodelist[mm_fv_update_nonbon_inode].q101+mm_fv_update_nonbon_ap->q*mm_fv_update_nonbon_xt*mm_fv_update_nonbon_zt;
                                     nodelist[mm_fv_update_nonbon_inode].q110:=nodelist[mm_fv_update_nonbon_inode].q110+mm_fv_update_nonbon_ap->q*mm_fv_update_nonbon_xt*mm_fv_update_nonbon_yt;
                                     nodelist[mm_fv_update_nonbon_inode].q011:=nodelist[mm_fv_update_nonbon_inode].q011+mm_fv_update_nonbon_ap->q*mm_fv_update_nonbon_yt*mm_fv_update_nonbon_zt;
                                     nodelist[mm_fv_update_nonbon_inode].q300:=nodelist[mm_fv_update_nonbon_inode].q300+mm_fv_update_nonbon_ap->q*mm_fv_update_nonbon_xt3;
                                     nodelist[mm_fv_update_nonbon_inode].q030:=nodelist[mm_fv_update_nonbon_inode].q030+mm_fv_update_nonbon_ap->q*mm_fv_update_nonbon_yt3;
                                     nodelist[mm_fv_update_nonbon_inode].q003:=nodelist[mm_fv_update_nonbon_inode].q003+mm_fv_update_nonbon_ap->q*mm_fv_update_nonbon_zt3;
                                     nodelist[mm_fv_update_nonbon_inode].q210:=nodelist[mm_fv_update_nonbon_inode].q210+mm_fv_update_nonbon_ap->q*mm_fv_update_nonbon_xt2*mm_fv_update_nonbon_yt;
                                     nodelist[mm_fv_update_nonbon_inode].q120:=nodelist[mm_fv_update_nonbon_inode].q120+mm_fv_update_nonbon_ap->q*mm_fv_update_nonbon_xt*mm_fv_update_nonbon_yt2;
                                     nodelist[mm_fv_update_nonbon_inode].q201:=nodelist[mm_fv_update_nonbon_inode].q201+mm_fv_update_nonbon_ap->q*mm_fv_update_nonbon_xt2*mm_fv_update_nonbon_zt;
                                     nodelist[mm_fv_update_nonbon_inode].q102:=nodelist[mm_fv_update_nonbon_inode].q102+mm_fv_update_nonbon_ap->q*mm_fv_update_nonbon_xt*mm_fv_update_nonbon_zt2;
                                     nodelist[mm_fv_update_nonbon_inode].q021:=nodelist[mm_fv_update_nonbon_inode].q021+mm_fv_update_nonbon_ap->q*mm_fv_update_nonbon_yt2*mm_fv_update_nonbon_zt;
                                     nodelist[mm_fv_update_nonbon_inode].q012:=nodelist[mm_fv_update_nonbon_inode].q012+mm_fv_update_nonbon_ap->q*mm_fv_update_nonbon_yt*mm_fv_update_nonbon_zt2;
                                     nodelist[mm_fv_update_nonbon_inode].q111:=nodelist[mm_fv_update_nonbon_inode].q111+mm_fv_update_nonbon_ap->q*mm_fv_update_nonbon_xt*mm_fv_update_nonbon_yt*mm_fv_update_nonbon_zt
                                     
                                 }
                                 else 
                                 {
                                      skip 
                                 };
                                 mm_fv_update_nonbon_ii:=mm_fv_update_nonbon_ii+1
                                 
                             }
                             
                         }
                         else 
                         {
                              skip 
                         };
                         mm_fv_update_nonbon_inode:=mm_fv_update_nonbon_inode+1
                         
                     };
                     mm_fv_update_nonbon_k:=mm_fv_update_nonbon_dielectric*0.5;
                     mm_fv_update_nonbon_xt:=0.5/ 3.0;
                     mm_fv_update_nonbon_yt:=mm_fv_update_nonbon_xt/ 4.0;
                     mm_fv_update_nonbon_zt:=mm_fv_update_nonbon_yt/ 5.0;
                     mm_fv_update_nonbon_ii:=0;
                     
                     while(mm_fv_update_nonbon_ii<mm_fv_update_nonbon_nx*mm_fv_update_nonbon_ny*mm_fv_update_nonbon_nz)
                     {
                         nodelist[mm_fv_update_nonbon_ii].sqp:=nodelist[mm_fv_update_nonbon_ii].sqp*mm_fv_update_nonbon_k;
                         nodelist[mm_fv_update_nonbon_ii].q100:=nodelist[mm_fv_update_nonbon_ii].q100*mm_fv_update_nonbon_k;
                         nodelist[mm_fv_update_nonbon_ii].q010:=nodelist[mm_fv_update_nonbon_ii].q010*mm_fv_update_nonbon_k;
                         nodelist[mm_fv_update_nonbon_ii].q001:=nodelist[mm_fv_update_nonbon_ii].q001*mm_fv_update_nonbon_k;
                         nodelist[mm_fv_update_nonbon_ii].q200:=nodelist[mm_fv_update_nonbon_ii].q200*0.5*mm_fv_update_nonbon_k;
                         nodelist[mm_fv_update_nonbon_ii].q020:=nodelist[mm_fv_update_nonbon_ii].q020*0.5*mm_fv_update_nonbon_k;
                         nodelist[mm_fv_update_nonbon_ii].q002:=nodelist[mm_fv_update_nonbon_ii].q002*0.5*mm_fv_update_nonbon_k;
                         nodelist[mm_fv_update_nonbon_ii].q101:=nodelist[mm_fv_update_nonbon_ii].q101*mm_fv_update_nonbon_k;
                         nodelist[mm_fv_update_nonbon_ii].q110:=nodelist[mm_fv_update_nonbon_ii].q110*mm_fv_update_nonbon_k;
                         nodelist[mm_fv_update_nonbon_ii].q011:=nodelist[mm_fv_update_nonbon_ii].q011*mm_fv_update_nonbon_k;
                         nodelist[mm_fv_update_nonbon_ii].q300:=nodelist[mm_fv_update_nonbon_ii].q300*mm_fv_update_nonbon_xt*mm_fv_update_nonbon_k;
                         nodelist[mm_fv_update_nonbon_ii].q030:=nodelist[mm_fv_update_nonbon_ii].q030*mm_fv_update_nonbon_xt*mm_fv_update_nonbon_k;
                         nodelist[mm_fv_update_nonbon_ii].q003:=nodelist[mm_fv_update_nonbon_ii].q003*mm_fv_update_nonbon_xt*mm_fv_update_nonbon_k;
                         nodelist[mm_fv_update_nonbon_ii].q210:=nodelist[mm_fv_update_nonbon_ii].q210*0.5*mm_fv_update_nonbon_k;
                         nodelist[mm_fv_update_nonbon_ii].q120:=nodelist[mm_fv_update_nonbon_ii].q120*0.5*mm_fv_update_nonbon_k;
                         nodelist[mm_fv_update_nonbon_ii].q201:=nodelist[mm_fv_update_nonbon_ii].q201*0.5*mm_fv_update_nonbon_k;
                         nodelist[mm_fv_update_nonbon_ii].q102:=nodelist[mm_fv_update_nonbon_ii].q102*0.5*mm_fv_update_nonbon_k;
                         nodelist[mm_fv_update_nonbon_ii].q021:=nodelist[mm_fv_update_nonbon_ii].q021*0.5*mm_fv_update_nonbon_k;
                         nodelist[mm_fv_update_nonbon_ii].q012:=nodelist[mm_fv_update_nonbon_ii].q012*0.5*mm_fv_update_nonbon_k;
                         nodelist[mm_fv_update_nonbon_ii].q111:=nodelist[mm_fv_update_nonbon_ii].q111*mm_fv_update_nonbon_k;
                         if(nodelist[mm_fv_update_nonbon_ii].sa!=0.0) then 
                         {
                             nodelist[mm_fv_update_nonbon_ii].xa:=nodelist[mm_fv_update_nonbon_ii].xa/ nodelist[mm_fv_update_nonbon_ii].sa;
                             nodelist[mm_fv_update_nonbon_ii].ya:=nodelist[mm_fv_update_nonbon_ii].ya/ nodelist[mm_fv_update_nonbon_ii].sa;
                             nodelist[mm_fv_update_nonbon_ii].za:=nodelist[mm_fv_update_nonbon_ii].za/ nodelist[mm_fv_update_nonbon_ii].sa
                             
                         }
                         else 
                         {
                              skip 
                         };
                         nodelist[mm_fv_update_nonbon_ii].xa:=nodelist[mm_fv_update_nonbon_ii].xa+nodelist[mm_fv_update_nonbon_ii].xc;
                         nodelist[mm_fv_update_nonbon_ii].ya:=nodelist[mm_fv_update_nonbon_ii].ya+nodelist[mm_fv_update_nonbon_ii].yc;
                         nodelist[mm_fv_update_nonbon_ii].za:=nodelist[mm_fv_update_nonbon_ii].za+nodelist[mm_fv_update_nonbon_ii].zc;
                         nodelist[mm_fv_update_nonbon_ii].sa:=nodelist[mm_fv_update_nonbon_ii].sa*0.5;
                         mm_fv_update_nonbon_ii:=mm_fv_update_nonbon_ii+1
                         
                     };
                     mm_fv_update_nonbon_ii:=0;
                     
                     while(mm_fv_update_nonbon_ii<mm_fv_update_nonbon_jj)
                     {
                         mm_fv_update_nonbon_a1:=mm_fv_update_nonbon_atomall[mm_fv_update_nonbon_ii];
                         mm_fv_update_nonbon_a1->px:=mm_fv_update_nonbon_a1->x+lambda*mm_fv_update_nonbon_a1->dx;
                         mm_fv_update_nonbon_a1->py:=mm_fv_update_nonbon_a1->y+lambda*mm_fv_update_nonbon_a1->dy;
                         mm_fv_update_nonbon_a1->pz:=mm_fv_update_nonbon_a1->z+lambda*mm_fv_update_nonbon_a1->dz;
                         mm_fv_update_nonbon_a1->VP:=0.0;
                         mm_fv_update_nonbon_a1->dpx:=0.0;
                         mm_fv_update_nonbon_a1->dpy:=0.0;
                         mm_fv_update_nonbon_a1->dpz:=0.0;
                         mm_fv_update_nonbon_a1->qxx:=0.0;
                         mm_fv_update_nonbon_a1->qxy:=0.0;
                         mm_fv_update_nonbon_a1->qxz:=0.0;
                         mm_fv_update_nonbon_a1->qyy:=0.0;
                         mm_fv_update_nonbon_a1->qyz:=0.0;
                         mm_fv_update_nonbon_a1->qzz:=0.0;
                         mm_fv_update_nonbon_j:=0;
                         
                         while(mm_fv_update_nonbon_j<200)
                         {
                             mm_fv_update_nonbon_a1->close[mm_fv_update_nonbon_j]:=NULL;
                             mm_fv_update_nonbon_j:=mm_fv_update_nonbon_j+1
                             
                         };
                         mm_fv_update_nonbon_ii:=mm_fv_update_nonbon_ii+1
                         
                     };
                     mm_fv_update_nonbon_ii:=0;
                     
                     while(mm_fv_update_nonbon_ii<mm_fv_update_nonbon_jj)
                     {
                         mm_fv_update_nonbon_a1:=atomlist[mm_fv_update_nonbon_ii].who;
                         mm_fv_update_nonbon_inclose:=0;
                         mm_fv_update_nonbon_ix:=(mm_fv_update_nonbon_a1->px-mm_fv_update_nonbon_xmin)/ mm_fv_update_nonbon_mmbox;
                         mm_fv_update_nonbon_iy:=(mm_fv_update_nonbon_a1->py-mm_fv_update_nonbon_ymin)/ mm_fv_update_nonbon_mmbox;
                         mm_fv_update_nonbon_iz:=(mm_fv_update_nonbon_a1->pz-mm_fv_update_nonbon_zmin)/ mm_fv_update_nonbon_mmbox;
                         mm_fv_update_nonbon_naybor[0]:=((mm_fv_update_nonbon_iz*mm_fv_update_nonbon_ny)+mm_fv_update_nonbon_iy)*mm_fv_update_nonbon_nx+mm_fv_update_nonbon_ix;
                         mm_fv_update_nonbon_naybor[1]:=((mm_fv_update_nonbon_iz*mm_fv_update_nonbon_ny)+mm_fv_update_nonbon_iy)*mm_fv_update_nonbon_nx+mm_fv_update_nonbon_ix+1;
                         mm_fv_update_nonbon_naybor[2]:=((mm_fv_update_nonbon_iz*mm_fv_update_nonbon_ny)+mm_fv_update_nonbon_iy)*mm_fv_update_nonbon_nx+mm_fv_update_nonbon_ix-1;
                         mm_fv_update_nonbon_naybor[3]:=((mm_fv_update_nonbon_iz*mm_fv_update_nonbon_ny)+mm_fv_update_nonbon_iy)*mm_fv_update_nonbon_nx+mm_fv_update_nonbon_nx+mm_fv_update_nonbon_ix;
                         mm_fv_update_nonbon_naybor[4]:=((mm_fv_update_nonbon_iz*mm_fv_update_nonbon_ny)+mm_fv_update_nonbon_iy)*mm_fv_update_nonbon_nx-mm_fv_update_nonbon_nx+mm_fv_update_nonbon_ix;
                         mm_fv_update_nonbon_naybor[5]:=((mm_fv_update_nonbon_iz*mm_fv_update_nonbon_ny)+mm_fv_update_nonbon_iy)*mm_fv_update_nonbon_nx+mm_fv_update_nonbon_nx+mm_fv_update_nonbon_ix+1;
                         mm_fv_update_nonbon_naybor[6]:=((mm_fv_update_nonbon_iz*mm_fv_update_nonbon_ny)+mm_fv_update_nonbon_iy)*mm_fv_update_nonbon_nx+mm_fv_update_nonbon_nx+mm_fv_update_nonbon_ix-1;
                         mm_fv_update_nonbon_naybor[7]:=((mm_fv_update_nonbon_iz*mm_fv_update_nonbon_ny)+mm_fv_update_nonbon_iy)*mm_fv_update_nonbon_nx-mm_fv_update_nonbon_nx+mm_fv_update_nonbon_ix+1;
                         mm_fv_update_nonbon_naybor[8]:=((mm_fv_update_nonbon_iz*mm_fv_update_nonbon_ny)+mm_fv_update_nonbon_iy)*mm_fv_update_nonbon_nx-mm_fv_update_nonbon_nx+mm_fv_update_nonbon_ix-1;
                         mm_fv_update_nonbon_naybor[9]:=((mm_fv_update_nonbon_iz*mm_fv_update_nonbon_ny)+mm_fv_update_nonbon_ny+mm_fv_update_nonbon_iy)*mm_fv_update_nonbon_nx+mm_fv_update_nonbon_ix;
                         mm_fv_update_nonbon_naybor[10]:=((mm_fv_update_nonbon_iz*mm_fv_update_nonbon_ny)+mm_fv_update_nonbon_ny+mm_fv_update_nonbon_iy)*mm_fv_update_nonbon_nx+mm_fv_update_nonbon_ix+1;
                         mm_fv_update_nonbon_naybor[11]:=((mm_fv_update_nonbon_iz*mm_fv_update_nonbon_ny)+mm_fv_update_nonbon_ny+mm_fv_update_nonbon_iy)*mm_fv_update_nonbon_nx+mm_fv_update_nonbon_ix-1;
                         mm_fv_update_nonbon_naybor[12]:=((mm_fv_update_nonbon_iz*mm_fv_update_nonbon_ny)+mm_fv_update_nonbon_ny+mm_fv_update_nonbon_iy)*mm_fv_update_nonbon_nx+mm_fv_update_nonbon_nx+mm_fv_update_nonbon_ix;
                         mm_fv_update_nonbon_naybor[13]:=((mm_fv_update_nonbon_iz*mm_fv_update_nonbon_ny)+mm_fv_update_nonbon_ny+mm_fv_update_nonbon_iy)*mm_fv_update_nonbon_nx-mm_fv_update_nonbon_nx+mm_fv_update_nonbon_ix;
                         mm_fv_update_nonbon_naybor[14]:=((mm_fv_update_nonbon_iz*mm_fv_update_nonbon_ny)+mm_fv_update_nonbon_ny+mm_fv_update_nonbon_iy)*mm_fv_update_nonbon_nx+mm_fv_update_nonbon_nx+mm_fv_update_nonbon_ix+1;
                         mm_fv_update_nonbon_naybor[15]:=((mm_fv_update_nonbon_iz*mm_fv_update_nonbon_ny)+mm_fv_update_nonbon_ny+mm_fv_update_nonbon_iy)*mm_fv_update_nonbon_nx+mm_fv_update_nonbon_nx+mm_fv_update_nonbon_ix-1;
                         mm_fv_update_nonbon_naybor[16]:=((mm_fv_update_nonbon_iz*mm_fv_update_nonbon_ny)+mm_fv_update_nonbon_ny+mm_fv_update_nonbon_iy)*mm_fv_update_nonbon_nx-mm_fv_update_nonbon_nx+mm_fv_update_nonbon_ix+1;
                         mm_fv_update_nonbon_naybor[17]:=((mm_fv_update_nonbon_iz*mm_fv_update_nonbon_ny)+mm_fv_update_nonbon_ny+mm_fv_update_nonbon_iy)*mm_fv_update_nonbon_nx-mm_fv_update_nonbon_nx+mm_fv_update_nonbon_ix-1;
                         mm_fv_update_nonbon_naybor[18]:=((mm_fv_update_nonbon_iz*mm_fv_update_nonbon_ny)-mm_fv_update_nonbon_ny+mm_fv_update_nonbon_iy)*mm_fv_update_nonbon_nx+mm_fv_update_nonbon_ix;
                         mm_fv_update_nonbon_naybor[19]:=((mm_fv_update_nonbon_iz*mm_fv_update_nonbon_ny)-mm_fv_update_nonbon_ny+mm_fv_update_nonbon_iy)*mm_fv_update_nonbon_nx+mm_fv_update_nonbon_ix+1;
                         mm_fv_update_nonbon_naybor[20]:=((mm_fv_update_nonbon_iz*mm_fv_update_nonbon_ny)-mm_fv_update_nonbon_ny+mm_fv_update_nonbon_iy)*mm_fv_update_nonbon_nx+mm_fv_update_nonbon_ix-1;
                         mm_fv_update_nonbon_naybor[21]:=((mm_fv_update_nonbon_iz*mm_fv_update_nonbon_ny)-mm_fv_update_nonbon_ny+mm_fv_update_nonbon_iy)*mm_fv_update_nonbon_nx+mm_fv_update_nonbon_nx+mm_fv_update_nonbon_ix;
                         mm_fv_update_nonbon_naybor[22]:=((mm_fv_update_nonbon_iz*mm_fv_update_nonbon_ny)-mm_fv_update_nonbon_ny+mm_fv_update_nonbon_iy)*mm_fv_update_nonbon_nx-mm_fv_update_nonbon_nx+mm_fv_update_nonbon_ix;
                         mm_fv_update_nonbon_naybor[23]:=((mm_fv_update_nonbon_iz*mm_fv_update_nonbon_ny)-mm_fv_update_nonbon_ny+mm_fv_update_nonbon_iy)*mm_fv_update_nonbon_nx+mm_fv_update_nonbon_nx+mm_fv_update_nonbon_ix+1;
                         mm_fv_update_nonbon_naybor[24]:=((mm_fv_update_nonbon_iz*mm_fv_update_nonbon_ny)-mm_fv_update_nonbon_ny+mm_fv_update_nonbon_iy)*mm_fv_update_nonbon_nx+mm_fv_update_nonbon_nx+mm_fv_update_nonbon_ix-1;
                         mm_fv_update_nonbon_naybor[25]:=((mm_fv_update_nonbon_iz*mm_fv_update_nonbon_ny)-mm_fv_update_nonbon_ny+mm_fv_update_nonbon_iy)*mm_fv_update_nonbon_nx-mm_fv_update_nonbon_nx+mm_fv_update_nonbon_ix+1;
                         mm_fv_update_nonbon_naybor[26]:=((mm_fv_update_nonbon_iz*mm_fv_update_nonbon_ny)-mm_fv_update_nonbon_ny+mm_fv_update_nonbon_iy)*mm_fv_update_nonbon_nx-mm_fv_update_nonbon_nx+mm_fv_update_nonbon_ix-1;
                         mm_fv_update_nonbon_inode:=0;
                         
                         while(mm_fv_update_nonbon_inode<mm_fv_update_nonbon_nx*mm_fv_update_nonbon_ny*mm_fv_update_nonbon_nz)
                         {
                             break$<==0 and skip;
                             mm_fv_update_nonbon_j:=0;
                             
                             while( break$=0 AND  mm_fv_update_nonbon_j<27)
                             {
                                 if(mm_fv_update_nonbon_inode=mm_fv_update_nonbon_naybor[mm_fv_update_nonbon_j]) then 
                                 {
                                     break$<==1 and skip
                                  }
                                 else 
                                 {
                                      skip 
                                 };
                                 if(break$=0)   then
                                 {
                                     mm_fv_update_nonbon_j:=mm_fv_update_nonbon_j+1
                                 }
                                 else
                                 {
                                     skip
                                 }
                                 
                             };
                             break$<==0 and skip;
                             if(mm_fv_update_nonbon_j=27) then 
                             {
                                 if(nodelist[mm_fv_update_nonbon_inode].innode>0) then 
                                 {
                                     mm_fv_update_nonbon_xt:=nodelist[mm_fv_update_nonbon_inode].xc-mm_fv_update_nonbon_a1->px;
                                     mm_fv_update_nonbon_yt:=nodelist[mm_fv_update_nonbon_inode].yc-mm_fv_update_nonbon_a1->py;
                                     mm_fv_update_nonbon_zt:=nodelist[mm_fv_update_nonbon_inode].zc-mm_fv_update_nonbon_a1->pz;
                                     mm_fv_update_nonbon_r:=1/ (mm_fv_update_nonbon_xt*mm_fv_update_nonbon_xt+mm_fv_update_nonbon_yt*mm_fv_update_nonbon_yt+mm_fv_update_nonbon_zt*mm_fv_update_nonbon_zt);
                                     mm_fv_update_nonbon_r0:=sqrt(mm_fv_update_nonbon_r);
                                     mm_fv_update_nonbon_c1:=-mm_fv_update_nonbon_r*mm_fv_update_nonbon_r0;
                                     mm_fv_update_nonbon_c2:=-3*mm_fv_update_nonbon_c1*mm_fv_update_nonbon_r;
                                     mm_fv_update_nonbon_c3:=-5*mm_fv_update_nonbon_c2*mm_fv_update_nonbon_r;
                                     mm_fv_update_nonbon_c4:=-7*mm_fv_update_nonbon_c3*mm_fv_update_nonbon_r;
                                     mm_fv_update_nonbon_c5:=-9*mm_fv_update_nonbon_c4*mm_fv_update_nonbon_r;
                                     mm_fv_update_nonbon_xt2:=mm_fv_update_nonbon_xt*mm_fv_update_nonbon_xt;
                                     mm_fv_update_nonbon_xt3:=mm_fv_update_nonbon_xt2*mm_fv_update_nonbon_xt;
                                     mm_fv_update_nonbon_xt4:=mm_fv_update_nonbon_xt3*mm_fv_update_nonbon_xt;
                                     mm_fv_update_nonbon_yt2:=mm_fv_update_nonbon_yt*mm_fv_update_nonbon_yt;
                                     mm_fv_update_nonbon_yt3:=mm_fv_update_nonbon_yt2*mm_fv_update_nonbon_yt;
                                     mm_fv_update_nonbon_yt4:=mm_fv_update_nonbon_yt3*mm_fv_update_nonbon_yt;
                                     mm_fv_update_nonbon_zt2:=mm_fv_update_nonbon_zt*mm_fv_update_nonbon_zt;
                                     mm_fv_update_nonbon_zt3:=mm_fv_update_nonbon_zt2*mm_fv_update_nonbon_zt;
                                     mm_fv_update_nonbon_zt4:=mm_fv_update_nonbon_zt3*mm_fv_update_nonbon_zt;
                                     mm_fv_update_nonbon_a1->VP:=mm_fv_update_nonbon_a1->VP+nodelist[mm_fv_update_nonbon_inode].sqp*mm_fv_update_nonbon_a1->q*mm_fv_update_nonbon_r0;
                                     mm_fv_update_nonbon_k:=mm_fv_update_nonbon_c1*mm_fv_update_nonbon_a1->q*mm_fv_update_nonbon_xt;
                                     mm_fv_update_nonbon_a1->VP:=mm_fv_update_nonbon_a1->VP+mm_fv_update_nonbon_k*nodelist[mm_fv_update_nonbon_inode].q100;
                                     mm_fv_update_nonbon_a1->dpx:=mm_fv_update_nonbon_a1->dpx+mm_fv_update_nonbon_k*nodelist[mm_fv_update_nonbon_inode].sqp;
                                     mm_fv_update_nonbon_k:=mm_fv_update_nonbon_c1*mm_fv_update_nonbon_a1->q*mm_fv_update_nonbon_yt;
                                     mm_fv_update_nonbon_a1->VP:=mm_fv_update_nonbon_a1->VP+mm_fv_update_nonbon_k*nodelist[mm_fv_update_nonbon_inode].q010;
                                     mm_fv_update_nonbon_a1->dpy:=mm_fv_update_nonbon_a1->dpy+mm_fv_update_nonbon_k*nodelist[mm_fv_update_nonbon_inode].sqp;
                                     mm_fv_update_nonbon_k:=mm_fv_update_nonbon_c1*mm_fv_update_nonbon_a1->q*mm_fv_update_nonbon_zt;
                                     mm_fv_update_nonbon_a1->VP:=mm_fv_update_nonbon_a1->VP+mm_fv_update_nonbon_k*nodelist[mm_fv_update_nonbon_inode].q001;
                                     mm_fv_update_nonbon_a1->dpz:=mm_fv_update_nonbon_a1->dpz+mm_fv_update_nonbon_k*nodelist[mm_fv_update_nonbon_inode].sqp;
                                     mm_fv_update_nonbon_k:=(mm_fv_update_nonbon_c2*mm_fv_update_nonbon_xt2+mm_fv_update_nonbon_c1)*mm_fv_update_nonbon_a1->q;
                                     mm_fv_update_nonbon_a1->VP:=mm_fv_update_nonbon_a1->VP+mm_fv_update_nonbon_k*nodelist[mm_fv_update_nonbon_inode].q200;
                                     mm_fv_update_nonbon_a1->dpx:=mm_fv_update_nonbon_a1->dpx+mm_fv_update_nonbon_k*nodelist[mm_fv_update_nonbon_inode].q100;
                                     mm_fv_update_nonbon_a1->qxx:=mm_fv_update_nonbon_a1->qxx+mm_fv_update_nonbon_k*nodelist[mm_fv_update_nonbon_inode].sqp;
                                     mm_fv_update_nonbon_k:=(mm_fv_update_nonbon_c2*mm_fv_update_nonbon_yt2+mm_fv_update_nonbon_c1)*mm_fv_update_nonbon_a1->q;
                                     mm_fv_update_nonbon_a1->VP:=mm_fv_update_nonbon_a1->VP+mm_fv_update_nonbon_k*nodelist[mm_fv_update_nonbon_inode].q020;
                                     mm_fv_update_nonbon_a1->dpy:=mm_fv_update_nonbon_a1->dpy+mm_fv_update_nonbon_k*nodelist[mm_fv_update_nonbon_inode].q010;
                                     mm_fv_update_nonbon_a1->qyy:=mm_fv_update_nonbon_a1->qyy+mm_fv_update_nonbon_k*nodelist[mm_fv_update_nonbon_inode].sqp;
                                     mm_fv_update_nonbon_k:=(mm_fv_update_nonbon_c2*mm_fv_update_nonbon_zt2+mm_fv_update_nonbon_c1)*mm_fv_update_nonbon_a1->q;
                                     mm_fv_update_nonbon_a1->VP:=mm_fv_update_nonbon_a1->VP+mm_fv_update_nonbon_k*nodelist[mm_fv_update_nonbon_inode].q002;
                                     mm_fv_update_nonbon_a1->dpz:=mm_fv_update_nonbon_a1->dpz+mm_fv_update_nonbon_k*nodelist[mm_fv_update_nonbon_inode].q001;
                                     mm_fv_update_nonbon_a1->qzz:=mm_fv_update_nonbon_a1->qzz+mm_fv_update_nonbon_k*nodelist[mm_fv_update_nonbon_inode].sqp;
                                     mm_fv_update_nonbon_k:=mm_fv_update_nonbon_c2*mm_fv_update_nonbon_xt*mm_fv_update_nonbon_yt*mm_fv_update_nonbon_a1->q;
                                     mm_fv_update_nonbon_a1->VP:=mm_fv_update_nonbon_a1->VP+mm_fv_update_nonbon_k*nodelist[mm_fv_update_nonbon_inode].q110;
                                     mm_fv_update_nonbon_a1->dpx:=mm_fv_update_nonbon_a1->dpx+mm_fv_update_nonbon_k*nodelist[mm_fv_update_nonbon_inode].q010;
                                     mm_fv_update_nonbon_a1->dpy:=mm_fv_update_nonbon_a1->dpy+mm_fv_update_nonbon_k*nodelist[mm_fv_update_nonbon_inode].q100;
                                     mm_fv_update_nonbon_a1->qxy:=mm_fv_update_nonbon_a1->qxy+mm_fv_update_nonbon_k*nodelist[mm_fv_update_nonbon_inode].sqp;
                                     mm_fv_update_nonbon_k:=mm_fv_update_nonbon_c2*mm_fv_update_nonbon_xt*mm_fv_update_nonbon_zt*mm_fv_update_nonbon_a1->q;
                                     mm_fv_update_nonbon_a1->VP:=mm_fv_update_nonbon_a1->VP+mm_fv_update_nonbon_k*nodelist[mm_fv_update_nonbon_inode].q101;
                                     mm_fv_update_nonbon_a1->dpx:=mm_fv_update_nonbon_a1->dpx+mm_fv_update_nonbon_k*nodelist[mm_fv_update_nonbon_inode].q001;
                                     mm_fv_update_nonbon_a1->dpz:=mm_fv_update_nonbon_a1->dpz+mm_fv_update_nonbon_k*nodelist[mm_fv_update_nonbon_inode].q100;
                                     mm_fv_update_nonbon_a1->qxz:=mm_fv_update_nonbon_a1->qxz+mm_fv_update_nonbon_k*nodelist[mm_fv_update_nonbon_inode].sqp;
                                     mm_fv_update_nonbon_k:=mm_fv_update_nonbon_c2*mm_fv_update_nonbon_yt*mm_fv_update_nonbon_zt*mm_fv_update_nonbon_a1->q;
                                     mm_fv_update_nonbon_a1->VP:=mm_fv_update_nonbon_a1->VP+mm_fv_update_nonbon_k*nodelist[mm_fv_update_nonbon_inode].q011;
                                     mm_fv_update_nonbon_a1->dpy:=mm_fv_update_nonbon_a1->dpy+mm_fv_update_nonbon_k*nodelist[mm_fv_update_nonbon_inode].q001;
                                     mm_fv_update_nonbon_a1->dpz:=mm_fv_update_nonbon_a1->dpz+mm_fv_update_nonbon_k*nodelist[mm_fv_update_nonbon_inode].q010;
                                     mm_fv_update_nonbon_a1->qyz:=mm_fv_update_nonbon_a1->qyz+mm_fv_update_nonbon_k*nodelist[mm_fv_update_nonbon_inode].sqp;
                                     mm_fv_update_nonbon_k:=(mm_fv_update_nonbon_c3*mm_fv_update_nonbon_xt3+3*mm_fv_update_nonbon_c2*mm_fv_update_nonbon_xt)*mm_fv_update_nonbon_a1->q;
                                     mm_fv_update_nonbon_a1->VP:=mm_fv_update_nonbon_a1->VP+mm_fv_update_nonbon_k*nodelist[mm_fv_update_nonbon_inode].q300;
                                     mm_fv_update_nonbon_a1->dpx:=mm_fv_update_nonbon_a1->dpx+mm_fv_update_nonbon_k*nodelist[mm_fv_update_nonbon_inode].q200;
                                     mm_fv_update_nonbon_a1->qxx:=mm_fv_update_nonbon_a1->qxx+mm_fv_update_nonbon_k*nodelist[mm_fv_update_nonbon_inode].q100;
                                     mm_fv_update_nonbon_k:=(mm_fv_update_nonbon_c3*mm_fv_update_nonbon_yt3+3*mm_fv_update_nonbon_c2*mm_fv_update_nonbon_yt)*mm_fv_update_nonbon_a1->q;
                                     mm_fv_update_nonbon_a1->VP:=mm_fv_update_nonbon_a1->VP+mm_fv_update_nonbon_k*nodelist[mm_fv_update_nonbon_inode].q030;
                                     mm_fv_update_nonbon_a1->dpy:=mm_fv_update_nonbon_a1->dpy+mm_fv_update_nonbon_k*nodelist[mm_fv_update_nonbon_inode].q020;
                                     mm_fv_update_nonbon_a1->qyy:=mm_fv_update_nonbon_a1->qyy+mm_fv_update_nonbon_k*nodelist[mm_fv_update_nonbon_inode].q010;
                                     mm_fv_update_nonbon_k:=(mm_fv_update_nonbon_c3*mm_fv_update_nonbon_zt3+3*mm_fv_update_nonbon_c2*mm_fv_update_nonbon_zt)*mm_fv_update_nonbon_a1->q;
                                     mm_fv_update_nonbon_a1->VP:=mm_fv_update_nonbon_a1->VP+mm_fv_update_nonbon_k*nodelist[mm_fv_update_nonbon_inode].q003;
                                     mm_fv_update_nonbon_a1->dpz:=mm_fv_update_nonbon_a1->dpz+mm_fv_update_nonbon_k*nodelist[mm_fv_update_nonbon_inode].q002;
                                     mm_fv_update_nonbon_a1->qzz:=mm_fv_update_nonbon_a1->qzz+mm_fv_update_nonbon_k*nodelist[mm_fv_update_nonbon_inode].q001;
                                     mm_fv_update_nonbon_k:=(mm_fv_update_nonbon_c3*mm_fv_update_nonbon_xt2*mm_fv_update_nonbon_yt+mm_fv_update_nonbon_c2*mm_fv_update_nonbon_yt)*mm_fv_update_nonbon_a1->q;
                                     mm_fv_update_nonbon_a1->VP:=mm_fv_update_nonbon_a1->VP+mm_fv_update_nonbon_k*nodelist[mm_fv_update_nonbon_inode].q210;
                                     mm_fv_update_nonbon_a1->dpx:=mm_fv_update_nonbon_a1->dpx+mm_fv_update_nonbon_k*nodelist[mm_fv_update_nonbon_inode].q110;
                                     mm_fv_update_nonbon_a1->dpy:=mm_fv_update_nonbon_a1->dpy+mm_fv_update_nonbon_k*nodelist[mm_fv_update_nonbon_inode].q200;
                                     mm_fv_update_nonbon_a1->qxx:=mm_fv_update_nonbon_a1->qxx+mm_fv_update_nonbon_k*nodelist[mm_fv_update_nonbon_inode].q010;
                                     mm_fv_update_nonbon_a1->qxy:=mm_fv_update_nonbon_a1->qxy+mm_fv_update_nonbon_k*nodelist[mm_fv_update_nonbon_inode].q100;
                                     mm_fv_update_nonbon_k:=(mm_fv_update_nonbon_c3*mm_fv_update_nonbon_yt2*mm_fv_update_nonbon_xt+mm_fv_update_nonbon_c2*mm_fv_update_nonbon_xt)*mm_fv_update_nonbon_a1->q;
                                     mm_fv_update_nonbon_a1->VP:=mm_fv_update_nonbon_a1->VP+mm_fv_update_nonbon_k*nodelist[mm_fv_update_nonbon_inode].q120;
                                     mm_fv_update_nonbon_a1->dpx:=mm_fv_update_nonbon_a1->dpx+mm_fv_update_nonbon_k*nodelist[mm_fv_update_nonbon_inode].q020;
                                     mm_fv_update_nonbon_a1->dpy:=mm_fv_update_nonbon_a1->dpy+mm_fv_update_nonbon_k*nodelist[mm_fv_update_nonbon_inode].q110;
                                     mm_fv_update_nonbon_a1->qyy:=mm_fv_update_nonbon_a1->qyy+mm_fv_update_nonbon_k*nodelist[mm_fv_update_nonbon_inode].q100;
                                     mm_fv_update_nonbon_a1->qxy:=mm_fv_update_nonbon_a1->qxy+mm_fv_update_nonbon_k*nodelist[mm_fv_update_nonbon_inode].q010;
                                     mm_fv_update_nonbon_k:=(mm_fv_update_nonbon_c3*mm_fv_update_nonbon_xt2*mm_fv_update_nonbon_zt+mm_fv_update_nonbon_c2*mm_fv_update_nonbon_zt)*mm_fv_update_nonbon_a1->q;
                                     mm_fv_update_nonbon_a1->VP:=mm_fv_update_nonbon_a1->VP+mm_fv_update_nonbon_k*nodelist[mm_fv_update_nonbon_inode].q201;
                                     mm_fv_update_nonbon_a1->dpx:=mm_fv_update_nonbon_a1->dpx+mm_fv_update_nonbon_k*nodelist[mm_fv_update_nonbon_inode].q101;
                                     mm_fv_update_nonbon_a1->dpz:=mm_fv_update_nonbon_a1->dpz+mm_fv_update_nonbon_k*nodelist[mm_fv_update_nonbon_inode].q200;
                                     mm_fv_update_nonbon_a1->qxx:=mm_fv_update_nonbon_a1->qxx+mm_fv_update_nonbon_k*nodelist[mm_fv_update_nonbon_inode].q001;
                                     mm_fv_update_nonbon_a1->qxz:=mm_fv_update_nonbon_a1->qxz+mm_fv_update_nonbon_k*nodelist[mm_fv_update_nonbon_inode].q100;
                                     mm_fv_update_nonbon_k:=(mm_fv_update_nonbon_c3*mm_fv_update_nonbon_zt2*mm_fv_update_nonbon_xt+mm_fv_update_nonbon_c2*mm_fv_update_nonbon_xt)*mm_fv_update_nonbon_a1->q;
                                     mm_fv_update_nonbon_a1->VP:=mm_fv_update_nonbon_a1->VP+mm_fv_update_nonbon_k*nodelist[mm_fv_update_nonbon_inode].q102;
                                     mm_fv_update_nonbon_a1->dpx:=mm_fv_update_nonbon_a1->dpx+mm_fv_update_nonbon_k*nodelist[mm_fv_update_nonbon_inode].q002;
                                     mm_fv_update_nonbon_a1->dpz:=mm_fv_update_nonbon_a1->dpz+mm_fv_update_nonbon_k*nodelist[mm_fv_update_nonbon_inode].q101;
                                     mm_fv_update_nonbon_a1->qzz:=mm_fv_update_nonbon_a1->qzz+mm_fv_update_nonbon_k*nodelist[mm_fv_update_nonbon_inode].q100;
                                     mm_fv_update_nonbon_a1->qxz:=mm_fv_update_nonbon_a1->qxz+mm_fv_update_nonbon_k*nodelist[mm_fv_update_nonbon_inode].q001;
                                     mm_fv_update_nonbon_k:=(mm_fv_update_nonbon_c3*mm_fv_update_nonbon_yt2*mm_fv_update_nonbon_zt+mm_fv_update_nonbon_c2*mm_fv_update_nonbon_zt)*mm_fv_update_nonbon_a1->q;
                                     mm_fv_update_nonbon_a1->VP:=mm_fv_update_nonbon_a1->VP+mm_fv_update_nonbon_k*nodelist[mm_fv_update_nonbon_inode].q021;
                                     mm_fv_update_nonbon_a1->dpy:=mm_fv_update_nonbon_a1->dpy+mm_fv_update_nonbon_k*nodelist[mm_fv_update_nonbon_inode].q011;
                                     mm_fv_update_nonbon_a1->dpz:=mm_fv_update_nonbon_a1->dpz+mm_fv_update_nonbon_k*nodelist[mm_fv_update_nonbon_inode].q020;
                                     mm_fv_update_nonbon_a1->qyy:=mm_fv_update_nonbon_a1->qyy+mm_fv_update_nonbon_k*nodelist[mm_fv_update_nonbon_inode].q001;
                                     mm_fv_update_nonbon_a1->qyz:=mm_fv_update_nonbon_a1->qyz+mm_fv_update_nonbon_k*nodelist[mm_fv_update_nonbon_inode].q010;
                                     mm_fv_update_nonbon_k:=(mm_fv_update_nonbon_c3*mm_fv_update_nonbon_zt2*mm_fv_update_nonbon_yt+mm_fv_update_nonbon_c2*mm_fv_update_nonbon_yt)*mm_fv_update_nonbon_a1->q;
                                     mm_fv_update_nonbon_a1->VP:=mm_fv_update_nonbon_a1->VP+mm_fv_update_nonbon_k*nodelist[mm_fv_update_nonbon_inode].q012;
                                     mm_fv_update_nonbon_a1->dpy:=mm_fv_update_nonbon_a1->dpy+mm_fv_update_nonbon_k*nodelist[mm_fv_update_nonbon_inode].q002;
                                     mm_fv_update_nonbon_a1->dpz:=mm_fv_update_nonbon_a1->dpz+mm_fv_update_nonbon_k*nodelist[mm_fv_update_nonbon_inode].q011;
                                     mm_fv_update_nonbon_a1->qzz:=mm_fv_update_nonbon_a1->qzz+mm_fv_update_nonbon_k*nodelist[mm_fv_update_nonbon_inode].q010;
                                     mm_fv_update_nonbon_a1->qyz:=mm_fv_update_nonbon_a1->qyz+mm_fv_update_nonbon_k*nodelist[mm_fv_update_nonbon_inode].q001;
                                     mm_fv_update_nonbon_k:=(mm_fv_update_nonbon_c3*mm_fv_update_nonbon_zt*mm_fv_update_nonbon_yt*mm_fv_update_nonbon_xt)*mm_fv_update_nonbon_a1->q;
                                     mm_fv_update_nonbon_a1->VP:=mm_fv_update_nonbon_a1->VP+mm_fv_update_nonbon_k*nodelist[mm_fv_update_nonbon_inode].q111;
                                     mm_fv_update_nonbon_a1->dpx:=mm_fv_update_nonbon_a1->dpx+mm_fv_update_nonbon_k*nodelist[mm_fv_update_nonbon_inode].q011;
                                     mm_fv_update_nonbon_a1->dpy:=mm_fv_update_nonbon_a1->dpy+mm_fv_update_nonbon_k*nodelist[mm_fv_update_nonbon_inode].q101;
                                     mm_fv_update_nonbon_a1->dpz:=mm_fv_update_nonbon_a1->dpz+mm_fv_update_nonbon_k*nodelist[mm_fv_update_nonbon_inode].q110
                                     
                                 }
                                 else 
                                 {
                                      skip 
                                 }
                                 
                             }
                             else
                             {
                                 if(nodelist[mm_fv_update_nonbon_inode].innode>0) then 
                                 {
                                     mm_fv_update_nonbon_imax:=0;
                                     mm_fv_update_nonbon_i:=nodelist[mm_fv_update_nonbon_inode].first;
                                     if(nodelist[mm_fv_update_nonbon_inode].innode>0 AND (atomlist[mm_fv_update_nonbon_i].who)->serial>mm_fv_update_nonbon_a1->serial) then 
                                     {
                                         mm_fv_update_nonbon_atomall[mm_fv_update_nonbon_imax]:=atomlist[mm_fv_update_nonbon_i].who;
                                         mm_fv_update_nonbon_imax:=mm_fv_update_nonbon_imax+1
                                         
                                     }
                                     else 
                                     {
                                          skip 
                                     };
                                     mm_fv_update_nonbon_j:=1;
                                     
                                     while(mm_fv_update_nonbon_j<nodelist[mm_fv_update_nonbon_inode].innode-1)
                                     {
                                         mm_fv_update_nonbon_i:=atomlist[mm_fv_update_nonbon_i].next$;
                                         if((atomlist[mm_fv_update_nonbon_i].who)->serial>mm_fv_update_nonbon_a1->serial) then 
                                         {
                                             mm_fv_update_nonbon_atomall[mm_fv_update_nonbon_imax]:=atomlist[mm_fv_update_nonbon_i].who;
                                             mm_fv_update_nonbon_imax:=mm_fv_update_nonbon_imax+1
                                             
                                         }
                                         else 
                                         {
                                              skip 
                                         };
                                         mm_fv_update_nonbon_j:=mm_fv_update_nonbon_j+1
                                         
                                     };
                                     mm_fv_update_nonbon_i:=0;
                                     
                                     while(mm_fv_update_nonbon_i<mm_fv_update_nonbon_imax)
                                     {
                                         mm_fv_update_nonbon_a2:=mm_fv_update_nonbon_atomall[mm_fv_update_nonbon_i];
                                         mm_fv_update_nonbon_j:=mm_fv_update_nonbon_i*4;
                                         mm_fv_update_nonbon_vector[mm_fv_update_nonbon_j]:=mm_fv_update_nonbon_a2->px-mm_fv_update_nonbon_a1->px;
                                         mm_fv_update_nonbon_vector[mm_fv_update_nonbon_j+1]:=mm_fv_update_nonbon_a2->py-mm_fv_update_nonbon_a1->py;
                                         mm_fv_update_nonbon_vector[mm_fv_update_nonbon_j+2]:=mm_fv_update_nonbon_a2->pz-mm_fv_update_nonbon_a1->pz;
                                         mm_fv_update_nonbon_i:=mm_fv_update_nonbon_i+1
                                         
                                     };
                                     mm_fv_update_nonbon_i:=0;
                                     
                                     while(mm_fv_update_nonbon_i<mm_fv_update_nonbon_imax)
                                     {
                                         mm_fv_update_nonbon_j:=mm_fv_update_nonbon_i*4;
                                         mm_fv_update_nonbon_vector[mm_fv_update_nonbon_j+3]:=sqrt(mm_fv_update_nonbon_vector[mm_fv_update_nonbon_j]*mm_fv_update_nonbon_vector[mm_fv_update_nonbon_j]+mm_fv_update_nonbon_vector[mm_fv_update_nonbon_j+1]*mm_fv_update_nonbon_vector[mm_fv_update_nonbon_j+1]+mm_fv_update_nonbon_vector[mm_fv_update_nonbon_j+2]*mm_fv_update_nonbon_vector[mm_fv_update_nonbon_j+2]);
                                         mm_fv_update_nonbon_i:=mm_fv_update_nonbon_i+1
                                         
                                     };
                                     mm_fv_update_nonbon_i:=0;
                                     
                                     while(mm_fv_update_nonbon_i<mm_fv_update_nonbon_imax)
                                     {
                                         mm_fv_update_nonbon_a2:=mm_fv_update_nonbon_atomall[mm_fv_update_nonbon_i];
                                         mm_fv_update_nonbon_ok:=0;
                                         break$<==0 and skip;
                                         mm_fv_update_nonbon_j:=0;
                                         
                                         while( break$=0 AND  mm_fv_update_nonbon_j<mm_fv_update_nonbon_a1->dontuse)
                                         {
                                             if(mm_fv_update_nonbon_a2=mm_fv_update_nonbon_a1->excluded[mm_fv_update_nonbon_j]) then 
                                             {
                                                 mm_fv_update_nonbon_ok:=1;
                                                 break$<==1 and skip
                                                  
                                             }
                                             else 
                                             {
                                                  skip 
                                             };
                                             if(break$=0)   then
                                             {
                                                 mm_fv_update_nonbon_j:=mm_fv_update_nonbon_j+1
                                             }
                                             else
                                             {
                                                 skip
                                             }
                                             
                                         };
                                         break$<==0 and skip;
                                         if(mm_fv_update_nonbon_ok=0) then 
                                         {
                                             mm_fv_update_nonbon_j:=mm_fv_update_nonbon_i*4;
                                             if(mm_fv_update_nonbon_vector[mm_fv_update_nonbon_j+3]>mm_fv_update_nonbon_mxcut OR mm_fv_update_nonbon_inclose>200) then 
                                             {
                                                 mm_fv_update_nonbon_r0:=1/ mm_fv_update_nonbon_vector[mm_fv_update_nonbon_j+3];
                                                 mm_fv_update_nonbon_r:=mm_fv_update_nonbon_r0*mm_fv_update_nonbon_r0;
                                                 mm_fv_update_nonbon_r:=mm_fv_update_nonbon_r*mm_fv_update_nonbon_r*mm_fv_update_nonbon_r;
                                                 mm_fv_update_nonbon_xt:=mm_fv_update_nonbon_a1->q*mm_fv_update_nonbon_a2->q*mm_fv_update_nonbon_dielectric*mm_fv_update_nonbon_r0;
                                                 mm_fv_update_nonbon_yt:=mm_fv_update_nonbon_a1->a*mm_fv_update_nonbon_a2->a*mm_fv_update_nonbon_r;
                                                 mm_fv_update_nonbon_zt:=mm_fv_update_nonbon_a1->b*mm_fv_update_nonbon_a2->b*mm_fv_update_nonbon_r*mm_fv_update_nonbon_r;
                                                 mm_fv_update_nonbon_k:=mm_fv_update_nonbon_xt-mm_fv_update_nonbon_yt+mm_fv_update_nonbon_zt;
                                                 mm_fv_update_nonbon_xt:=mm_fv_update_nonbon_xt*mm_fv_update_nonbon_r0;
                                                 mm_fv_update_nonbon_yt:=mm_fv_update_nonbon_yt*mm_fv_update_nonbon_r0;
                                                 mm_fv_update_nonbon_zt:=mm_fv_update_nonbon_zt*mm_fv_update_nonbon_r0;
                                                 mm_fv_update_nonbon_k1:=mm_fv_update_nonbon_xt-mm_fv_update_nonbon_yt*6+mm_fv_update_nonbon_zt*12;
                                                 mm_fv_update_nonbon_xt:=mm_fv_update_nonbon_xt*mm_fv_update_nonbon_r0;
                                                 mm_fv_update_nonbon_yt:=mm_fv_update_nonbon_yt*mm_fv_update_nonbon_r0;
                                                 mm_fv_update_nonbon_zt:=mm_fv_update_nonbon_zt*mm_fv_update_nonbon_r0;
                                                 mm_fv_update_nonbon_k2:=mm_fv_update_nonbon_xt*3;
                                                 mm_fv_update_nonbon_ka2:=-mm_fv_update_nonbon_yt*6*8;
                                                 mm_fv_update_nonbon_kb2:=mm_fv_update_nonbon_zt*12*14;
                                                 mm_fv_update_nonbon_k1:=-mm_fv_update_nonbon_k1;
                                                 mm_fv_update_nonbon_xt:=mm_fv_update_nonbon_vector[mm_fv_update_nonbon_j]*mm_fv_update_nonbon_r0;
                                                 mm_fv_update_nonbon_yt:=mm_fv_update_nonbon_vector[mm_fv_update_nonbon_j+1]*mm_fv_update_nonbon_r0;
                                                 mm_fv_update_nonbon_zt:=mm_fv_update_nonbon_vector[mm_fv_update_nonbon_j+2]*mm_fv_update_nonbon_r0;
                                                 mm_fv_update_nonbon_a1->VP:=mm_fv_update_nonbon_a1->VP+mm_fv_update_nonbon_k;
                                                 mm_fv_update_nonbon_a2->dpx:=mm_fv_update_nonbon_a2->dpx-mm_fv_update_nonbon_k1*mm_fv_update_nonbon_xt;
                                                 mm_fv_update_nonbon_a1->dpx:=mm_fv_update_nonbon_a1->dpx+mm_fv_update_nonbon_k1*mm_fv_update_nonbon_xt;
                                                 mm_fv_update_nonbon_a2->dpy:=mm_fv_update_nonbon_a2->dpy-mm_fv_update_nonbon_k1*mm_fv_update_nonbon_yt;
                                                 mm_fv_update_nonbon_a1->dpy:=mm_fv_update_nonbon_a1->dpy+mm_fv_update_nonbon_k1*mm_fv_update_nonbon_yt;
                                                 mm_fv_update_nonbon_a2->dpz:=mm_fv_update_nonbon_a2->dpz-mm_fv_update_nonbon_k1*mm_fv_update_nonbon_zt;
                                                 mm_fv_update_nonbon_a1->dpz:=mm_fv_update_nonbon_a1->dpz+mm_fv_update_nonbon_k1*mm_fv_update_nonbon_zt;
                                                 mm_fv_update_nonbon_xt2:=mm_fv_update_nonbon_xt*mm_fv_update_nonbon_xt;
                                                 mm_fv_update_nonbon_yt2:=mm_fv_update_nonbon_yt*mm_fv_update_nonbon_yt;
                                                 mm_fv_update_nonbon_zt2:=mm_fv_update_nonbon_zt*mm_fv_update_nonbon_zt;
                                                 mm_fv_update_nonbon_a2->qxx:=mm_fv_update_nonbon_a2->qxx-mm_fv_update_nonbon_k2*(mm_fv_update_nonbon_xt2-1.0/ 3)+mm_fv_update_nonbon_ka2*(mm_fv_update_nonbon_xt2-1.0/ 8)+mm_fv_update_nonbon_kb2*(mm_fv_update_nonbon_xt2-1.0/ 14);
                                                 mm_fv_update_nonbon_a1->qxx:=mm_fv_update_nonbon_a1->qxx-mm_fv_update_nonbon_k2*(mm_fv_update_nonbon_xt2-1.0/ 3)+mm_fv_update_nonbon_ka2*(mm_fv_update_nonbon_xt2-1.0/ 8)+mm_fv_update_nonbon_kb2*(mm_fv_update_nonbon_xt2-1.0/ 14);
                                                 mm_fv_update_nonbon_a2->qxy:=mm_fv_update_nonbon_a2->qxy-(mm_fv_update_nonbon_k2+mm_fv_update_nonbon_ka2+mm_fv_update_nonbon_kb2)*mm_fv_update_nonbon_yt*mm_fv_update_nonbon_xt;
                                                 mm_fv_update_nonbon_a1->qxy:=mm_fv_update_nonbon_a1->qxy-(mm_fv_update_nonbon_k2+mm_fv_update_nonbon_ka2+mm_fv_update_nonbon_kb2)*mm_fv_update_nonbon_yt*mm_fv_update_nonbon_xt;
                                                 mm_fv_update_nonbon_a2->qxz:=mm_fv_update_nonbon_a2->qxz-(mm_fv_update_nonbon_k2+mm_fv_update_nonbon_ka2+mm_fv_update_nonbon_kb2)*mm_fv_update_nonbon_zt*mm_fv_update_nonbon_xt;
                                                 mm_fv_update_nonbon_a1->qxz:=mm_fv_update_nonbon_a1->qxz-(mm_fv_update_nonbon_k2+mm_fv_update_nonbon_ka2+mm_fv_update_nonbon_kb2)*mm_fv_update_nonbon_zt*mm_fv_update_nonbon_xt;
                                                 mm_fv_update_nonbon_a2->qyy:=mm_fv_update_nonbon_a2->qyy-mm_fv_update_nonbon_k2*(mm_fv_update_nonbon_yt2-1.0/ 3)+mm_fv_update_nonbon_ka2*(mm_fv_update_nonbon_yt2-1.0/ 8)+mm_fv_update_nonbon_kb2*(mm_fv_update_nonbon_yt2-1.0/ 14);
                                                 mm_fv_update_nonbon_a1->qyy:=mm_fv_update_nonbon_a1->qyy-mm_fv_update_nonbon_k2*(mm_fv_update_nonbon_yt2-1.0/ 3)+mm_fv_update_nonbon_ka2*(mm_fv_update_nonbon_yt2-1.0/ 8)+mm_fv_update_nonbon_kb2*(mm_fv_update_nonbon_yt2-1.0/ 14);
                                                 mm_fv_update_nonbon_a2->qyz:=mm_fv_update_nonbon_a2->qyz-(mm_fv_update_nonbon_k2+mm_fv_update_nonbon_ka2+mm_fv_update_nonbon_kb2)*mm_fv_update_nonbon_yt*mm_fv_update_nonbon_zt;
                                                 mm_fv_update_nonbon_a1->qyz:=mm_fv_update_nonbon_a1->qyz-(mm_fv_update_nonbon_k2+mm_fv_update_nonbon_ka2+mm_fv_update_nonbon_kb2)*mm_fv_update_nonbon_yt*mm_fv_update_nonbon_zt;
                                                 mm_fv_update_nonbon_a2->qzz:=mm_fv_update_nonbon_a2->qzz-mm_fv_update_nonbon_k2*(mm_fv_update_nonbon_zt2-1.0/ 3)+mm_fv_update_nonbon_ka2*(mm_fv_update_nonbon_zt2-1.0/ 8)+mm_fv_update_nonbon_kb2*(mm_fv_update_nonbon_zt2-1.0/ 14);
                                                 mm_fv_update_nonbon_a1->qzz:=mm_fv_update_nonbon_a1->qzz-mm_fv_update_nonbon_k2*(mm_fv_update_nonbon_zt2-1.0/ 3)+mm_fv_update_nonbon_ka2*(mm_fv_update_nonbon_zt2-1.0/ 8)+mm_fv_update_nonbon_kb2*(mm_fv_update_nonbon_zt2-1.0/ 14)
                                             }
                                             else
                                             {
                                                 mm_fv_update_nonbon_a1->close[mm_fv_update_nonbon_inclose]:=mm_fv_update_nonbon_atomall[mm_fv_update_nonbon_i];
                                                 mm_fv_update_nonbon_inclose:=mm_fv_update_nonbon_inclose+1;
                                                 if(mm_fv_update_nonbon_inclose=200) then 
                                                 {
                                                     aaerror(" fv_update_nonbon> too many atoms increase NCLOSE or decrease mxcut")
                                                     
                                                 }
                                                 else 
                                                 {
                                                      skip 
                                                 }
                                             }
                                             
                                         }
                                         else 
                                         {
                                              skip 
                                         };
                                         mm_fv_update_nonbon_j:=mm_fv_update_nonbon_j;
                                         mm_fv_update_nonbon_i:=mm_fv_update_nonbon_i+1
                                         
                                     }
                                     
                                 }
                                 else 
                                 {
                                      skip 
                                 }
                             };
                             mm_fv_update_nonbon_inode:=mm_fv_update_nonbon_inode+1
                             
                         };
                         mm_fv_update_nonbon_a1->px:=mm_fv_update_nonbon_a1->dx*lambda+mm_fv_update_nonbon_a1->x;
                         mm_fv_update_nonbon_a1->py:=mm_fv_update_nonbon_a1->dy*lambda+mm_fv_update_nonbon_a1->y;
                         mm_fv_update_nonbon_a1->pz:=mm_fv_update_nonbon_a1->dz*lambda+mm_fv_update_nonbon_a1->z;
                         mm_fv_update_nonbon_ii:=mm_fv_update_nonbon_ii+1
                         
                     };
                     a_inactive_f_zero();
                     free(atomlist) and skip;
                     free(nodelist) and skip;
                     free(mm_fv_update_nonbon_vector) and skip;
                     free(mm_fv_update_nonbon_atomall) and skip;
                     return<==1 and RValue:=1;
                     skip
                 }
                 else
                 {
                     skip
                 }
             }
             else
             {
                 skip
             }
         }
         else
         {
             skip
         }
     }
     else
     {
         skip
     }
     )
     }; 
      struct RESTRAIN {
     ATOM *atom1,*atom2 and 
     float length,k and 
     void *next$ 
 };
 RESTRAIN *restrain_first<==NULL and skip;
 RESTRAIN *restrain_last<==NULL and skip;
 function restrain ( int p1,int p2,float bl,float fk,int RValue )
 {
     frame(restrain_ap1,restrain_ap2,restrain_new,restrain_line,return,break$) and ( 
     int break$<==0 and skip;
     int return<==0 and skip;
     ATOM *restrain_ap1,*restrain_ap2 and skip;
     RESTRAIN *restrain_new and skip;
     char restrain_line[80] and skip;
     restrain_ap1:=a_m_serial(p1,RValue);
     restrain_ap2:=a_m_serial(p2,RValue);
     if((restrain_ap1=NULL) OR (restrain_ap2=NULL)) then 
     {
         sprintf(restrain_line,"undefined atom in restrain %d %d \0",p1,p2,RValue) and skip;
         aaerror(restrain_line);
         return<==1 and RValue:=0;
         skip
         
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         restrain_new:=restrain_first;
         if(restrain_new!=NULL) then 
         {
             break$<==0 and skip;
             while( return=0 AND   break$=0 AND 1)
             {
                 if(restrain_new=NULL) then 
                 {
                     break$<==1 and skip
                  }
                 else 
                 {
                      skip 
                 };
                 if(break$=0)   then
                 {
                     if((restrain_new->atom1=restrain_ap1 AND restrain_new->atom2=restrain_ap2) OR (restrain_new->atom1=restrain_ap2 AND restrain_new->atom2=restrain_ap1)) then 
                     {
                         restrain_new->length:=bl;
                         restrain_new->k:=fk;
                         return<==1 and RValue:=1;
                         skip
                         
                     }
                     else 
                     {
                          skip 
                     };
                     if(return=0)   then 
                     {
                         if(restrain_new=restrain_new->next$) then 
                         {
                             break$<==1 and skip
                          }
                         else 
                         {
                              skip 
                         };
                         if(break$=0)   then
                         {
                             restrain_new:=restrain_new->next$
                         }
                         else
                         {
                             skip
                         }
                     }
                     else
                     {
                         skip
                     }
                 }
                 else
                 {
                     skip
                 }
             };
             break$<==0 and skip
             
         }
         else 
         {
              skip 
         };
         if(return=0)  then
         {
             restrain_new:=malloc(sizeof(RESTRAIN)) ;
             if((restrain_new)=NULL) then 
             {
                 return<==1 and RValue:=0;
                 skip
                 
             }
             else 
             {
                  skip 
             };
             if(return=0)   then 
             {
                 if(restrain_first=NULL) then 
                 {
                     restrain_first:=restrain_new
                 }
                 else 
                 {
                      skip 
                 };
                 if(restrain_last=NULL) then 
                 {
                     restrain_last:=restrain_new
                 }
                 else 
                 {
                      skip 
                 };
                 restrain_new->atom1:=restrain_ap1;
                 restrain_new->atom2:=restrain_ap2;
                 restrain_new->length:=bl;
                 restrain_new->k:=fk;
                 restrain_new->next$:=restrain_new;
                 restrain_last->next$:=restrain_new;
                 restrain_last:=restrain_new;
                 return<==1 and RValue:=1;
                 skip
             }
             else
             {
                 skip
             }
         }
         else
         {
             skip
         }
     }
     else
     {
         skip
     }
     )
     }; 
  function v_restrain ( float *V,float lambda,int RValue )
 {
     frame(v_restrain_bp,v_restrain_r,v_restrain_xt,v_restrain_yt,v_restrain_zt,v_restrain_a1,v_restrain_a2,return) and ( 
     int return<==0 and skip;
     RESTRAIN *v_restrain_bp and skip;
     float v_restrain_r,v_restrain_xt,v_restrain_yt,v_restrain_zt and skip;
     ATOM *v_restrain_a1,*v_restrain_a2 and skip;
     v_restrain_bp:=restrain_first;
     if(v_restrain_bp=NULL) then 
     {
         return<==1 and RValue:=1;
         skip
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         while( return=0 AND  1)
         {
             if(v_restrain_bp=NULL) then 
             {
                 return<==1 and RValue:=0;
                 skip
             }
             else 
             {
                  skip 
             };
             if(return=0)   then 
             {
                 v_restrain_a1:=v_restrain_bp->atom1;
                 v_restrain_a2:=v_restrain_bp->atom2;
                 if(lambda=0.0) then 
                 {
                     v_restrain_r:=(v_restrain_a1->x-v_restrain_a2->x)*(v_restrain_a1->x-v_restrain_a2->x);
                     v_restrain_r:=v_restrain_r+(v_restrain_a1->y-v_restrain_a2->y)*(v_restrain_a1->y-v_restrain_a2->y);
                     v_restrain_r:=v_restrain_r+(v_restrain_a1->z-v_restrain_a2->z)*(v_restrain_a1->z-v_restrain_a2->z)
                     
                 }
                 else
                 {
                     v_restrain_xt:=(v_restrain_a1->x-v_restrain_a2->x+lambda*(v_restrain_a1->dx-v_restrain_a2->dx));
                     v_restrain_yt:=(v_restrain_a1->y-v_restrain_a2->y+lambda*(v_restrain_a1->dy-v_restrain_a2->dy));
                     v_restrain_zt:=(v_restrain_a1->z-v_restrain_a2->z+lambda*(v_restrain_a1->dz-v_restrain_a2->dz));
                     v_restrain_r:=v_restrain_xt*v_restrain_xt+v_restrain_yt*v_restrain_yt+v_restrain_zt*v_restrain_zt
                 };
                 v_restrain_r:=sqrt(v_restrain_r);
                 * V:=* V+v_restrain_bp->k*(v_restrain_r-v_restrain_bp->length)*(v_restrain_r-v_restrain_bp->length);
                 if(v_restrain_bp=v_restrain_bp->next$) then 
                 {
                     return<==1 and RValue:=1;
                     skip
                 }
                 else 
                 {
                      skip 
                 };
                 if(return=0)   then 
                 {
                     v_restrain_bp:=v_restrain_bp->next$
                 }
                 else
                 {
                     skip
                 }
             }
             else
             {
                 skip
             }
         }
     }
     else
     {
         skip
     }
     )
     }; 
  function f_restrain ( float lambda,int RValue )
 {
     frame(f_restrain_bp,f_restrain_r,f_restrain_k,f_restrain_ux,f_restrain_uy,f_restrain_uz,f_restrain_a1,f_restrain_a2,return) and ( 
     int return<==0 and skip;
     RESTRAIN *f_restrain_bp and skip;
     float f_restrain_r,f_restrain_k,f_restrain_ux,f_restrain_uy,f_restrain_uz and skip;
     ATOM *f_restrain_a1,*f_restrain_a2 and skip;
     f_restrain_bp:=restrain_first;
     if(f_restrain_bp=NULL) then 
     {
         return<==1 and RValue:=1;
         skip
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         while( return=0 AND  1)
         {
             if(f_restrain_bp=NULL) then 
             {
                 return<==1 and RValue:=0;
                 skip
             }
             else 
             {
                  skip 
             };
             if(return=0)   then 
             {
                 f_restrain_k:=f_restrain_bp->k;
                 f_restrain_a1:=f_restrain_bp->atom1;
                 f_restrain_a2:=f_restrain_bp->atom2;
                 if(lambda=0.0) then 
                 {
                     f_restrain_ux:=(f_restrain_a2->x-f_restrain_a1->x);
                     f_restrain_uy:=(f_restrain_a2->y-f_restrain_a1->y);
                     f_restrain_uz:=(f_restrain_a2->z-f_restrain_a1->z)
                     
                 }
                 else
                 {
                     f_restrain_ux:=(f_restrain_a2->x-f_restrain_a1->x+lambda*(f_restrain_a2->dx-f_restrain_a1->dx));
                     f_restrain_uy:=(f_restrain_a2->y-f_restrain_a1->y+lambda*(f_restrain_a2->dy-f_restrain_a1->dy));
                     f_restrain_uz:=(f_restrain_a2->z-f_restrain_a1->z+lambda*(f_restrain_a2->dz-f_restrain_a1->dz))
                 };
                 f_restrain_r:=f_restrain_ux*f_restrain_ux+f_restrain_uy*f_restrain_uy+f_restrain_uz*f_restrain_uz;
                 if(f_restrain_r<=1.e-5) then 
                 {
                     f_restrain_r:=0;
                     f_restrain_ux:=1.0;
                     f_restrain_uy:=0.0;
                     f_restrain_uz:=0.0
                     
                 }
                 else
                 {
                     f_restrain_r:=sqrt(f_restrain_r);
                     f_restrain_ux:=f_restrain_ux/ f_restrain_r;
                     f_restrain_uy:=f_restrain_uy/ f_restrain_r;
                     f_restrain_uz:=f_restrain_uz/ f_restrain_r
                 };
                 f_restrain_ux:=2*f_restrain_k*(f_restrain_r-f_restrain_bp->length)*f_restrain_ux;
                 f_restrain_uy:=2*f_restrain_k*(f_restrain_r-f_restrain_bp->length)*f_restrain_uy;
                 f_restrain_uz:=2*f_restrain_k*(f_restrain_r-f_restrain_bp->length)*f_restrain_uz;
                 f_restrain_a1->fx:=f_restrain_a1->fx+f_restrain_ux;
                 f_restrain_a1->fy:=f_restrain_a1->fy+f_restrain_uy;
                 f_restrain_a1->fz:=f_restrain_a1->fz+f_restrain_uz;
                 f_restrain_a2->fx:=f_restrain_a2->fx-f_restrain_ux;
                 f_restrain_a2->fy:=f_restrain_a2->fy-f_restrain_uy;
                 f_restrain_a2->fz:=f_restrain_a2->fz-f_restrain_uz;
                 if(f_restrain_bp=f_restrain_bp->next$) then 
                 {
                     return<==1 and RValue:=1;
                     skip
                 }
                 else 
                 {
                      skip 
                 };
                 if(return=0)   then 
                 {
                     f_restrain_bp:=f_restrain_bp->next$
                 }
                 else
                 {
                     skip
                 }
             }
             else
             {
                 skip
             }
         }
     }
     else
     {
         skip
     }
     )
     }; 
  function get_restrain ( ATOM *a1,ATOM **restrained,int mrestrain,int *inrestrain )
 {
     frame(get_restrain_mine,return) and ( 
     int return<==0 and skip;
     RESTRAIN *get_restrain_mine and skip;
     get_restrain_mine:=restrain_first;
     * inrestrain:=0;
     while( return=0 AND  1)
     {
         if((get_restrain_mine=NULL)) then 
         {
              return<==1 and skip
             
         }
         else 
         {
              skip 
         };
         if(return=0)   then 
         {
             if(get_restrain_mine->atom1=a1) then 
             {
                 restrained[(* inrestrain)]:=get_restrain_mine->atom2;
                 (* inrestrain):=(* inrestrain)+1
                 
             }
             else 
             {
                  skip 
             };
             if(get_restrain_mine->atom2=a1) then 
             {
                 restrained[(* inrestrain)]:=get_restrain_mine->atom1;
                 (* inrestrain):=(* inrestrain)+1
                 
             }
             else 
             {
                  skip 
             };
             if(get_restrain_mine=get_restrain_mine->next$) then 
             {
                  return<==1 and skip
             }
             else 
             {
                  skip 
             };
             if(return=0)   then 
             {
                 get_restrain_mine:=get_restrain_mine->next$;
                 if(* inrestrain=mrestrain) then 
                 {
                      return<==1 and skip
                 }
                 else 
                 {
                      skip 
                 }
             }
             else
             {
                 skip
             }
         }
         else
         {
             skip
         }
     }
     )
     }; 
  function dump_restrains ( FILE *where )
 {
     frame(dump_restrains_b,dump_restrains_a1,dump_restrains_a2,return) and ( 
     int return<==0 and skip;
     RESTRAIN *dump_restrains_b and skip;
     ATOM *dump_restrains_a1,*dump_restrains_a2 and skip;
     dump_restrains_b:=restrain_first;
     if(dump_restrains_b=NULL) then 
     {
          return<==1 and skip
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         while( return=0 AND  (dump_restrains_b->next$!=dump_restrains_b))
         {
             if(dump_restrains_b->next$=NULL) then 
             {
                  return<==1 and skip
             }
             else 
             {
                  skip 
             };
             if(return=0)   then 
             {
                 dump_restrains_a1:=dump_restrains_b->atom1;
                 dump_restrains_a2:=dump_restrains_b->atom2;
                 fprintf(where,"restrain %d %d %f %f ;\n",dump_restrains_a1->serial,dump_restrains_a2->serial,dump_restrains_b->length,dump_restrains_b->k,RValue) and skip;
                 dump_restrains_b:=dump_restrains_b->next$
             }
             else
             {
                 skip
             }
         };
         if(return=0)   then 
         {
             if(dump_restrains_b->next$=NULL) then 
             {
                  return<==1 and skip
             }
             else 
             {
                  skip 
             };
             if(return=0)   then 
             {
                 dump_restrains_a1:=dump_restrains_b->atom1;
                 dump_restrains_a2:=dump_restrains_b->atom2;
                 fprintf(where,"restrain %d %d %f %f ;\n",dump_restrains_a1->serial,dump_restrains_a2->serial,dump_restrains_b->length,dump_restrains_b->k,RValue) and skip
             }
             else
             {
                 skip
             }
         }
         else
         {
             skip
         }
     }
     else
     {
         skip
     }
     )
     }; 
  function a_restrain ( float *V,float lambda,int ilow,int ihigh,FILE *op,int RValue )
 {
     frame(a_restrain_bp,a_restrain_r,a_restrain_xt,a_restrain_yt,a_restrain_zt,a_restrain_a1,a_restrain_a2,return) and ( 
     int return<==0 and skip;
     RESTRAIN *a_restrain_bp and skip;
     float a_restrain_r,a_restrain_xt,a_restrain_yt,a_restrain_zt and skip;
     ATOM *a_restrain_a1,*a_restrain_a2 and skip;
     a_restrain_bp:=restrain_first;
     if(a_restrain_bp=NULL) then 
     {
         return<==1 and RValue:=1;
         skip
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         while( return=0 AND  1)
         {
             if(a_restrain_bp=NULL) then 
             {
                 return<==1 and RValue:=0;
                 skip
             }
             else 
             {
                  skip 
             };
             if(return=0)   then 
             {
                 a_restrain_a1:=a_restrain_bp->atom1;
                 a_restrain_a2:=a_restrain_bp->atom2;
                 if((a_restrain_a1->serial>=ilow AND a_restrain_a1->serial<=ihigh) OR (a_restrain_a2->serial>=ilow AND a_restrain_a2->serial<=ihigh)) then 
                 {
                     if(lambda=0.0) then 
                     {
                         a_restrain_r:=(a_restrain_a1->x-a_restrain_a2->x)*(a_restrain_a1->x-a_restrain_a2->x);
                         a_restrain_r:=a_restrain_r+(a_restrain_a1->y-a_restrain_a2->y)*(a_restrain_a1->y-a_restrain_a2->y);
                         a_restrain_r:=a_restrain_r+(a_restrain_a1->z-a_restrain_a2->z)*(a_restrain_a1->z-a_restrain_a2->z)
                         
                     }
                     else
                     {
                         a_restrain_xt:=(a_restrain_a1->x-a_restrain_a2->x+lambda*(a_restrain_a1->dx-a_restrain_a2->dx));
                         a_restrain_yt:=(a_restrain_a1->y-a_restrain_a2->y+lambda*(a_restrain_a1->dy-a_restrain_a2->dy));
                         a_restrain_zt:=(a_restrain_a1->z-a_restrain_a2->z+lambda*(a_restrain_a1->dz-a_restrain_a2->dz));
                         a_restrain_r:=a_restrain_xt*a_restrain_xt+a_restrain_yt*a_restrain_yt+a_restrain_zt*a_restrain_zt
                     };
                     a_restrain_r:=sqrt(a_restrain_r);
                     a_restrain_zt:=a_restrain_bp->k*(a_restrain_r-a_restrain_bp->length)*(a_restrain_r-a_restrain_bp->length);
                     * V:=* V+a_restrain_zt;
                     fprintf(op,"Restrain %d %d E %f value %f error %f\n",a_restrain_a1->serial,a_restrain_a2->serial,a_restrain_zt,a_restrain_r,a_restrain_r-a_restrain_bp->length,RValue) and skip
                     
                 }
                 else 
                 {
                      skip 
                 };
                 if(a_restrain_bp=a_restrain_bp->next$) then 
                 {
                     return<==1 and RValue:=1;
                     skip
                 }
                 else 
                 {
                      skip 
                 };
                 if(return=0)   then 
                 {
                     a_restrain_bp:=a_restrain_bp->next$
                 }
                 else
                 {
                     skip
                 }
             }
             else
             {
                 skip
             }
         }
     }
     else
     {
         skip
     }
     )
     }; 
  function significance ( FILE *op,int RValue )
 {
     frame(significance_ns,significance_na,significance_delta,significance_rmsd,return) and ( 
     int return<==0 and skip;
     int significance_ns,significance_na and skip;
     float significance_delta,significance_rmsd and skip;
     significance_ns:=get_i_variable("numstp",RValue);
     significance_na:=a_number(RValue);
     significance_delta:=get_f_variable("delta",RValue);
     significance_rmsd:=get_f_variable("rmsdev",RValue);
     if(significance_ns<=0) then 
     {
         fprintf(op," you are cheating, seti numstp <number of MD steps>\n",RValue) and skip
         
     }
     else 
     {
          skip 
     };
     if(significance_delta>20.0 OR significance_delta<-20.0) then 
     {
         fprintf(op," The drift in the total energy is too high\n",RValue) and skip;
         return<==1 and RValue:=0;
         skip
         
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         if(significance_ns<100 AND significance_rmsd>0.01) then 
         {
             fprintf(op," The RMSD is too high \n",RValue) and skip;
             return<==1 and RValue:=0;
             skip
             
         }
         else 
         {
              skip 
         };
         if(return=0)   then 
         {
             if(significance_ns<1000 AND significance_ns>99 AND significance_rmsd>0.1) then 
             {
                 fprintf(op," The RMSD is too high \n",RValue) and skip;
                 return<==1 and RValue:=0;
                 skip
                 
             }
             else 
             {
                  skip 
             };
             if(return=0)   then 
             {
                 if(significance_ns<10000 AND significance_ns>999 AND significance_rmsd>1.0) then 
                 {
                     fprintf(op," The RMSD is too high \n",RValue) and skip;
                     return<==1 and RValue:=0;
                     skip
                     
                 }
                 else 
                 {
                      skip 
                 };
                 if(return=0)   then 
                 {
                     fprintf(op," The run is ok\n",RValue) and skip;
                     return<==1 and RValue:=0;
                     skip
                 }
                 else
                 {
                     skip
                 }
             }
             else
             {
                 skip
             }
         }
         else
         {
             skip
         }
     }
     else
     {
         skip
     }
     )
     }; 
  function tailor_qab ( int who,float q,float a,float b )
 {
     frame(tailor_qab_ap,return) and ( 
     int return<==0 and skip;
     ATOM *tailor_qab_ap and skip;
     tailor_qab_ap:=a_m_serial(who,RValue);
     if(tailor_qab_ap=NULL) then 
     {
         aaerror(" undefined atom in tailor_qab");
          return<==1 and skip
         
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         tailor_qab_ap->q:=q;
         tailor_qab_ap->a:=a;
         tailor_qab_ap->b:=b;
          return<==1 and skip
     }
     else
     {
         skip
     }
     )
     }; 
  function tailor_include ( int from,int to )
 {
     frame(tailor_include_ap1,tailor_include_ap2,tailor_include_i,return,break$) and ( 
     int break$<==0 and skip;
     int return<==0 and skip;
     ATOM *tailor_include_ap1,*tailor_include_ap2 and skip;
     int tailor_include_i and skip;
     tailor_include_ap1:=a_m_serial(from,RValue);
     if(tailor_include_ap1=NULL) then 
     {
         aaerror(" undefined atom in tailor_include");
          return<==1 and skip
         
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         tailor_include_ap2:=a_m_serial(to,RValue);
         if(tailor_include_ap2=NULL) then 
         {
             aaerror(" undefined atom in tailor_include");
              return<==1 and skip
             
         }
         else 
         {
              skip 
         };
         if(return=0)   then 
         {
             break$<==0 and skip;
             tailor_include_i:=0;
             
             while( break$=0 AND  tailor_include_i<tailor_include_ap1->dontuse)
             {
                 if(tailor_include_ap1->excluded[tailor_include_i]=tailor_include_ap2) then 
                 {
                     break$<==1 and skip
                  }
                 else 
                 {
                      skip 
                 };
                 if(break$=0)   then
                 {
                     tailor_include_i:=tailor_include_i+1
                 }
                 else
                 {
                     skip
                 }
                 
             };
             break$<==0 and skip;
             if(tailor_include_i<tailor_include_ap1->dontuse-1) then 
             {
                 while(tailor_include_i<tailor_include_ap1->dontuse-1)
                 {
                     tailor_include_ap1->excluded[tailor_include_i]:=tailor_include_ap1->excluded[tailor_include_i+1];
                     tailor_include_ap1->exkind[tailor_include_i]:=tailor_include_ap1->exkind[tailor_include_i+1];
                     tailor_include_i:=tailor_include_i+1
                     
                 }
                 
             }
             else 
             {
                  skip 
             };
             tailor_include_ap1->exkind[(tailor_include_ap1->dontuse)]:=0;
             tailor_include_ap1->dontuse:=tailor_include_ap1->dontuse-1;
             break$<==0 and skip;
             tailor_include_i:=0;
             
             while( break$=0 AND  tailor_include_i<tailor_include_ap2->dontuse)
             {
                 if(tailor_include_ap2->excluded[tailor_include_i]=tailor_include_ap1) then 
                 {
                     break$<==1 and skip
                  }
                 else 
                 {
                      skip 
                 };
                 if(break$=0)   then
                 {
                     tailor_include_i:=tailor_include_i+1
                 }
                 else
                 {
                     skip
                 }
                 
             };
             break$<==0 and skip;
             if(tailor_include_i<tailor_include_ap2->dontuse-1) then 
             {
                 while(tailor_include_i<tailor_include_ap2->dontuse-1)
                 {
                     tailor_include_ap2->excluded[tailor_include_i]:=tailor_include_ap2->excluded[tailor_include_i+1];
                     tailor_include_ap2->exkind[tailor_include_i]:=tailor_include_ap2->exkind[tailor_include_i+1];
                     tailor_include_i:=tailor_include_i+1
                     
                 }
                 
             }
             else 
             {
                  skip 
             };
             tailor_include_ap2->exkind[(tailor_include_ap2->dontuse)]:=0;
             tailor_include_ap2->dontuse:=tailor_include_ap2->dontuse-1
         }
         else
         {
             skip
         }
     }
     else
     {
         skip
     }
     )
     }; 
  function tailor_exclude ( int from,int to )
 {
     frame(tailor_exclude_ok,tailor_exclude_ap1,tailor_exclude_ap2,tailor_exclude_i,return,break$) and ( 
     int break$<==0 and skip;
     int return<==0 and skip;
     int tailor_exclude_ok and skip;
     ATOM *tailor_exclude_ap1,*tailor_exclude_ap2 and skip;
     int tailor_exclude_i and skip;
     tailor_exclude_ap1:=a_m_serial(from,RValue);
     if(tailor_exclude_ap1=NULL) then 
     {
         aaerror(" undefined atom in tailor_exclude");
          return<==1 and skip
         
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         tailor_exclude_ap2:=a_m_serial(to,RValue);
         if(tailor_exclude_ap2=NULL) then 
         {
             aaerror(" undefined atom in tailor_exclude");
              return<==1 and skip
             
         }
         else 
         {
              skip 
         };
         if(return=0)   then 
         {
             if(tailor_exclude_ap1->dontuse=32) then 
             {
                 aaerror(" cannot add an atom to the exclude list ");
                  return<==1 and skip
                 
             }
             else 
             {
                  skip 
             };
             if(return=0)   then 
             {
                 tailor_exclude_ok:=0;
                 break$<==0 and skip;
                 tailor_exclude_i:=0;
                 
                 while( break$=0 AND  tailor_exclude_i<tailor_exclude_ap1->dontuse)
                 {
                     if(tailor_exclude_ap1->excluded[tailor_exclude_i]=tailor_exclude_ap2) then 
                     {
                         tailor_exclude_ok:=1;
                         break$<==1 and skip
                          
                     }
                     else 
                     {
                          skip 
                     };
                     if(break$=0)   then
                     {
                         tailor_exclude_i:=tailor_exclude_i+1
                     }
                     else
                     {
                         skip
                     }
                     
                 };
                 break$<==0 and skip;
                 tailor_exclude_ok:=0 ;
                 if(tailor_exclude_ok) then 
                 {
                     tailor_exclude_ap1->exkind[(tailor_exclude_ap1->dontuse)]:=1;
                     tailor_exclude_ap1->excluded[(tailor_exclude_ap1->dontuse)]:=tailor_exclude_ap2;
                     (tailor_exclude_ap1->dontuse):=(tailor_exclude_ap1->dontuse)+1
                     
                 }
                 else 
                 {
                      skip 
                 };
                 if(tailor_exclude_ap2->dontuse=32) then 
                 {
                     aaerror(" cannot add an atom to the exclude list ");
                      return<==1 and skip
                     
                 }
                 else 
                 {
                      skip 
                 };
                 if(return=0)   then 
                 {
                     tailor_exclude_i:=0;
                     
                     while( return=0 AND  tailor_exclude_i<tailor_exclude_ap2->dontuse)
                     {
                         if(tailor_exclude_ap2->excluded[tailor_exclude_i]=tailor_exclude_ap1) then 
                         {
                              return<==1 and skip
                         }
                         else 
                         {
                              skip 
                         };
                         if(return=0)   then 
                         {
                             tailor_exclude_i:=tailor_exclude_i+1
                         }
                         else
                         {
                             skip
                         }
                         
                     };
                     if(return=0)   then 
                     {
                         tailor_exclude_ap2->exkind[(tailor_exclude_ap2->dontuse)]:=1;
                         tailor_exclude_ap2->excluded[(tailor_exclude_ap2->dontuse)]:=tailor_exclude_ap1;
                         (tailor_exclude_ap2->dontuse):=(tailor_exclude_ap2->dontuse)+1;
                         tailor_exclude_i:=0;
                         tailor_exclude_i:=get_i_variable("numtail",RValue);
                         tailor_exclude_i:=tailor_exclude_i+1;
                         set_i_variable("numtail",tailor_exclude_i,RValue)
                     }
                     else
                     {
                         skip
                     }
                 }
                 else
                 {
                     skip
                 }
             }
             else
             {
                 skip
             }
         }
         else
         {
             skip
         }
     }
     else
     {
         skip
     }
     )
     }; 
      struct TETHER {
     ATOM *atom1 and 
     float k,x,y,z and 
     void *next$ 
 };
 TETHER *tether_first<==NULL and skip;
 TETHER *tether_last<==NULL and skip;
 function tether ( int p1,float fk,float x,float y,float z,int RValue )
 {
     frame(tether_ap1,tether_new,tether_line,return,break$) and ( 
     int break$<==0 and skip;
     int return<==0 and skip;
     ATOM *tether_ap1 and skip;
     TETHER *tether_new and skip;
     char tether_line[80] and skip;
     tether_ap1:=a_m_serial(p1,RValue);
     if((tether_ap1=NULL)) then 
     {
         sprintf(tether_line,"undefined atom in tether %d \0",p1,RValue) and skip;
         aaerror(tether_line);
         return<==1 and RValue:=0;
         skip
         
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         if(tether_first!=NULL) then 
         {
             tether_new:=tether_first;
             break$<==0 and skip;
             while( return=0 AND   break$=0 AND 1)
             {
                 if(tether_new->next$=NULL) then 
                 {
                     break$<==1 and skip
                  }
                 else 
                 {
                      skip 
                 };
                 if(break$=0)   then
                 {
                     if(tether_new->atom1=tether_ap1) then 
                     {
                         tether_new->k:=fk;
                         tether_new->x:=x;
                         tether_new->y:=y;
                         tether_new->z:=z;
                         return<==1 and RValue:=1;
                         skip
                         
                     }
                     else 
                     {
                          skip 
                     };
                     if(return=0)   then 
                     {
                         if(tether_new->next$=tether_new) then 
                         {
                             break$<==1 and skip
                          }
                         else 
                         {
                              skip 
                         };
                         if(break$=0)   then
                         {
                             tether_new:=tether_new->next$
                         }
                         else
                         {
                             skip
                         }
                     }
                     else
                     {
                         skip
                     }
                 }
                 else
                 {
                     skip
                 }
             };
             break$<==0 and skip
             
         }
         else 
         {
              skip 
         };
         if(return=0)  then
         {
             tether_new:=malloc(sizeof(TETHER)) ;
             if((tether_new)=NULL) then 
             {
				 return<==1 and RValue:=0;
                 skip
                 
             }
             else 
             {
                  skip 
             };
             if(return=0)   then 
             {
                 if(tether_first=NULL) then 
                 {
                     tether_first:=tether_new
                 }
                 else 
                 {
                      skip 
                 };
                 if(tether_last=NULL) then 
                 {
                     tether_last:=tether_new
                 }
                 else 
                 {
                      skip 
                 };
                 tether_new->atom1:=tether_ap1;
                 tether_new->k:=fk;
                 tether_new->x:=x;
                 tether_new->y:=y;
                 tether_new->z:=z;

				 
                 tether_new->next$:=tether_new;
                 tether_last->next$:=tether_new;
                 tether_last:=tether_new;
                 return<==1 and RValue:=1;
                 skip
             }
             else
             {
                 skip
             }
         }
         else
         {
             skip
         }
     }
     else
     {
         skip
     }
     )
     }; 
  function alltether ( float fk,int RValue )
 {
     frame(alltether_ap1,alltether_i,alltether_numatm,return) and ( 
     int return<==0 and skip;
     ATOM *alltether_ap1 and skip;
     int alltether_i,alltether_numatm and skip;
     alltether_numatm:=a_number(RValue);
     if(alltether_numatm<1) then 
     {
         return<==1 and RValue:=0;
         skip
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         alltether_i:=0;
         
         while( return=0 AND  alltether_i<alltether_numatm)
         {
             alltether_ap1:=a_next(alltether_i,RValue);
             if(fabs(alltether_ap1->x)>1.e-8) then 
             {
                 if(fabs(alltether_ap1->y)>1.e-8) then 
                 {
                     if(fabs(alltether_ap1->z)>1.e-8) then 
                     {
                         if(extern tether(alltether_ap1->serial,fk,alltether_ap1->x,alltether_ap1->y,alltether_ap1->z,RValue)) then 
                         {
						   skip
                         }
                         else
                         {
                             return<==1 and RValue:=0;
                             skip
                         }
                         
                     }
                     else 
                     {
                          skip 
                     }
                 }
                 else 
                 {
                      skip 
                 }
             }
             else 
             {
                  skip 
             };
             if(return=0)  then
             {
                 alltether_i:=alltether_i+1
             }
             else
             {
                 skip
             }
             
         };
         if(return=0)   then 
         {
             return<==1 and RValue:=alltether_numatm;
             skip
         }
         else
         {
             skip
         }
     }
     else
     {
         skip
     }
     )
     }; 
  function v_tether ( float *V,float lambda,int RValue )
 {
     frame(v_tether_bp,v_tether_r,v_tether_xt,v_tether_yt,v_tether_zt,v_tether_a1,return) and ( 
     int return<==0 and skip;
     TETHER *v_tether_bp and skip;
     float v_tether_r,v_tether_xt,v_tether_yt,v_tether_zt and skip;
     ATOM *v_tether_a1 and skip;
     v_tether_bp:=tether_first;
     if(v_tether_bp=NULL) then 
     {
         return<==1 and RValue:=1;
         skip
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         while( return=0 AND  1)
         {
             if(v_tether_bp=NULL) then 
             {
                 return<==1 and RValue:=0;
                 skip
             }
             else 
             {
                  skip 
             };
             if(return=0)   then 
             {
                 v_tether_a1:=v_tether_bp->atom1;
                 if(v_tether_a1->active) then 
                 {
                     if(lambda=0.0) then 
                     {
                         v_tether_r:=(v_tether_a1->x-v_tether_bp->x)*(v_tether_a1->x-v_tether_bp->x);
                         v_tether_r:=v_tether_r+(v_tether_a1->y-v_tether_bp->y)*(v_tether_a1->y-v_tether_bp->y);
                         v_tether_r:=v_tether_r+(v_tether_a1->z-v_tether_bp->z)*(v_tether_a1->z-v_tether_bp->z)
                         
                     }
                     else
                     {
                         v_tether_xt:=(v_tether_a1->x-v_tether_bp->x+lambda*(v_tether_a1->dx));
                         v_tether_yt:=(v_tether_a1->y-v_tether_bp->y+lambda*(v_tether_a1->dy));
                         v_tether_zt:=(v_tether_a1->z-v_tether_bp->z+lambda*(v_tether_a1->dz));
                         v_tether_r:=v_tether_xt*v_tether_xt+v_tether_yt*v_tether_yt+v_tether_zt*v_tether_zt
                     };
                     * V:=* V+v_tether_bp->k*v_tether_r
                     
                 }
                 else 
                 {
                      skip 
                 };
                 if(v_tether_bp=v_tether_bp->next$) then 
                 {
                     return<==1 and RValue:=1;
                     skip
                 }
                 else 
                 {
                      skip 
                 };
                 if(return=0)   then 
                 {
                     v_tether_bp:=v_tether_bp->next$
                 }
                 else
                 {
                     skip
                 }
             }
             else
             {
                 skip
             }
         }
     }
     else
     {
         skip
     }
     )
     }; 
  function f_tether ( float lambda,int RValue )
 {
     frame(f_tether_bp,f_tether_r,f_tether_k,f_tether_ux,f_tether_uy,f_tether_uz,f_tether_a1,return) and ( 
     int return<==0 and skip;
     TETHER *f_tether_bp and skip;
     float f_tether_r,f_tether_k,f_tether_ux,f_tether_uy,f_tether_uz and skip;
     ATOM *f_tether_a1 and skip;
     f_tether_bp:=tether_first;
     if(f_tether_bp=NULL) then 
     {
         return<==1 and RValue:=1;
         skip
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         while( return=0 AND  1)
         {
             if(f_tether_bp=NULL) then 
             {
                 return<==1 and RValue:=0;
                 skip
             }
             else 
             {
                  skip 
             };
             if(return=0)   then 
             {
                 f_tether_k:=f_tether_bp->k;
                 f_tether_a1:=f_tether_bp->atom1;
                 if(f_tether_a1->active) then 
                 {
                     if(lambda=0.0) then 
                     {
                         f_tether_ux:=(f_tether_a1->x-f_tether_bp->x);
                         f_tether_uy:=(f_tether_a1->y-f_tether_bp->y);
                         f_tether_uz:=(f_tether_a1->z-f_tether_bp->z)
                         
                     }
                     else
                     {
                         f_tether_ux:=(f_tether_a1->x-f_tether_bp->x+lambda*(f_tether_a1->dx));
                         f_tether_uy:=(f_tether_a1->y-f_tether_bp->y+lambda*(f_tether_a1->dy));
                         f_tether_uz:=(f_tether_a1->z-f_tether_bp->z+lambda*(f_tether_a1->dz))
                     };
                     f_tether_r:=f_tether_ux*f_tether_ux+f_tether_uy*f_tether_uy+f_tether_uz*f_tether_uz;
                     if(f_tether_r<=1.e-5) then 
                     {
                         if(f_tether_bp=f_tether_bp->next$) then 
                         {
                             return<==1 and RValue:=1;
                             skip
                         }
                         else 
                         {
                              skip 
                         };
                         if(return=0)   then 
                         {
                             f_tether_bp:=f_tether_bp->next$;
                             return<==1 and RValue:=0;
                             skip
                         }
                         else
                         {
                             skip
                         }
                     }
                     else
                     {
                         skip
                     }
                     
                 }
                 else
                 {
                     f_tether_r:=sqrt(f_tether_r);
                     f_tether_ux:=f_tether_ux/ f_tether_r;
                     f_tether_uy:=f_tether_uy/ f_tether_r;
                     f_tether_uz:=f_tether_uz/ f_tether_r
                 };
                 if(return=0)  then
                 {
                     if(return=0)  then
                     {
                         f_tether_ux:=2*f_tether_k*f_tether_r*f_tether_ux;
                         f_tether_uy:=2*f_tether_k*f_tether_r*f_tether_uy;
                         f_tether_uz:=2*f_tether_k*f_tether_r*f_tether_uz;
                         f_tether_a1->fx:=f_tether_a1->fx-f_tether_ux;
                         f_tether_a1->fy:=f_tether_a1->fy-f_tether_uy;
                         f_tether_a1->fz:=f_tether_a1->fz-f_tether_uz
                     }
                     else
                     {
                         skip
                     }
                 }
                 else
                 {
                     skip
                 }
                 
             }
             else 
             {
                  skip 
             };
             if(return=0)  then
             {
                 if(f_tether_bp=f_tether_bp->next$) then 
                 {
                     return<==1 and RValue:=1;
                     skip
                 }
                 else 
                 {
                      skip 
                 };
                 if(return=0)   then 
                 {
                     f_tether_bp:=f_tether_bp->next$
                 }
                 else
                 {
                     skip
                 }
             }
             else
             {
                 skip
             }
         }
     }
     else
     {
         skip
     }
     )
     }; 
  function dump_tethers ( FILE *where )
 {
     frame(dump_tethers_b,dump_tethers_a1,return) and ( 
     int return<==0 and skip;
     TETHER *dump_tethers_b and skip;
     ATOM *dump_tethers_a1 and skip;
     dump_tethers_b:=tether_first;
     if(dump_tethers_b=NULL) then 
     {
          return<==1 and skip
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         while( return=0 AND  (dump_tethers_b->next$!=dump_tethers_b))
         {
             if(dump_tethers_b->next$=NULL) then 
             {
                  return<==1 and skip
             }
             else 
             {
                  skip 
             };
             if(return=0)   then 
             {
                 dump_tethers_a1:=dump_tethers_b->atom1;
                 fprintf(where,"tether %d %f %f %f %f ;\n",dump_tethers_a1->serial,dump_tethers_b->k,dump_tethers_b->x,dump_tethers_b->y,dump_tethers_b->z,RValue) and skip;
                 dump_tethers_b:=dump_tethers_b->next$
             }
             else
             {
                 skip
             }
         };
         if(return=0)   then 
         {
             if(dump_tethers_b->next$=NULL) then 
             {
                  return<==1 and skip
             }
             else 
             {
                  skip 
             };
             if(return=0)   then 
             {
                 dump_tethers_a1:=dump_tethers_b->atom1;
                 fprintf(where,"tether %d %f %f %f %f ;\n",dump_tethers_a1->serial,dump_tethers_b->k,dump_tethers_b->x,dump_tethers_b->y,dump_tethers_b->z,RValue) and skip
             }
             else
             {
                 skip
             }
         }
         else
         {
             skip
         }
     }
     else
     {
         skip
     }
     )
     }; 
  function a_tether ( float *V,float lambda,int ilow,int ihigh,FILE *op,int RValue )
 {
     frame(a_tether_bp,a_tether_r,a_tether_xt,a_tether_yt,a_tether_zt,a_tether_rms,a_tether_rmax,a_tether_tried,a_tether_imax,a_tether_a1,a_tether_x,a_tether_y,a_tether_z,a_tether_xx,a_tether_yy,a_tether_zz,a_tether_matrix,a_tether_delta,a_tether_numatm,a_tether_3_5_temp$_1,a_tether_10_temp$_2,return,break$) and ( 
     int break$<==0 and skip;
     int return<==0 and skip;
     TETHER *a_tether_bp and skip;
     float a_tether_r,a_tether_xt,a_tether_yt,a_tether_zt and skip;
     float a_tether_rms,a_tether_rmax and skip;
     int a_tether_tried,a_tether_imax and skip;
     ATOM *a_tether_a1 and skip;
     float *a_tether_x,*a_tether_y,*a_tether_z,*a_tether_xx,*a_tether_yy,*a_tether_zz and skip;
     float a_tether_matrix[3,3],a_tether_delta[3] and skip;
     int a_tether_numatm and skip;
     a_tether_rms:=0.0;
     a_tether_rmax:=-1.0;
     a_tether_tried:=0;
     a_tether_bp:=tether_first;
     if(a_tether_bp=NULL) then 
     {
         return<==1 and RValue:=1;
         skip
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         a_tether_numatm:=a_number(RValue);
         a_tether_x:=malloc(a_tether_numatm*sizeof(float));
         a_tether_y:=malloc(a_tether_numatm*sizeof(float));
         a_tether_z:=malloc(a_tether_numatm*sizeof(float));
         a_tether_xx:=malloc(a_tether_numatm*sizeof(float));
         a_tether_yy:=malloc(a_tether_numatm*sizeof(float));
         a_tether_zz:=malloc(a_tether_numatm*sizeof(float));
         if(a_tether_x=NULL OR a_tether_y=NULL OR a_tether_z=NULL OR a_tether_xx=NULL OR a_tether_yy=NULL OR a_tether_zz=NULL) then 
         {
             aaerror("cannot allocate memory");
             return<==1 and RValue:=1;
             skip
             
         }
         else 
         {
              skip 
         };
         if(return=0)   then 
         {
             break$<==0 and skip;
             while( return=0 AND   break$=0 AND  1)
             {
                 if(a_tether_bp=NULL) then 
                 {
                     return<==1 and RValue:=0;
                     skip
                 }
                 else 
                 {
                      skip 
                 };
                 if(return=0)   then 
                 {
                     a_tether_a1:=a_tether_bp->atom1;
                     if(a_tether_a1->serial>=ilow AND a_tether_a1->serial<=ihigh) then 
                     {
                         if(lambda=0.0) then 
                         {
                             a_tether_r:=(a_tether_a1->x-a_tether_bp->x)*(a_tether_a1->x-a_tether_bp->x);
                             a_tether_r:=a_tether_r+(a_tether_a1->y-a_tether_bp->y)*(a_tether_a1->y-a_tether_bp->y);
                             a_tether_r:=a_tether_r+(a_tether_a1->z-a_tether_bp->z)*(a_tether_a1->z-a_tether_bp->z)
                             
							 //output(" ************" , a_tether_r, "**********") and skip
                         }
                         else
                         {
                             a_tether_xt:=(a_tether_a1->x-a_tether_bp->x+lambda*(a_tether_a1->dx));
                             a_tether_yt:=(a_tether_a1->y-a_tether_bp->y+lambda*(a_tether_a1->dy));
                             a_tether_zt:=(a_tether_a1->z-a_tether_bp->z+lambda*(a_tether_a1->dz));
                             a_tether_r:=a_tether_xt*a_tether_xt+a_tether_yt*a_tether_yt+a_tether_zt*a_tether_zt
                         };
                         a_tether_x[a_tether_tried]:=a_tether_a1->x+lambda*a_tether_a1->dx;
                         a_tether_y[a_tether_tried]:=a_tether_a1->y+lambda*a_tether_a1->dy;
                         a_tether_z[a_tether_tried]:=a_tether_a1->z+lambda*a_tether_a1->dz;
                         a_tether_xx[a_tether_tried]:=a_tether_bp->x;
                         a_tether_yy[a_tether_tried]:=a_tether_bp->y;
                         a_tether_zz[a_tether_tried]:=a_tether_bp->z;
                         a_tether_tried:=a_tether_tried+1;
                         a_tether_rms:=a_tether_rms+a_tether_r;
                         if(a_tether_r>a_tether_rmax) then 
                         {
                             a_tether_rmax:=a_tether_r;
                             a_tether_imax:=a_tether_a1->serial
                             
                         }
                         else 
                         {
                              skip 
                         };
                         a_tether_zt:=a_tether_bp->k*a_tether_r;
                         * V:=* V+a_tether_zt;
                         int a_tether_3_5_temp$_1 and skip;
                         a_tether_3_5_temp$_1:=sqrt(a_tether_r);
                         fprintf(op,"Tether %d E %f error %f\n",a_tether_a1->serial,a_tether_zt,a_tether_3_5_temp$_1,RValue) and skip
                         
                     }
                     else 
                     {
                          skip 
                     };
                     if(a_tether_bp=a_tether_bp->next$) then 
                     {
                         break$<==1 and skip
                      }
                     else 
                     {
                          skip 
                     };
                     if(break$=0)   then
                     {
                         a_tether_bp:=a_tether_bp->next$
                     }
                     else
                     {
                         skip
                     }
                 }
                 else
                 {
                     skip
                 }
             };
             break$<==0 and skip;
             if(return=0)   then 
             {
                 if(a_tether_tried>0) then 
                 {
				     
                     a_tether_rms:=sqrt(a_tether_rms/ a_tether_tried);

                     a_tether_rmax:=sqrt(a_tether_rmax);
                     //fprintf(op," RMSD %f Maximum Deviation %f \n",a_tether_rms,a_tether_rmax,RValue) and skip;
					 output(" RMSD ",a_tether_rms," Maximum Deviation ",a_tether_rmax," \n") and skip;
                     int a_tether_10_temp$_2 and skip;
                     a_tether_10_temp$_2:=bstrot(&a_tether_x[0],&a_tether_y[0],&a_tether_z[0],&a_tether_xx[0],&a_tether_yy[0],&a_tether_zz[0],a_tether_tried,a_tether_matrix,a_tether_delta,RValue);
                     //fprintf(op," RMSD after superposition %f\n",a_tether_10_temp$_2,RValue) and skip;
					 output(" RMSD after superposition ",a_tether_10_temp$_2,"\n") and skip;
                     set_f_variable("rmsdev",a_tether_rms,RValue)
                     
                 }
                 else 
                 {
                      skip 
                 };
                 free(a_tether_zz) and skip;
                 free(a_tether_yy) and skip;
                 free(a_tether_xx) and skip;
                 free(a_tether_z) and skip;
                 free(a_tether_y) and skip;
                 free(a_tether_x) and skip;
                 return<==1 and RValue:=1;
                 skip
             }
             else
             {
                 skip
             }
         }
         else
         {
             skip
         }
     }
     else
     {
         skip
     }
     )
     }; 
  function bstrot ( float *x,float *y,float *z,float *xx,float *yy,float *zz,int na,float **matrix,float *delta,float RValue )
 {
     frame(bstrot_tensor,bstrot_cx,bstrot_cy,bstrot_cz,bstrot_cxx,bstrot_cyy,bstrot_czz,bstrot_tx,bstrot_ty,bstrot_tz,bstrot_txx,bstrot_tyy,bstrot_tzz,bstrot_rms,bstrot_sx,bstrot_sy,bstrot_sz,bstrot_sq,bstrot_i,bstrot_j,bstrot_ipass,return,break$) and ( 
     int break$<==0 and skip;
     int return<==0 and skip;
     float bstrot_tensor[3,3],bstrot_cx,bstrot_cy,bstrot_cz,bstrot_cxx,bstrot_cyy,bstrot_czz and skip;
     float bstrot_tx,bstrot_ty,bstrot_tz,bstrot_txx,bstrot_tyy,bstrot_tzz and skip;
     float bstrot_rms and skip;
     float bstrot_sx[3,3],bstrot_sy[3,3],bstrot_sz[3,3] and skip;
     float bstrot_sq[3,3] and skip;
     int bstrot_i,bstrot_j,bstrot_ipass and skip;
     if(na<1) then 
     {
         return<==1 and RValue:=-1.0;
         skip
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         bstrot_cx:=0.0;
         bstrot_cy:=0.0;
         bstrot_cz:=0.0;
         bstrot_cxx:=0.0;
         bstrot_cyy:=0.0;
         bstrot_czz:=0.0;
         bstrot_i:=0;
         
         while(bstrot_i<na)
         {
             bstrot_cx:=bstrot_cx+x[bstrot_i];
             bstrot_cy:=bstrot_cy+y[bstrot_i];
             bstrot_cz:=bstrot_cz+z[bstrot_i];
             bstrot_cxx:=bstrot_cxx+xx[bstrot_i];
             bstrot_cyy:=bstrot_cyy+yy[bstrot_i];
             bstrot_czz:=bstrot_czz+zz[bstrot_i];
             bstrot_i:=bstrot_i+1
             
         };
         bstrot_cx:=bstrot_cx/ na;
         bstrot_cy:=bstrot_cy/ na;
         bstrot_cz:=bstrot_cz/ na;
         bstrot_cxx:=bstrot_cxx/ na;
         bstrot_cyy:=bstrot_cyy/ na;
         bstrot_czz:=bstrot_czz/ na;
         bstrot_i:=0;
         
         while(bstrot_i<3)
         {
             bstrot_j:=0;
             
             while(bstrot_j<3)
             {
                 bstrot_tensor[bstrot_i,bstrot_j]:=0.0;
                 matrix[bstrot_i,bstrot_j]:=0.0;
                 bstrot_sx[bstrot_i,bstrot_j]:=0.0;
                 bstrot_sy[bstrot_i,bstrot_j]:=0.0;
                 bstrot_sz[bstrot_i,bstrot_j]:=0.0;
                 bstrot_j:=bstrot_j+1
                 
             };
             bstrot_i:=bstrot_i+1
             
         };
         matrix[0,0]:=1.0;
         matrix[1,1]:=1.0;
         matrix[2,2]:=1.0;
         bstrot_sx[0,0]:=1.0;
         bstrot_sy[1,1]:=1.0;
         bstrot_sz[2,2]:=1.0;
         bstrot_i:=0;
         
         while(bstrot_i<na)
         {
             bstrot_tx:=x[bstrot_i]-bstrot_cx;
             bstrot_ty:=y[bstrot_i]-bstrot_cy;
             bstrot_tz:=z[bstrot_i]-bstrot_cz;
             bstrot_txx:=xx[bstrot_i]-bstrot_cxx;
             bstrot_tyy:=yy[bstrot_i]-bstrot_cyy;
             bstrot_tzz:=zz[bstrot_i]-bstrot_czz;
             bstrot_tensor[0,0]:=bstrot_tensor[0,0]+bstrot_tx*bstrot_txx;
             bstrot_tensor[0,1]:=bstrot_tensor[0,1]+bstrot_tx*bstrot_tyy;
             bstrot_tensor[0,2]:=bstrot_tensor[0,2]+bstrot_tx*bstrot_tzz;
             bstrot_tensor[1,0]:=bstrot_tensor[1,0]+bstrot_ty*bstrot_txx;
             bstrot_tensor[1,1]:=bstrot_tensor[1,1]+bstrot_ty*bstrot_tyy;
             bstrot_tensor[1,2]:=bstrot_tensor[1,2]+bstrot_ty*bstrot_tzz;
             bstrot_tensor[2,0]:=bstrot_tensor[2,0]+bstrot_tz*bstrot_txx;
             bstrot_tensor[2,1]:=bstrot_tensor[2,1]+bstrot_tz*bstrot_tyy;
             bstrot_tensor[2,2]:=bstrot_tensor[2,2]+bstrot_tz*bstrot_tzz;
             bstrot_i:=bstrot_i+1
             
         };
         break$<==0 and skip;
         bstrot_ipass:=0;
         
         while( break$=0 AND  bstrot_ipass<20)
         {
             bstrot_rms:=0.0;
             bstrot_tx:=atan2(bstrot_tensor[2,1]-bstrot_tensor[1,2],bstrot_tensor[1,1]+bstrot_tensor[2,2]);
             bstrot_rms:=bstrot_rms+fabs(bstrot_tx);
             bstrot_ty:=cos(bstrot_tx);
             bstrot_tz:=sin(bstrot_tx);
             bstrot_sx[1,1]:=bstrot_ty;
             bstrot_sx[2,1]:=-bstrot_tz;
             bstrot_sx[1,2]:=bstrot_tz;
             bstrot_sx[2,2]:=bstrot_ty;
             matmul(bstrot_sx,bstrot_tensor,bstrot_sq,3,3);
             cpyvec(bstrot_sq,bstrot_tensor,9);
             matmul(bstrot_sx,matrix,bstrot_sq,3,3);
             cpyvec(bstrot_sq,matrix,9);
             bstrot_tx:=atan2(bstrot_tensor[2,0]-bstrot_tensor[0,2],bstrot_tensor[0,0]+bstrot_tensor[2,2]);
             bstrot_rms:=bstrot_rms+fabs(bstrot_tx);
             bstrot_ty:=cos(bstrot_tx);
             bstrot_tz:=sin(bstrot_tx);
             bstrot_sy[0,0]:=bstrot_ty;
             bstrot_sy[2,0]:=-bstrot_tz;
             bstrot_sy[0,2]:=bstrot_tz;
             bstrot_sy[2,2]:=bstrot_ty;
             matmul(bstrot_sy,bstrot_tensor,bstrot_sq,3,3);
             cpyvec(bstrot_sq,bstrot_tensor,9);
             matmul(bstrot_sy,matrix,bstrot_sq,3,3);
             cpyvec(bstrot_sq,matrix,9);
             bstrot_tx:=atan2(bstrot_tensor[0,1]-bstrot_tensor[1,0],bstrot_tensor[1,1]+bstrot_tensor[0,0]);
             bstrot_rms:=bstrot_rms+fabs(bstrot_tx);
             bstrot_ty:=cos(bstrot_tx);
             bstrot_tz:=sin(bstrot_tx);
             bstrot_sz[1,1]:=bstrot_ty;
             bstrot_sz[0,1]:=-bstrot_tz;
             bstrot_sz[1,0]:=bstrot_tz;
             bstrot_sz[0,0]:=bstrot_ty;
             matmul(bstrot_sz,bstrot_tensor,bstrot_sq,3,3);
             cpyvec(bstrot_sq,bstrot_tensor,9);
             matmul(bstrot_sz,matrix,bstrot_sq,3,3);
             cpyvec(bstrot_sq,matrix,9);
             if(bstrot_rms<1.e-7) then 
             {
                 break$<==1 and skip
              }
             else 
             {
                  skip 
             };
             if(break$=0)   then
             {
                 bstrot_ipass:=bstrot_ipass+1
             }
             else
             {
                 skip
             }
             
         };
         break$<==0 and skip;
         bstrot_rms:=0.0;
         bstrot_i:=0;
         
         while(bstrot_i<na)
         {
             bstrot_txx:=xx[bstrot_i]-bstrot_cxx;
             bstrot_tyy:=yy[bstrot_i]-bstrot_cyy;
             bstrot_tzz:=zz[bstrot_i]-bstrot_czz;
             bstrot_tx:=matrix[0,0]*bstrot_txx+matrix[1,0]*bstrot_tyy+matrix[2,0]*bstrot_tzz;
             bstrot_ty:=matrix[0,1]*bstrot_txx+matrix[1,1]*bstrot_tyy+matrix[2,1]*bstrot_tzz;
             bstrot_tz:=matrix[0,2]*bstrot_txx+matrix[1,2]*bstrot_tyy+matrix[2,2]*bstrot_tzz;
             bstrot_tx:=bstrot_tx+bstrot_cx-x[bstrot_i];
             bstrot_ty:=bstrot_ty+bstrot_cy-y[bstrot_i];
             bstrot_tz:=bstrot_tz+bstrot_cz-z[bstrot_i];
             bstrot_rms:=bstrot_rms+bstrot_tx*bstrot_tx+bstrot_ty*bstrot_ty+bstrot_tz*bstrot_tz;
             bstrot_i:=bstrot_i+1
             
         };
         bstrot_tx:=matrix[0,0]*bstrot_cxx+matrix[1,0]*bstrot_cyy+matrix[2,0]*bstrot_czz;
         bstrot_ty:=matrix[0,1]*bstrot_cxx+matrix[1,1]*bstrot_cyy+matrix[2,1]*bstrot_czz;
         bstrot_tz:=matrix[0,2]*bstrot_cxx+matrix[1,2]*bstrot_cyy+matrix[2,2]*bstrot_czz;
         delta[0]:=bstrot_cx-bstrot_tx;
         delta[1]:=bstrot_cy-bstrot_ty;
         delta[2]:=bstrot_cz-bstrot_tz;
         return<==1 and RValue:=sqrt(bstrot_rms/ na);
         skip
     }
     else
     {
         skip
     }
     )
     }; 
  function cpyvec ( float *orig,float *copy,int n )
 {
     frame(cpyvec_i) and ( 
     int cpyvec_i and skip;
     cpyvec_i:=0;
     
     while(cpyvec_i<n)
     {
         copy[cpyvec_i]:=orig[cpyvec_i];
         cpyvec_i:=cpyvec_i+1
         
     }
     )
     }; 
  function matmul ( float *a,float *b,float *c,int n,int m )
 {
     frame(matmul_i,matmul_j,matmul_k,matmul_ioff,matmul_koff) and ( 
     int matmul_i,matmul_j,matmul_k,matmul_ioff,matmul_koff and skip;
     matmul_i:=0;
     
     while(matmul_i<n*n)
     {
         c[matmul_i]:=0.0;
         matmul_i:=matmul_i+1
         
     };
     matmul_i:=0;
     
     while(matmul_i<n)
     {
         matmul_ioff:=matmul_i*n;
         matmul_j:=0;
         
         while(matmul_j<n)
         {
             matmul_koff:=0.0;
             matmul_k:=0;
             
             while(matmul_k<m)
             {
                 c[matmul_ioff+matmul_j]:=c[matmul_ioff+matmul_j]+a[matmul_ioff+matmul_k]*b[matmul_j+matmul_koff];
                 matmul_koff:=matmul_koff+m;
                 matmul_k:=matmul_k+1
                 
             };
             matmul_j:=matmul_j+1
             
         };
         matmul_i:=matmul_i+1
         
     }
     )
     }; 
  function v_ho_tether ( float *V,float lambda,int RValue )
 {
     frame(v_ho_tether_bp,v_ho_tether_r,v_ho_tether_xt,v_ho_tether_yt,v_ho_tether_zt,v_ho_tether_a1,v_ho_tether_hol,return) and ( 
     int return<==0 and skip;
     TETHER *v_ho_tether_bp and skip;
     float v_ho_tether_r,v_ho_tether_xt,v_ho_tether_yt,v_ho_tether_zt and skip;
     ATOM *v_ho_tether_a1 and skip;
     float v_ho_tether_hol and skip;
     v_ho_tether_hol:=get_f_variable("lambda",RValue);
     if(v_ho_tether_hol<0.0) then 
     {
         v_ho_tether_hol:=0.0
     }
     else 
     {
          skip 
     };
     if(v_ho_tether_hol>1.0) then 
     {
         v_ho_tether_hol:=1.0
     }
     else 
     {
          skip 
     };
     if(v_ho_tether_hol=1.0) then 
     {
         return<==1 and RValue:=0;
         skip
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         v_ho_tether_bp:=tether_first;
         if(v_ho_tether_bp=NULL) then 
         {
             return<==1 and RValue:=1;
             skip
         }
         else 
         {
              skip 
         };
         if(return=0)   then 
         {
             while( return=0 AND  1)
             {
                 if(v_ho_tether_bp=NULL) then 
                 {
                     return<==1 and RValue:=0;
                     skip
                 }
                 else 
                 {
                      skip 
                 };
                 if(return=0)   then 
                 {
                     v_ho_tether_a1:=v_ho_tether_bp->atom1;
                     if(v_ho_tether_a1->active) then 
                     {
                         if(lambda=0.0) then 
                         {
                             v_ho_tether_xt:=(v_ho_tether_a1->x-v_ho_tether_bp->x);
                             v_ho_tether_yt:=(v_ho_tether_a1->y-v_ho_tether_bp->y);
                             v_ho_tether_zt:=(v_ho_tether_a1->z-v_ho_tether_bp->z)
                             
                         }
                         else
                         {
                             v_ho_tether_xt:=(v_ho_tether_a1->x+lambda*(v_ho_tether_a1->dx)-v_ho_tether_bp->x);
                             v_ho_tether_yt:=(v_ho_tether_a1->y+lambda*(v_ho_tether_a1->dy)-v_ho_tether_bp->y);
                             v_ho_tether_zt:=(v_ho_tether_a1->z+lambda*(v_ho_tether_a1->dz)-v_ho_tether_bp->z)
                         };
                         v_ho_tether_r:=(v_ho_tether_xt*v_ho_tether_xt+v_ho_tether_yt*v_ho_tether_yt+v_ho_tether_zt*v_ho_tether_zt)*(1.0-v_ho_tether_hol)*(1.0-v_ho_tether_hol);
                         * V:=* V+v_ho_tether_bp->k*v_ho_tether_r
                         
                     }
                     else 
                     {
                          skip 
                     };
                     if(v_ho_tether_bp=v_ho_tether_bp->next$) then 
                     {
                         return<==1 and RValue:=1;
                         skip
                     }
                     else 
                     {
                          skip 
                     };
                     if(return=0)   then 
                     {
                         v_ho_tether_bp:=v_ho_tether_bp->next$
                     }
                     else
                     {
                         skip
                     }
                 }
                 else
                 {
                     skip
                 }
             }
         }
         else
         {
             skip
         }
     }
     else
     {
         skip
     }
     )
     }; 
  function f_ho_tether ( float lambda,int RValue )
 {
     frame(f_ho_tether_bp,f_ho_tether_r,f_ho_tether_k,f_ho_tether_ux,f_ho_tether_uy,f_ho_tether_uz,f_ho_tether_a1,f_ho_tether_hol,return) and ( 
     int return<==0 and skip;
     TETHER *f_ho_tether_bp and skip;
     float f_ho_tether_r,f_ho_tether_k,f_ho_tether_ux,f_ho_tether_uy,f_ho_tether_uz and skip;
     ATOM *f_ho_tether_a1 and skip;
     float f_ho_tether_hol and skip;
     f_ho_tether_hol:=get_f_variable("lambda",RValue);
     if(f_ho_tether_hol<0.0) then 
     {
         f_ho_tether_hol:=0.0
     }
     else 
     {
          skip 
     };
     if(f_ho_tether_hol>1.0) then 
     {
         f_ho_tether_hol:=1.0
     }
     else 
     {
          skip 
     };
     if(f_ho_tether_hol=1.0) then 
     {
         return<==1 and RValue:=0;
         skip
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         f_ho_tether_bp:=tether_first;
         if(f_ho_tether_bp=NULL) then 
         {
             return<==1 and RValue:=1;
             skip
         }
         else 
         {
              skip 
         };
         if(return=0)   then 
         {
             while( return=0 AND  1)
             {
                 if(f_ho_tether_bp=NULL) then 
                 {
                     return<==1 and RValue:=0;
                     skip
                 }
                 else 
                 {
                      skip 
                 };
                 if(return=0)   then 
                 {
                     f_ho_tether_k:=f_ho_tether_bp->k;
                     f_ho_tether_a1:=f_ho_tether_bp->atom1;
                     if(f_ho_tether_a1->active) then 
                     {
                         if(lambda=0.0) then 
                         {
                             f_ho_tether_ux:=(f_ho_tether_a1->x-f_ho_tether_bp->x);
                             f_ho_tether_uy:=(f_ho_tether_a1->y-f_ho_tether_bp->y);
                             f_ho_tether_uz:=(f_ho_tether_a1->z-f_ho_tether_bp->z)
                             
                         }
                         else
                         {
                             f_ho_tether_ux:=(f_ho_tether_a1->x-f_ho_tether_bp->x+lambda*(f_ho_tether_a1->dx));
                             f_ho_tether_uy:=(f_ho_tether_a1->y-f_ho_tether_bp->y+lambda*(f_ho_tether_a1->dy));
                             f_ho_tether_uz:=(f_ho_tether_a1->z-f_ho_tether_bp->z+lambda*(f_ho_tether_a1->dz))
                         };
                         f_ho_tether_r:=f_ho_tether_ux*f_ho_tether_ux+f_ho_tether_uy*f_ho_tether_uy+f_ho_tether_uz*f_ho_tether_uz;
                         if(f_ho_tether_r<=1.e-5) then 
                         {
                             if(f_ho_tether_bp=f_ho_tether_bp->next$) then 
                             {
                                 return<==1 and RValue:=1;
                                 skip
                             }
                             else 
                             {
                                  skip 
                             };
                             if(return=0)   then 
                             {
                                 f_ho_tether_bp:=f_ho_tether_bp->next$;
                                 return<==1 and RValue:=0;
                                 skip
                             }
                             else
                             {
                                 skip
                             }
                         }
                         else
                         {
                             skip
                         }
                         
                     }
                     else
                     {
                         f_ho_tether_r:=sqrt(f_ho_tether_r);
                         f_ho_tether_ux:=f_ho_tether_ux/ f_ho_tether_r;
                         f_ho_tether_uy:=f_ho_tether_uy/ f_ho_tether_r;
                         f_ho_tether_uz:=f_ho_tether_uz/ f_ho_tether_r
                     };
                     if(return=0)  then
                     {
                         if(return=0)  then
                         {
                             f_ho_tether_ux:=2*f_ho_tether_k*f_ho_tether_r*f_ho_tether_ux*(1.0-f_ho_tether_hol);
                             f_ho_tether_uy:=2*f_ho_tether_k*f_ho_tether_r*f_ho_tether_uy*(1.0-f_ho_tether_hol);
                             f_ho_tether_uz:=2*f_ho_tether_k*f_ho_tether_r*f_ho_tether_uz*(1.0-f_ho_tether_hol);
                             f_ho_tether_a1->fx:=f_ho_tether_a1->fx-f_ho_tether_ux;
                             f_ho_tether_a1->fy:=f_ho_tether_a1->fy-f_ho_tether_uy;
                             f_ho_tether_a1->fz:=f_ho_tether_a1->fz-f_ho_tether_uz
                         }
                         else
                         {
                             skip
                         }
                     }
                     else
                     {
                         skip
                     }
                     
                 }
                 else 
                 {
                      skip 
                 };
                 if(return=0)  then
                 {
                     if(f_ho_tether_bp=f_ho_tether_bp->next$) then 
                     {
                         return<==1 and RValue:=1;
                         skip
                     }
                     else 
                     {
                          skip 
                     };
                     if(return=0)   then 
                     {
                         f_ho_tether_bp:=f_ho_tether_bp->next$
                     }
                     else
                     {
                         skip
                     }
                 }
                 else
                 {
                     skip
                 }
             }
         }
         else
         {
             skip
         }
     }
     else
     {
         skip
     }
     )
     }; 
      struct TGROUP {
     ATOM *context,*b1,*b2,*b3 and 
     int which,ntry,ingroup and 
     float base and 
     ATOM *group[100] and 
     void *next$ 
 };
 TGROUP *tg_first<==NULL and skip;
 function tgroup ( int which,int context,int b1,int b2,int b3,float base,int ntry,int RValue )
 {
     frame(tgroup_ok,tgroup_tgp,tgroup_tgo,tgroup_bonded,tgroup_newest,tgroup_newer,tgroup_in_newest,tgroup_in_newer,tgroup_i,tgroup_j,tgroup_k,tgroup_l,tgroup_ll,tgroup_line,return,break$) and ( 
     int break$<==0 and skip;
     int return<==0 and skip;
     int tgroup_ok and skip;
     TGROUP *tgroup_tgp,*tgroup_tgo and skip;
     ATOM *tgroup_bonded[20] and skip;
     ATOM *tgroup_newest[100] and skip;
     ATOM *tgroup_newer[100] and skip;
     int tgroup_in_newest,tgroup_in_newer and skip;
     int tgroup_i,tgroup_j,tgroup_k,tgroup_l,tgroup_ll and skip;
     char tgroup_line[80] and skip;
     if(ntry=0) then 
     {
         base:=0.0;
         ntry:=6
         
     }
     else 
     {
          skip 
     };
     tgroup_tgp:=tg_first;
     tgroup_tgo:=tgroup_tgp;
     if(which=0) then 
     {
         aaerror("warning tg_group 0 will never be accessed\n");
         return<==1 and RValue:=0;
         skip
         
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         tgroup_ok:=0;
         break$<==0 and skip;
         while( break$=0 AND  tgroup_tgp!=NULL)
         {
             if(tgroup_tgp->which=which) then 
             {
                 tgroup_ok:=1;
                 break$<==1 and skip
                  
             }
             else 
             {
                  skip 
             };
             if(break$=0)   then
             {
                 tgroup_tgo:=tgroup_tgp;
                 tgroup_tgp:=tgroup_tgp->next$
             }
             else
             {
                 skip
             }
         };
         break$<==0 and skip;
         if(tgroup_ok=0) then 
         {
             tgroup_tgp:=malloc(sizeof(TGROUP)) ;
             if((tgroup_tgp)=NULL) then 
             {
                 aaerror(" cannot allocate memory for a tg_group\n");
                 exit(0) and skip 
                 
             }
             else 
             {
                  skip 
             };
             if(tgroup_tgo!=NULL) then 
             {
                 tgroup_tgo->next$:=tgroup_tgp
             }
             else 
             {
                  skip 
             };
             if(tgroup_tgo=NULL) then 
             {
                 tg_first:=tgroup_tgp
             }
             else 
             {
                  skip 
             };
             tgroup_tgp->next$:=NULL
             
         }
         else 
         {
              skip 
         };
         if(context<0 OR b1<0 OR b2<0 OR b3<0) then 
         {
             if(tgroup_tgo!=NULL) then 
             {
                 tgroup_tgo->next$:=tgroup_tgp->next$
             }
             else 
             {
                  skip 
             };
             if(tgroup_tgo=NULL) then 
             {
                 tg_first:=tgroup_tgp->next$
             }
             else 
             {
                  skip 
             };
             free(tgroup_tgp) and skip;
             return<==1 and RValue:=1;
             skip
             
         }
         else 
         {
              skip 
         };
         if(return=0)   then 
         {
             tgroup_tgp->which:=which;
             tgroup_tgp->context:=a_m_serial(context,RValue);
             tgroup_tgp->b1:=a_m_serial(b1,RValue);
             tgroup_tgp->b2:=a_m_serial(b2,RValue);
             tgroup_tgp->b3:=a_m_serial(b3,RValue);
             if(tgroup_tgp->context=NULL) then 
             {
                 sprintf(tgroup_line," tgroup %d  %d atom not defined cannot define tgroup ",which,context,RValue) and skip;
                 aaerror(tgroup_line);
                 return<==1 and RValue:=1;
                 skip
                 
             }
             else 
             {
                  skip 
             };
             if(return=0)   then 
             {
                 if(tgroup_tgp->b1=NULL) then 
                 {
                     sprintf(tgroup_line," tgroup %d  %d atom not defined cannot define tgroup ",which,b1,RValue) and skip;
                     aaerror(tgroup_line);
                     return<==1 and RValue:=1;
                     skip
                     
                 }
                 else 
                 {
                      skip 
                 };
                 if(return=0)   then 
                 {
                     if(tgroup_tgp->b2=NULL) then 
                     {
                         sprintf(tgroup_line," tgroup %d  %d atom not defined cannot define tgroup ",which,b2,RValue) and skip;
                         aaerror(tgroup_line);
                         return<==1 and RValue:=1;
                         skip
                         
                     }
                     else 
                     {
                          skip 
                     };
                     if(return=0)   then 
                     {
                         if(tgroup_tgp->b3=NULL) then 
                         {
                             sprintf(tgroup_line," tgroup %d  %d atom not defined cannot define tgroup ",which,b3,RValue) and skip;
                             aaerror(tgroup_line);
                             return<==1 and RValue:=1;
                             skip
                             
                         }
                         else 
                         {
                              skip 
                         };
                         if(return=0)   then 
                         {
                             tgroup_tgp->base:=base*3.1415926589793/ 180.0;
                             tgroup_k:=0;
                             
                             while(tgroup_k<100)
                             {
                                 tgroup_tgp->group[tgroup_k]:=NULL;
                                 tgroup_k:=tgroup_k+1
                                 
                             };
                             if(ntry>24) then 
                             {
                                 ntry:=24
                             }
                             else 
                             {
                                  skip 
                             };
                             tgroup_tgp->ntry:=ntry;
                             get_bond(tgroup_tgp->b2,tgroup_bonded,20,&tgroup_j);
                             break$<==0 and skip;
                             tgroup_k:=0;
                             
                             while( break$=0 AND  tgroup_k<tgroup_j)
                             {
                                 if(tgroup_bonded[tgroup_k]!=tgroup_tgp->context AND tgroup_bonded[tgroup_k]!=tgroup_tgp->b3 AND tgroup_bonded[tgroup_k]!=tgroup_tgp->b1) then 
                                 {
                                     break$<==1 and skip
                                  }
                                 else 
                                 {
                                      skip 
                                 };
                                 if(break$=0)   then
                                 {
                                     tgroup_k:=tgroup_k+1
                                 }
                                 else
                                 {
                                     skip
                                 }
                                 
                             };
                             break$<==0 and skip;
                             tgroup_newest[0]:=tgroup_tgp->b3;
                             tgroup_tgp->group[0]:=tgroup_tgp->b3;
                             tgroup_tgp->ingroup:=1;
                             tgroup_in_newest:=1;
                             if(tgroup_k!=tgroup_j) then 
                             {
                                 tgroup_newest[1]:=tgroup_bonded[tgroup_k];
                                 tgroup_tgp->group[1]:=tgroup_bonded[tgroup_k];
                                 tgroup_tgp->ingroup:=2;
                                 tgroup_in_newest:=2;
                                 tgroup_i:=0;
                                 
                                 while(tgroup_i<tgroup_j)
                                 {
                                     tgroup_l:=1;
                                     break$<==0 and skip;
                                     tgroup_k:=0;
                                     
                                     while( break$=0 AND  tgroup_k<tgroup_in_newest)
                                     {
                                         if(tgroup_newest[tgroup_k]=tgroup_bonded[tgroup_i]) then 
                                         {
                                             tgroup_l:=0;
                                             break$<==1 and skip
                                              
                                         }
                                         else 
                                         {
                                              skip 
                                         };
                                         if(break$=0)   then
                                         {
                                             tgroup_k:=tgroup_k+1
                                         }
                                         else
                                         {
                                             skip
                                         }
                                         
                                     };
                                     break$<==0 and skip;
                                     if(tgroup_bonded[tgroup_i]=tgroup_tgp->context) then 
                                     {
                                         tgroup_l:=0
                                     }
                                     else 
                                     {
                                          skip 
                                     };
                                     if(tgroup_bonded[tgroup_i]=tgroup_tgp->b1) then 
                                     {
                                         tgroup_l:=0
                                     }
                                     else 
                                     {
                                          skip 
                                     };
                                     if(tgroup_bonded[tgroup_i]=tgroup_tgp->b2) then 
                                     {
                                         tgroup_l:=0
                                     }
                                     else 
                                     {
                                          skip 
                                     };
                                     if(tgroup_bonded[tgroup_i]=tgroup_tgp->b3) then 
                                     {
                                         tgroup_l:=0
                                     }
                                     else 
                                     {
                                          skip 
                                     };
                                     if(tgroup_l=1) then 
                                     {
                                         tgroup_tgp->group[tgroup_tgp->ingroup]:=tgroup_bonded[tgroup_i];
                                         tgroup_tgp->ingroup:=tgroup_tgp->ingroup+1;
                                         tgroup_newest[tgroup_in_newest]:=tgroup_bonded[tgroup_i];
                                         tgroup_in_newest:=tgroup_in_newest+1
                                         
                                     }
                                     else 
                                     {
                                          skip 
                                     };
                                     tgroup_i:=tgroup_i+1
                                     
                                 }
                                 
                             }
                             else 
                             {
                                  skip 
                             };
                             while(tgroup_in_newest>0)
                             {
                                 tgroup_in_newer:=0;
                                 tgroup_l:=0;
                                 
                                 while(tgroup_l<tgroup_in_newest)
                                 {
                                     get_bond(tgroup_newest[tgroup_l],tgroup_bonded,20,&tgroup_j);
                                     tgroup_i:=0;
                                     
                                     while(tgroup_i<tgroup_j)
                                     {
                                         tgroup_ll:=1;
                                         break$<==0 and skip;
                                         tgroup_k:=0;
                                         
                                         while( break$=0 AND  tgroup_k<tgroup_tgp->ingroup)
                                         {
                                             if(tgroup_tgp->group[tgroup_k]=tgroup_bonded[tgroup_i]) then 
                                             {
                                                 tgroup_ll:=0;
                                                 break$<==1 and skip
                                                  
                                             }
                                             else 
                                             {
                                                  skip 
                                             };
                                             if(break$=0)   then
                                             {
                                                 tgroup_k:=tgroup_k+1
                                             }
                                             else
                                             {
                                                 skip
                                             }
                                             
                                         };
                                         break$<==0 and skip;
                                         if(tgroup_bonded[tgroup_i]=tgroup_tgp->context) then 
                                         {
                                             tgroup_ll:=0
                                         }
                                         else 
                                         {
                                              skip 
                                         };
                                         if(tgroup_bonded[tgroup_i]=tgroup_tgp->b1) then 
                                         {
                                             tgroup_ll:=0
                                         }
                                         else 
                                         {
                                              skip 
                                         };
                                         if(tgroup_bonded[tgroup_i]=tgroup_tgp->b2) then 
                                         {
                                             tgroup_ll:=0
                                         }
                                         else 
                                         {
                                              skip 
                                         };
                                         if(tgroup_bonded[tgroup_i]=tgroup_tgp->b3) then 
                                         {
                                             tgroup_ll:=0
                                         }
                                         else 
                                         {
                                              skip 
                                         };
                                         if(tgroup_ll=1) then 
                                         {
                                             tgroup_tgp->group[tgroup_tgp->ingroup]:=tgroup_bonded[tgroup_i];
                                             tgroup_tgp->ingroup:=tgroup_tgp->ingroup+1;
                                             tgroup_newer[tgroup_in_newer]:=tgroup_bonded[tgroup_i];
                                             tgroup_in_newer:=tgroup_in_newer+1;
                                             if(tgroup_tgp->ingroup>100) then 
                                             {
                                                 aaerror(" too many atoms in a tgroup - must exit\n");
                                                 exit(0) and skip 
                                                 
                                             }
                                             else 
                                             {
                                                  skip 
                                             }
                                             
                                         }
                                         else 
                                         {
                                              skip 
                                         };
                                         tgroup_i:=tgroup_i+1
                                         
                                     };
                                     tgroup_l:=tgroup_l+1
                                     
                                 };
                                 tgroup_i:=0;
                                 
                                 while(tgroup_i<tgroup_in_newer)
                                 {
                                     tgroup_newest[tgroup_i]:=tgroup_newer[tgroup_i];
                                     tgroup_i:=tgroup_i+1
                                     
                                 };
                                 tgroup_in_newest:=tgroup_in_newer
                             };
                             if(tgroup_tgp->ingroup>100) then 
                             {
                                 aaerror(" too many atoms in a tgroup - must exit\n");
                                 exit(0) and skip 
                                 
                             }
                             else 
                             {
                                  skip 
                             };
                             return<==1 and RValue:=1;
                             skip
                         }
                         else
                         {
                             skip
                         }
                     }
                     else
                     {
                         skip
                     }
                 }
                 else
                 {
                     skip
                 }
             }
             else
             {
                 skip
             }
         }
         else
         {
             skip
         }
     }
     else
     {
         skip
     }
     )
     }; 
  function tsearch ( int t1,int t2,int t3,int t4,int t5,int t6,int t7,int t8,int RValue )
 {
     frame(tsearch_grouplist,tsearch_ngroup,tsearch_i,tsearch_j,tsearch_bestlist,tsearch_V,return,break$) and ( 
     int break$<==0 and skip;
     int return<==0 and skip;
     TGROUP *tsearch_grouplist[8] and skip;
     int tsearch_ngroup,tsearch_i,tsearch_j and skip;
     int tsearch_bestlist[8] and skip;
     float tsearch_V and skip;
     tsearch_ngroup:=8;
     tsearch_i:=0;
     
     while(tsearch_i<tsearch_ngroup)
     {
         tsearch_grouplist[tsearch_i]:=NULL;
         tsearch_i:=tsearch_i+1
         
     };
     if(t8<=0) then 
     {
         tsearch_ngroup:=7
     }
     else 
     {
          skip 
     };
     if(t7<=0) then 
     {
         tsearch_ngroup:=6
     }
     else 
     {
          skip 
     };
     if(t6<=0) then 
     {
         tsearch_ngroup:=5
     }
     else 
     {
          skip 
     };
     if(t5<=0) then 
     {
         tsearch_ngroup:=4
     }
     else 
     {
          skip 
     };
     if(t4<=0) then 
     {
         tsearch_ngroup:=3
     }
     else 
     {
          skip 
     };
     if(t3<=0) then 
     {
         tsearch_ngroup:=2
     }
     else 
     {
          skip 
     };
     if(t2<=0) then 
     {
         tsearch_ngroup:=1
     }
     else 
     {
          skip 
     };
     if(t1<=0) then 
     {
         tsearch_ngroup:=0
     }
     else 
     {
          skip 
     };
     if(tsearch_ngroup=0) then 
     {
         return<==1 and RValue:=1;
         skip
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         tsearch_grouplist[7]:=match_tgroup(t8,RValue);
         tsearch_grouplist[6]:=match_tgroup(t7,RValue);
         tsearch_grouplist[5]:=match_tgroup(t6,RValue);
         tsearch_grouplist[4]:=match_tgroup(t5,RValue);
         tsearch_grouplist[3]:=match_tgroup(t4,RValue);
         tsearch_grouplist[2]:=match_tgroup(t3,RValue);
         tsearch_grouplist[1]:=match_tgroup(t2,RValue);
         tsearch_grouplist[0]:=match_tgroup(t1,RValue);
         tsearch_i:=0;
         
         while(tsearch_i<tsearch_ngroup)
         {
             if(tsearch_grouplist[tsearch_i]!=NULL) then 
             {
                 break$<==0 and skip;
                 tsearch_j:=0;
                 
                 while( break$=0 AND  tsearch_j<tsearch_grouplist[tsearch_i]->ingroup)
                 {
                     if(!(tsearch_grouplist[tsearch_i]->group[tsearch_j]->active)) then 
                     {
                         tsearch_grouplist[tsearch_i]:=NULL;
                         break$<==1 and skip
                          
                     }
                     else 
                     {
                          skip 
                     };
                     if(break$=0)   then
                     {
                         tsearch_j:=tsearch_j+1
                     }
                     else
                     {
                         skip
                     }
                     
                 };
                 break$<==0 and skip;
                 if(tsearch_grouplist[tsearch_i]!=NULL) then 
                 {
                     if(!(tsearch_grouplist[tsearch_i]->b3->active)) then 
                     {
                         tsearch_grouplist[tsearch_i]:=NULL
                         
                     }
                     else 
                     {
                          skip 
                     }
                 }
                 else 
                 {
                      skip 
                 }
                 
             }
             else 
             {
                  skip 
             };
             tsearch_i:=tsearch_i+1
             
         };
         tsearch_i:=0;
         
         while(tsearch_i<tsearch_ngroup)
         {
             if(tsearch_grouplist[tsearch_i]=NULL) then 
             {
                 tsearch_j:=tsearch_i;
                 
                 while(tsearch_j<tsearch_ngroup-1)
                 {
                     tsearch_grouplist[tsearch_j]:=tsearch_grouplist[tsearch_j+1];
                     tsearch_j:=tsearch_j+1
                     
                 };
                 tsearch_ngroup:=tsearch_ngroup-1
                 
             }
             else 
             {
                  skip 
             };
             tsearch_i:=tsearch_i+1
             
         };
         tg_init(tsearch_grouplist,&tsearch_ngroup,0,RValue);
         tg_do_search(&tsearch_V,tsearch_grouplist,tsearch_bestlist,0,tsearch_ngroup);
         tg_gen_con(tsearch_grouplist,tsearch_bestlist,tsearch_ngroup)
     }
     else
     {
         skip
     }
     )
     }; 
  function tg_gen_con ( TGROUP **gl,int *bl,int ngl )
 {
     frame(tg_gen_con_a1,tg_gen_con_i,tg_gen_con_j) and ( 
     ATOM *tg_gen_con_a1 and skip;
     int tg_gen_con_i,tg_gen_con_j and skip;
     tg_gen_con_i:=0;
     
     while(tg_gen_con_i<ngl)
     {
         tg_gen_con_j:=ngl-tg_gen_con_i-1;
         tg_apply(gl[tg_gen_con_j],bl[tg_gen_con_j]);
         tg_gen_con_i:=tg_gen_con_i+1
         
     };
     tg_gen_con_i:=ngl-1;
     
     while(tg_gen_con_i>-1)
     {
         tg_gen_con_j:=0;
         
         while(tg_gen_con_j<gl[tg_gen_con_i]->ingroup)
         {
             tg_gen_con_a1:=gl[tg_gen_con_i]->group[tg_gen_con_j];
             tg_gen_con_a1->x:=tg_gen_con_a1->dx;
             tg_gen_con_a1->y:=tg_gen_con_a1->dy;
             tg_gen_con_a1->z:=tg_gen_con_a1->dz;
             tg_gen_con_j:=tg_gen_con_j+1
             
         };
         tg_gen_con_i:=tg_gen_con_i-1
         
     }
     )
     }; 
  function tg_init ( TGROUP **gl,int *ng,int deep )
 {
     frame(tg_init_a1,tg_init_a2,tg_init_a3,tg_init_a4,tg_init_x1,tg_init_y1,tg_init_z1,tg_init_x2,tg_init_y2,tg_init_z2,tg_init_x3,tg_init_y3,tg_init_z3,tg_init_cx1,tg_init_cy1,tg_init_cz1,tg_init_cx2,tg_init_cy2,tg_init_cz2,tg_init_dp,tg_init_r,tg_init_i,tg_init_j,tg_init_ngl,return,continue) and ( 
     int continue<==0 and skip;
     int return<==0 and skip;
     ATOM *tg_init_a1,*tg_init_a2,*tg_init_a3,*tg_init_a4 and skip;
     float tg_init_x1,tg_init_y1,tg_init_z1,tg_init_x2,tg_init_y2,tg_init_z2,tg_init_x3,tg_init_y3,tg_init_z3 and skip;
     float tg_init_cx1,tg_init_cy1,tg_init_cz1,tg_init_cx2,tg_init_cy2,tg_init_cz2 and skip;
     float tg_init_dp,tg_init_r and skip;
     int tg_init_i,tg_init_j and skip;
     int tg_init_ngl and skip;
     if(deep=0) then 
     {
         tg_init_j:=a_number(RValue);
         tg_init_i:=0;
         
         while(tg_init_i<tg_init_j)
         {
             tg_init_a1:=a_next(tg_init_i,RValue);
             tg_init_a1->dx:=tg_init_a1->x;
             tg_init_a1->dy:=tg_init_a1->y;
             tg_init_a1->dz:=tg_init_a1->z;
             tg_init_i:=tg_init_i+1
             
         }
         
     }
     else 
     {
          skip 
     };
     tg_init_ngl:=* ng;
     continue<==0 and skip;
     tg_init_i:=tg_init_ngl-1;
     
     while( return=0 AND   return=0 AND  tg_init_i>-1)
     {
          continue<==0 and skip;
         if(gl[tg_init_i]=NULL) then 
         {
             if(tg_init_i=0) then 
             {
                 * ng:=0;
                  return<==1 and skip
                 
             }
             else 
             {
                  skip 
             };
             if(return=0)   then 
             {
                 * ng:=tg_init_i;
                 tg_init(gl,ng,deep+1);
                  return<==1 and skip
             }
             else
             {
                 skip
             }
             
         }
         else 
         {
              skip 
         };
         if(return=0)  then
         {
             if(return=0)   then 
             {
                 tg_init_j:=0;
                 
                 while( return=0 AND  tg_init_j<gl[tg_init_i]->ingroup)
                 {
                     tg_init_a1:=gl[tg_init_i]->group[tg_init_j];
                     if(tg_init_a1=NULL) then 
                     {
                          return<==1 and skip
                     }
                     else 
                     {
                          skip 
                     };
                     if(return=0)   then 
                     {
                         tg_init_a1->dx:=tg_init_a1->x;
                         tg_init_a1->dy:=tg_init_a1->y;
                         tg_init_a1->dz:=tg_init_a1->z;
                         tg_init_j:=tg_init_j+1
                     }
                     else
                     {
                         skip
                     }
                     
                 };
                 if(return=0)   then 
                 {
                     tg_init_a1:=gl[tg_init_i]->context;
                     tg_init_a2:=gl[tg_init_i]->b1;
                     tg_init_a3:=gl[tg_init_i]->b2;
                     tg_init_a4:=gl[tg_init_i]->b3;
                     tg_init_a1->dx:=tg_init_a1->x;
                     tg_init_a1->dy:=tg_init_a1->y;
                     tg_init_a1->dz:=tg_init_a1->z;
                     tg_init_a2->dx:=tg_init_a2->x;
                     tg_init_a2->dy:=tg_init_a2->y;
                     tg_init_a2->dz:=tg_init_a2->z;
                     tg_init_a3->dx:=tg_init_a3->x;
                     tg_init_a3->dy:=tg_init_a3->y;
                     tg_init_a3->dz:=tg_init_a3->z;
                     tg_init_a4->dx:=tg_init_a4->x;
                     tg_init_a4->dy:=tg_init_a4->y;
                     tg_init_a4->dz:=tg_init_a4->z;
                     tg_init_x1:=(tg_init_a1->x-tg_init_a2->x);
                     tg_init_y1:=(tg_init_a1->y-tg_init_a2->y);
                     tg_init_z1:=(tg_init_a1->z-tg_init_a2->z);
                     tg_init_x2:=(tg_init_a3->x-tg_init_a2->x);
                     tg_init_y2:=(tg_init_a3->y-tg_init_a2->y);
                     tg_init_z2:=(tg_init_a3->z-tg_init_a2->z);
                     tg_init_x3:=(tg_init_a4->x-tg_init_a3->x);
                     tg_init_y3:=(tg_init_a4->y-tg_init_a3->y);
                     tg_init_z3:=(tg_init_a4->z-tg_init_a3->z);
                     tg_init_cx1:=tg_init_y1*tg_init_z2-tg_init_y2*tg_init_z1;
                     tg_init_cy1:=-tg_init_x1*tg_init_z2+tg_init_x2*tg_init_z1;
                     tg_init_cz1:=tg_init_x1*tg_init_y2-tg_init_x2*tg_init_y1;
                     tg_init_r:=tg_init_cx1*tg_init_cx1+tg_init_cy1*tg_init_cy1+tg_init_cz1*tg_init_cz1;
                     if(tg_init_r<1.e-4) then 
                     {
                         tg_init_i:=tg_init_i;
                         continue<==1 and skip
                          
                     }
                     else 
                     {
                          skip 
                     };
                     if(continue=0)   then 
                     {
                         tg_init_r:=sqrt(tg_init_r);
                         tg_init_cx1:=tg_init_cx1/ tg_init_r;
                         tg_init_cy1:=tg_init_cy1/ tg_init_r;
                         tg_init_cz1:=tg_init_cz1/ tg_init_r;
                         tg_init_cx2:=tg_init_y3*tg_init_z2-tg_init_y2*tg_init_z3;
                         tg_init_cy2:=-tg_init_x3*tg_init_z2+tg_init_x2*tg_init_z3;
                         tg_init_cz2:=tg_init_x3*tg_init_y2-tg_init_x2*tg_init_y3;
                         tg_init_r:=tg_init_cx2*tg_init_cx2+tg_init_cy2*tg_init_cy2+tg_init_cz2*tg_init_cz2;
                         if(tg_init_r<1.e-4) then 
                         {
                             tg_init_i:=tg_init_i;
                             continue<==1 and skip
                              
                         }
                         else 
                         {
                              skip 
                         };
                         if(continue=0)   then 
                         {
                             tg_init_r:=sqrt(tg_init_r);
                             tg_init_cx2:=tg_init_cx2/ tg_init_r;
                             tg_init_cy2:=tg_init_cy2/ tg_init_r;
                             tg_init_cz2:=tg_init_cz2/ tg_init_r;
                             tg_init_dp:=tg_init_cx1*tg_init_cx2+tg_init_cy1*tg_init_cy2+tg_init_cz1*tg_init_cz2;
                             if(tg_init_dp>1.0) then 
                             {
                                 tg_init_dp:=1.0
                             }
                             else 
                             {
                                  skip 
                             };
                             if(tg_init_dp<-1.0) then 
                             {
                                 tg_init_dp:=-1.0
                             }
                             else 
                             {
                                  skip 
                             };
                             tg_init_dp:=acos(tg_init_dp);
                             tg_init_r:=tg_init_cx1*tg_init_x3+tg_init_cy1*tg_init_y3+tg_init_cz1*tg_init_z3;
                             if(tg_init_r>0) then 
                             {
                                 tg_init_dp:=-tg_init_dp
                             }
                             else 
                             {
                                  skip 
                             };
                             tg_init_r:=gl[tg_init_i]->base-tg_init_dp;
                             tg_d_apply(gl[tg_init_i],tg_init_r);
                             tg_init_j:=0;
                             
                             while(tg_init_j<gl[tg_init_i]->ingroup)
                             {
                                 tg_init_a1:=gl[tg_init_i]->group[tg_init_j];
                                 tg_init_a1->x:=tg_init_a1->dx;
                                 tg_init_a1->y:=tg_init_a1->dy;
                                 tg_init_a1->z:=tg_init_a1->dz;
                                 tg_init_j:=tg_init_j+1
                                 
                             };
                             tg_init_i:=tg_init_i;
                             tg_init_i:=tg_init_i-1
                         }
                         else
                         {
                             skip
                         }
                     }
                     else
                     {
                         skip
                     }
                 }
                 else
                 {
                     skip
                 }
             }
             else
             {
                 skip
             }
         }
         else
         {
             skip
         }
     };
     continue<==0 and skip
     )
     }; 
  function tg_do_search ( float *Vp,TGROUP **gl,int *bl,int igl,int ngl )
 {
     frame(tg_do_search_vl,tg_do_search_vb,tg_do_search_i,tg_do_search_ibest,tg_do_search_bestlist,tg_do_search_lbl,return) and ( 
     int return<==0 and skip;
     float tg_do_search_vl[24],tg_do_search_vb and skip;
     int tg_do_search_i,tg_do_search_ibest and skip;
     int tg_do_search_bestlist[24,8] and skip;
     int tg_do_search_lbl[8] and skip;
     if(igl=8) then 
     {
          return<==1 and skip
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         if(gl[igl]=NULL) then 
         {
              return<==1 and skip
         }
         else 
         {
              skip 
         };
         if(return=0)   then 
         {
             if(igl>ngl) then 
             {
                  return<==1 and skip
             }
             else 
             {
                  skip 
             };
             if(return=0)   then 
             {
                 tg_do_search_i:=0;
                 
                 while(tg_do_search_i<gl[igl]->ntry)
                 {
                     tg_do_search(&tg_do_search_vl[tg_do_search_i],gl,tg_do_search_lbl,igl+1,ngl);
                     tg_nonbon(&tg_do_search_vl[tg_do_search_i],gl[igl],RValue);
                     tg_do_search_ibest:=0;
                     
                     while(tg_do_search_ibest<8)
                     {
                         tg_do_search_bestlist[tg_do_search_i,tg_do_search_ibest]:=tg_do_search_lbl[tg_do_search_ibest];
                         tg_do_search_ibest:=tg_do_search_ibest+1
                         
                     };
                     if(gl[igl]->ntry>1) then 
                     {
                         tg_apply(gl[igl],1)
                         
                     }
                     else 
                     {
                          skip 
                     };
                     tg_do_search_i:=tg_do_search_i+1
                     
                 };
                 tg_do_search_vb:=10e20;
                 tg_do_search_ibest:=0;
                 tg_do_search_i:=0;
                 
                 while(tg_do_search_i<gl[igl]->ntry)
                 {
                     if(tg_do_search_vl[tg_do_search_i]<tg_do_search_vb) then 
                     {
                         tg_do_search_vb:=tg_do_search_vl[tg_do_search_i];
                         tg_do_search_ibest:=tg_do_search_i
                         
                     }
                     else 
                     {
                          skip 
                     };
                     tg_do_search_i:=tg_do_search_i+1
                     
                 };
                 tg_do_search_bestlist[tg_do_search_ibest,igl]:=tg_do_search_ibest;
                 tg_do_search_i:=0;
                 
                 while(tg_do_search_i<8)
                 {
                     bl[tg_do_search_i]:=tg_do_search_bestlist[tg_do_search_ibest,tg_do_search_i];
                     tg_do_search_i:=tg_do_search_i+1
                     
                 };
                 * Vp:=tg_do_search_vl[tg_do_search_ibest]
             }
             else
             {
                 skip
             }
         }
         else
         {
             skip
         }
     }
     else
     {
         skip
     }
     )
     }; 
  function tg_apply ( TGROUP *tgp,int num )
 {
     frame(tg_apply_nx,tg_apply_ny,tg_apply_nz,tg_apply_phi,tg_apply_cphi,tg_apply_sphi,tg_apply_rx,tg_apply_ry,tg_apply_rz,tg_apply_nnrx,tg_apply_nnry,tg_apply_nnrz,tg_apply_rnx,tg_apply_rny,tg_apply_rnz,tg_apply_b1,tg_apply_b2,tg_apply_i,return) and ( 
     int return<==0 and skip;
     float tg_apply_nx,tg_apply_ny,tg_apply_nz and skip;
     float tg_apply_phi,tg_apply_cphi,tg_apply_sphi and skip;
     float tg_apply_rx,tg_apply_ry,tg_apply_rz,tg_apply_nnrx,tg_apply_nnry,tg_apply_nnrz,tg_apply_rnx,tg_apply_rny,tg_apply_rnz and skip;
     ATOM *tg_apply_b1,*tg_apply_b2 and skip;
     int tg_apply_i and skip;
     tg_apply_b1:=tgp->b1;
     tg_apply_b2:=tgp->b2;
     tg_apply_nx:=tg_apply_b2->dx-tg_apply_b1->dx;
     tg_apply_ny:=tg_apply_b2->dy-tg_apply_b1->dy;
     tg_apply_nz:=tg_apply_b2->dz-tg_apply_b1->dz;
     tg_apply_rx:=sqrt(tg_apply_nx*tg_apply_nx+tg_apply_ny*tg_apply_ny+tg_apply_nz*tg_apply_nz);
     if(tg_apply_rx<1.e-6) then 
     {
         aaerror(" bad torsion radius in tg_apply \n");
          return<==1 and skip
         
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         tg_apply_nx:=tg_apply_nx/ tg_apply_rx;
         tg_apply_ny:=tg_apply_ny/ tg_apply_rx;
         tg_apply_nz:=tg_apply_nz/ tg_apply_rx;
         tg_apply_phi:=2.0*3.141592653589793/ (float)tgp->ntry*(float)num;
         tg_apply_cphi:=cos(tg_apply_phi);
         tg_apply_sphi:=sin(tg_apply_phi);
         tg_apply_i:=0;
         
         while(tg_apply_i<tgp->ingroup)
         {
             tg_apply_rx:=(tgp->group[tg_apply_i])->dx-tg_apply_b1->dx;
             tg_apply_ry:=(tgp->group[tg_apply_i])->dy-tg_apply_b1->dy;
             tg_apply_rz:=(tgp->group[tg_apply_i])->dz-tg_apply_b1->dz;
             tg_apply_phi:=tg_apply_nx*tg_apply_rx+tg_apply_ny*tg_apply_ry+tg_apply_nz*tg_apply_rz;
             tg_apply_nnrx:=tg_apply_phi*tg_apply_nx;
             tg_apply_nnry:=tg_apply_phi*tg_apply_ny;
             tg_apply_nnrz:=tg_apply_phi*tg_apply_nz;
             tg_apply_rnx:=tg_apply_ny*tg_apply_rz-tg_apply_nz*tg_apply_ry;
             tg_apply_rny:=-tg_apply_nx*tg_apply_rz+tg_apply_nz*tg_apply_rx;
             tg_apply_rnz:=tg_apply_nx*tg_apply_ry-tg_apply_ny*tg_apply_rx;
             tg_apply_phi:=(1.0-tg_apply_cphi);
             tg_apply_rx:=tg_apply_cphi*tg_apply_rx+tg_apply_phi*tg_apply_nnrx+tg_apply_sphi*tg_apply_rnx;
             tg_apply_ry:=tg_apply_cphi*tg_apply_ry+tg_apply_phi*tg_apply_nnry+tg_apply_sphi*tg_apply_rny;
             tg_apply_rz:=tg_apply_cphi*tg_apply_rz+tg_apply_phi*tg_apply_nnrz+tg_apply_sphi*tg_apply_rnz;
             (tgp->group[tg_apply_i])->dx:=tg_apply_rx+tg_apply_b1->dx;
             (tgp->group[tg_apply_i])->dy:=tg_apply_ry+tg_apply_b1->dy;
             (tgp->group[tg_apply_i])->dz:=tg_apply_rz+tg_apply_b1->dz;
             tg_apply_i:=tg_apply_i+1
             
         }
     }
     else
     {
         skip
     }
     )
     }; 
  function tg_d_apply ( TGROUP *tgp,float off )
 {
     frame(tg_d_apply_nx,tg_d_apply_ny,tg_d_apply_nz,tg_d_apply_phi,tg_d_apply_cphi,tg_d_apply_sphi,tg_d_apply_rx,tg_d_apply_ry,tg_d_apply_rz,tg_d_apply_nnrx,tg_d_apply_nnry,tg_d_apply_nnrz,tg_d_apply_rnx,tg_d_apply_rny,tg_d_apply_rnz,tg_d_apply_b1,tg_d_apply_b2,tg_d_apply_i,return) and ( 
     int return<==0 and skip;
     float tg_d_apply_nx,tg_d_apply_ny,tg_d_apply_nz and skip;
     float tg_d_apply_phi,tg_d_apply_cphi,tg_d_apply_sphi and skip;
     float tg_d_apply_rx,tg_d_apply_ry,tg_d_apply_rz,tg_d_apply_nnrx,tg_d_apply_nnry,tg_d_apply_nnrz,tg_d_apply_rnx,tg_d_apply_rny,tg_d_apply_rnz and skip;
     ATOM *tg_d_apply_b1,*tg_d_apply_b2 and skip;
     int tg_d_apply_i and skip;
     tg_d_apply_b1:=tgp->b1;
     tg_d_apply_b2:=tgp->b2;
     tg_d_apply_nx:=tg_d_apply_b2->dx-tg_d_apply_b1->dx;
     tg_d_apply_ny:=tg_d_apply_b2->dy-tg_d_apply_b1->dy;
     tg_d_apply_nz:=tg_d_apply_b2->dz-tg_d_apply_b1->dz;
     tg_d_apply_rx:=sqrt(tg_d_apply_nx*tg_d_apply_nx+tg_d_apply_ny*tg_d_apply_ny+tg_d_apply_nz*tg_d_apply_nz);
     if(tg_d_apply_rx<1.e-6) then 
     {
         aaerror(" bad torsion radius in tg_apply \n");
          return<==1 and skip
         
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         tg_d_apply_nx:=tg_d_apply_nx/ tg_d_apply_rx;
         tg_d_apply_ny:=tg_d_apply_ny/ tg_d_apply_rx;
         tg_d_apply_nz:=tg_d_apply_nz/ tg_d_apply_rx;
         tg_d_apply_phi:=off;
         tg_d_apply_cphi:=cos(tg_d_apply_phi);
         tg_d_apply_sphi:=sin(tg_d_apply_phi);
         tg_d_apply_i:=0;
         
         while(tg_d_apply_i<tgp->ingroup)
         {
             tg_d_apply_rx:=(tgp->group[tg_d_apply_i])->dx-tg_d_apply_b1->dx;
             tg_d_apply_ry:=(tgp->group[tg_d_apply_i])->dy-tg_d_apply_b1->dy;
             tg_d_apply_rz:=(tgp->group[tg_d_apply_i])->dz-tg_d_apply_b1->dz;
             tg_d_apply_phi:=tg_d_apply_nx*tg_d_apply_rx+tg_d_apply_ny*tg_d_apply_ry+tg_d_apply_nz*tg_d_apply_rz;
             tg_d_apply_nnrx:=tg_d_apply_phi*tg_d_apply_nx;
             tg_d_apply_nnry:=tg_d_apply_phi*tg_d_apply_ny;
             tg_d_apply_nnrz:=tg_d_apply_phi*tg_d_apply_nz;
             tg_d_apply_rnx:=tg_d_apply_ny*tg_d_apply_rz-tg_d_apply_nz*tg_d_apply_ry;
             tg_d_apply_rny:=-tg_d_apply_nx*tg_d_apply_rz+tg_d_apply_nz*tg_d_apply_rx;
             tg_d_apply_rnz:=tg_d_apply_nx*tg_d_apply_ry-tg_d_apply_ny*tg_d_apply_rx;
             tg_d_apply_phi:=(1.0-tg_d_apply_cphi);
             tg_d_apply_rx:=tg_d_apply_cphi*tg_d_apply_rx+tg_d_apply_phi*tg_d_apply_nnrx+tg_d_apply_sphi*tg_d_apply_rnx;
             tg_d_apply_ry:=tg_d_apply_cphi*tg_d_apply_ry+tg_d_apply_phi*tg_d_apply_nnry+tg_d_apply_sphi*tg_d_apply_rny;
             tg_d_apply_rz:=tg_d_apply_cphi*tg_d_apply_rz+tg_d_apply_phi*tg_d_apply_nnrz+tg_d_apply_sphi*tg_d_apply_rnz;
             (tgp->group[tg_d_apply_i])->dx:=tg_d_apply_rx+tg_d_apply_b1->dx;
             (tgp->group[tg_d_apply_i])->dy:=tg_d_apply_ry+tg_d_apply_b1->dy;
             (tgp->group[tg_d_apply_i])->dz:=tg_d_apply_rz+tg_d_apply_b1->dz;
             tg_d_apply_i:=tg_d_apply_i+1
             
         }
     }
     else
     {
         skip
     }
     )
     }; 
  function dump_tgroup ( FILE *where )
 {
     frame(dump_tgroup_tgp) and ( 
     TGROUP *dump_tgroup_tgp and skip;
     dump_tgroup_tgp:=tg_first;
     while(dump_tgroup_tgp!=NULL)
     {
         fprintf(where," tgroup %d %d %d %d %d %f %d ;\n",dump_tgroup_tgp->which,dump_tgroup_tgp->context->serial,dump_tgroup_tgp->b1->serial,dump_tgroup_tgp->b2->serial,dump_tgroup_tgp->b3->serial,dump_tgroup_tgp->base*180.0/ 3.141592653589793,dump_tgroup_tgp->ntry,RValue) and skip;
         dump_tgroup_tgp:=dump_tgroup_tgp->next$
     }
     )
     }; 
  function match_tgroup ( int i,TGROUP* RValue )
 {
     frame(match_tgroup_tgp,return) and ( 
     int return<==0 and skip;
     TGROUP *match_tgroup_tgp and skip;
     match_tgroup_tgp:=tg_first;
     while( return=0 AND  match_tgroup_tgp!=NULL)
     {
         if(match_tgroup_tgp->which=i) then 
         {
             if(match_tgroup_tgp->context=NULL) then 
             {
                 return<==1 and RValue:=NULL;
                 skip
             }
             else 
             {
                  skip 
             };
             if(return=0)   then 
             {
                 if(match_tgroup_tgp->b1=NULL) then 
                 {
                     return<==1 and RValue:=NULL;
                     skip
                 }
                 else 
                 {
                      skip 
                 };
                 if(return=0)   then 
                 {
                     if(match_tgroup_tgp->b2=NULL) then 
                     {
                         return<==1 and RValue:=NULL;
                         skip
                     }
                     else 
                     {
                          skip 
                     };
                     if(return=0)   then 
                     {
                         if(match_tgroup_tgp->b3=NULL) then 
                         {
                             return<==1 and RValue:=NULL;
                             skip
                         }
                         else 
                         {
                              skip 
                         };
                         if(return=0)   then 
                         {
                             return<==1 and RValue:=match_tgroup_tgp;
                             skip
                         }
                         else
                         {
                             skip
                         }
                     }
                     else
                     {
                         skip
                     }
                 }
                 else
                 {
                     skip
                 }
             }
             else
             {
                 skip
             }
             
         }
         else 
         {
              skip 
         };
         if(return=0)  then
         {
             if(return=0)   then 
             {
                 match_tgroup_tgp:=match_tgroup_tgp->next$
             }
             else
             {
                 skip
             }
         }
         else
         {
             skip
         }
     };
     if(return=0)   then 
     {
         return<==1 and RValue:=NULL;
         skip
     }
     else
     {
         skip
     }
     )
     }; 
  function tg_nonbon ( float *V,TGROUP *tgp,int RValue )
 {
     frame(tg_nonbon_ok,tg_nonbon_r,tg_nonbon_r0,tg_nonbon_xt,tg_nonbon_yt,tg_nonbon_zt,tg_nonbon_lcutoff,tg_nonbon_cutoff,tg_nonbon_inbond,tg_nonbon_inangle,tg_nonbon_i,tg_nonbon_ii,tg_nonbon_a1,tg_nonbon_a2,tg_nonbon_dielectric,tg_nonbon_ve,tg_nonbon_va,tg_nonbon_vh,return,break$,continue) and ( 
     int continue<==0 and skip;
     int break$<==0 and skip;
     int return<==0 and skip;
     int tg_nonbon_ok and skip;
     float tg_nonbon_r,tg_nonbon_r0,tg_nonbon_xt,tg_nonbon_yt,tg_nonbon_zt and skip;
     float tg_nonbon_lcutoff,tg_nonbon_cutoff and skip;
     int tg_nonbon_inbond,tg_nonbon_inangle,tg_nonbon_i,tg_nonbon_ii and skip;
     ATOM *tg_nonbon_a1,*tg_nonbon_a2 and skip;
     float tg_nonbon_dielectric,tg_nonbon_ve,tg_nonbon_va,tg_nonbon_vh and skip;
     tg_nonbon_dielectric:=get_f_variable("dielec",RValue);
     if(tg_nonbon_dielectric<1.0) then 
     {
         tg_nonbon_dielectric:=1.0
     }
     else 
     {
          skip 
     };
     tg_nonbon_dielectric:=332.17752/ tg_nonbon_dielectric;
     tg_nonbon_cutoff:=get_f_variable("cutoff",RValue);
     if(tg_nonbon_cutoff<1.0) then 
     {
         tg_nonbon_cutoff:=1.e10
     }
     else 
     {
          skip 
     };
     tg_nonbon_lcutoff:=-tg_nonbon_cutoff;
     * V:=0.0;
     if(tgp=NULL) then 
     {
         return<==1 and RValue:=1;
         skip
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         continue<==0 and skip;
         tg_nonbon_ii:=0;
         
         while(tg_nonbon_ii<=tgp->ingroup)
         {
              continue<==0 and skip;
             tg_nonbon_a1:=tgp->group[tg_nonbon_ii];
             if(tg_nonbon_a1=NULL) then 
             {
                 tg_nonbon_i:=tg_nonbon_i;
                 continue<==1 and skip;
                  tg_nonbon_ii:=tg_nonbon_ii+1
             }
             else 
             {
                  skip 
             };
             if(continue=0)   then 
             {
                 tg_nonbon_ve:=0.0;
                 tg_nonbon_va:=0.0;
                 tg_nonbon_vh:=0.0;
                 tg_nonbon_a2:=a_next(-1,RValue);
                 break$<==0 and skip;
                 while( break$=0 AND  (tg_nonbon_a2!=NULL) AND (tg_nonbon_a2->next$!=NULL) AND tg_nonbon_a2->next$!=tg_nonbon_a2)
                 {
                     continue<==0 and skip;
                     if(tg_nonbon_a2=tg_nonbon_a1) then 
                     {
                         if(tg_nonbon_a2->next$=tg_nonbon_a2) then 
                         {
                             break$<==1 and skip
                          }
                         else 
                         {
                              skip 
                         };
                         if(break$=0)   then
                         {
                             tg_nonbon_a2:=tg_nonbon_a2->next$;
                             continue<==1 and skip;
                              tg_nonbon_ii:=tg_nonbon_ii+1}
                             else
                             {
                                 skip
                             }
                             
                         }
                         else 
                         {
                              skip 
                         };
                         if(break$=0)   then 
                         {
                             if(continue=0)   then 
                             {
                                 tg_nonbon_ok:=0;
                                 break$<==0 and skip;
                                 tg_nonbon_i:=0;
                                 
                                 while( break$=0 AND  tg_nonbon_i<tg_nonbon_a1->dontuse)
                                 {
                                     if(tg_nonbon_a2=tg_nonbon_a1->excluded[tg_nonbon_i]) then 
                                     {
                                         tg_nonbon_ok:=1;
                                         break$<==1 and skip
                                          
                                     }
                                     else 
                                     {
                                          skip 
                                     };
                                     if(break$=0)   then
                                     {
                                         tg_nonbon_i:=tg_nonbon_i+1
                                     }
                                     else
                                     {
                                         skip
                                     }
                                     
                                 };
                                 break$<==0 and skip;
                                 if(tg_nonbon_ok=1) then 
                                 {
                                     if(tg_nonbon_a2->next$=tg_nonbon_a2) then 
                                     {
                                         break$<==1 and skip
                                      }
                                     else 
                                     {
                                          skip 
                                     };
                                     if(break$=0)   then
                                     {
                                         tg_nonbon_a2:=tg_nonbon_a2->next$;
                                         continue<==1 and skip;
                                          tg_nonbon_ii:=tg_nonbon_ii+1}
                                         else
                                         {
                                             skip
                                         }
                                         
                                     }
                                     else 
                                     {
                                          skip 
                                     };
                                     if(break$=0)   then 
                                     {
                                         if(continue=0)   then 
                                         {
                                             tg_nonbon_xt:=(tg_nonbon_a1->dx-tg_nonbon_a2->dx);
                                             if((tg_nonbon_xt>tg_nonbon_cutoff) OR (tg_nonbon_xt<tg_nonbon_lcutoff)) then 
                                             {
                                                 if(tg_nonbon_a2->next$=tg_nonbon_a2) then 
                                                 {
                                                     break$<==1 and skip
                                                  }
                                                 else 
                                                 {
                                                      skip 
                                                 };
                                                 if(break$=0)   then
                                                 {
                                                     tg_nonbon_a2:=tg_nonbon_a2->next$;
                                                     continue<==1 and skip;
                                                      tg_nonbon_ii:=tg_nonbon_ii+1}
                                                     else
                                                     {
                                                         skip
                                                     }
                                                     
                                                 }
                                                 else 
                                                 {
                                                      skip 
                                                 };
                                                 if(break$=0)   then 
                                                 {
                                                     if(continue=0)   then 
                                                     {
                                                         tg_nonbon_yt:=(tg_nonbon_a1->dy-tg_nonbon_a2->dy);
                                                         if((tg_nonbon_yt>tg_nonbon_cutoff) OR (tg_nonbon_yt<tg_nonbon_lcutoff)) then 
                                                         {
                                                             if(tg_nonbon_a2->next$=tg_nonbon_a2) then 
                                                             {
                                                                 break$<==1 and skip
                                                              }
                                                             else 
                                                             {
                                                                  skip 
                                                             };
                                                             if(break$=0)   then
                                                             {
                                                                 tg_nonbon_a2:=tg_nonbon_a2->next$;
                                                                 continue<==1 and skip;
                                                                  tg_nonbon_ii:=tg_nonbon_ii+1}
                                                                 else
                                                                 {
                                                                     skip
                                                                 }
                                                                 
                                                             }
                                                             else 
                                                             {
                                                                  skip 
                                                             };
                                                             if(break$=0)   then 
                                                             {
                                                                 if(continue=0)   then 
                                                                 {
                                                                     tg_nonbon_zt:=(tg_nonbon_a1->dz-tg_nonbon_a2->dz);
                                                                     if((tg_nonbon_zt>tg_nonbon_cutoff) OR (tg_nonbon_zt<tg_nonbon_lcutoff)) then 
                                                                     {
                                                                         if(tg_nonbon_a2->next$=tg_nonbon_a2) then 
                                                                         {
                                                                             break$<==1 and skip
                                                                          }
                                                                         else 
                                                                         {
                                                                              skip 
                                                                         };
                                                                         if(break$=0)   then
                                                                         {
                                                                             tg_nonbon_a2:=tg_nonbon_a2->next$;
                                                                             continue<==1 and skip;
                                                                              tg_nonbon_ii:=tg_nonbon_ii+1}
                                                                             else
                                                                             {
                                                                                 skip
                                                                             }
                                                                             
                                                                         }
                                                                         else 
                                                                         {
                                                                              skip 
                                                                         };
                                                                         if(break$=0)   then 
                                                                         {
                                                                             if(continue=0)   then 
                                                                             {
                                                                                 tg_nonbon_r:=tg_nonbon_xt*tg_nonbon_xt+tg_nonbon_yt*tg_nonbon_yt+tg_nonbon_zt*tg_nonbon_zt;
                                                                                 if(tg_nonbon_r<1.0) then 
                                                                                 {
                                                                                     tg_nonbon_r:=1.0
                                                                                 }
                                                                                 else 
                                                                                 {
                                                                                      skip 
                                                                                 };
                                                                                 tg_nonbon_r0:=sqrt(tg_nonbon_r);
                                                                                 tg_nonbon_r:=tg_nonbon_r*tg_nonbon_r*tg_nonbon_r;
                                                                                 tg_nonbon_ve:=tg_nonbon_ve+tg_nonbon_dielectric*tg_nonbon_a1->q*tg_nonbon_a2->q/ tg_nonbon_r0;
                                                                                 tg_nonbon_va:=tg_nonbon_va-tg_nonbon_a1->a*tg_nonbon_a2->a/ tg_nonbon_r;
                                                                                 tg_nonbon_vh:=tg_nonbon_vh+tg_nonbon_a1->b*tg_nonbon_a2->b/ tg_nonbon_r/ tg_nonbon_r;
                                                                                 if(tg_nonbon_a2->next$=tg_nonbon_a2) then 
                                                                                 {
                                                                                     break$<==1 and skip
                                                                                  }
                                                                                 else 
                                                                                 {
                                                                                      skip 
                                                                                 };
                                                                                 if(break$=0)   then
                                                                                 {
                                                                                     tg_nonbon_a2:=tg_nonbon_a2->next$
                                                                                 }
                                                                                 else
                                                                                 {
                                                                                     skip
                                                                                 }
                                                                             }
                                                                             else
                                                                             {
                                                                                 skip
                                                                             }
                                                                         }
                                                                         else
                                                                         {
                                                                             skip
                                                                         }
                                                                     }
                                                                     else
                                                                     {
                                                                         skip
                                                                     }
                                                                 }
                                                                 else
                                                                 {
                                                                     skip
                                                                 }
                                                             }
                                                             else
                                                             {
                                                                 skip
                                                             }
                                                         }
                                                         else
                                                         {
                                                             skip
                                                         }
                                                     }
                                                     else
                                                     {
                                                         skip
                                                     }
                                                 }
                                                 else
                                                 {
                                                     skip
                                                 }
                                             }
                                             else
                                             {
                                                 skip
                                             }
                                         }
                                         else
                                         {
                                             skip
                                         }
                                     };
                                     break$<==0 and skip;
                                     continue<==0 and skip;
                                     * V:=* V+tg_nonbon_ve+tg_nonbon_va+tg_nonbon_vh;
                                     tg_nonbon_i:=tg_nonbon_i;
                                     tg_nonbon_ii:=tg_nonbon_ii+1
                                 }
                                 else
                                 {
                                     skip
                                 }
                                 
                             };
                             continue<==0 and skip;
                             return<==1 and RValue:=1;
                             skip
                         }
                         else
                         {
                             skip
                         }
                         )
                         }; 
                          struct TORSION {
                         ATOM *atom1,*atom2,*atom3,*atom4 and 
                         float k,offset and 
                         int n and 
                         void *next$ 
                     };
                     TORSION *torsion_first<==NULL and skip;
                     TORSION *torsion_last<==NULL and skip;
 function torsion ( int p1,int p2,int p3,int p4,float fk,int n,float off,int RValue )
 {
     frame(torsion_new,torsion_ap1,torsion_ap2,torsion_ap3,torsion_ap4,torsion_line,return) and ( 
     int return<==0 and skip;
     TORSION *torsion_new and skip;
     ATOM *torsion_ap1,*torsion_ap2,*torsion_ap3,*torsion_ap4 and skip;
     char torsion_line[80] and skip;
     if(p1=p2 OR p1=p3 OR p1=p4 OR p2=p3 OR p2=p4 OR p3=p4) then 
     {
         sprintf(torsion_line," same atom in torsion %d %d %d %d \0",p1,p2,p3,p4,RValue) and skip;
         aaerror(torsion_line);
         return<==1 and RValue:=1;
         skip
         
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         if(fk=0.0) then 
         {
             return<==1 and RValue:=1;
             skip
         }
         else 
         {
              skip 
         };
         if(return=0)   then 
         {
             torsion_ap1:=a_m_serial(p1,RValue);
             torsion_ap2:=a_m_serial(p2,RValue);
             torsion_ap3:=a_m_serial(p3,RValue);
             torsion_ap4:=a_m_serial(p4,RValue);
             if((torsion_ap1=NULL) OR (torsion_ap2=NULL) OR (torsion_ap3=NULL) OR (torsion_ap4=NULL)) then 
             {
                 sprintf(torsion_line,"undefined atom in torsion %d %d %d %d \0",p1,p2,p3,p4,RValue) and skip;
                 aaerror(torsion_line);
                 return<==1 and RValue:=0;
                 skip
                 
             }
             else 
             {
                  skip 
             };
             if(return=0)   then 
             {
                 torsion_new:=malloc(sizeof(TORSION)) ;
                 if((torsion_new)=NULL) then 
                 {
                     return<==1 and RValue:=0;
                     skip
                     
                 }
                 else 
                 {
                      skip 
                 };
                 if(return=0)   then 
                 {
                     if(torsion_first=NULL) then 
                     {
                         torsion_first:=torsion_new
                     }
                     else 
                     {
                          skip 
                     };
                     if(torsion_last=NULL) then 
                     {
                         torsion_last:=torsion_new
                     }
                     else 
                     {
                          skip 
                     };
                     torsion_new->atom1:=torsion_ap1;
                     torsion_new->atom2:=torsion_ap2;
                     torsion_new->atom3:=torsion_ap3;
                     torsion_new->atom4:=torsion_ap4;
                     torsion_new->offset:=off;
                     torsion_new->k:=fk;
                     torsion_new->n:=n;
                     torsion_new->next$:=torsion_new;
                     torsion_last->next$:=torsion_new;
                     torsion_last:=torsion_new;
                     return<==1 and RValue:=1;
                     skip
                 }
                 else
                 {
                     skip
                 }
             }
             else
             {
                 skip
             }
         }
         else
         {
             skip
         }
     }
     else
     {
         skip
     }
     )
     }; 
  function v_torsion ( float *V,float lambda,int RValue )
 {
     frame(v_torsion_bp,v_torsion_x1,v_torsion_y1,v_torsion_z1,v_torsion_x2,v_torsion_y2,v_torsion_z2,v_torsion_x3,v_torsion_y3,v_torsion_z3,v_torsion_r,v_torsion_cx1,v_torsion_cy1,v_torsion_cz1,v_torsion_cx2,v_torsion_cy2,v_torsion_cz2,v_torsion_dp,v_torsion_a1,v_torsion_a2,v_torsion_a3,v_torsion_a4,return,continue) and ( 
     int continue<==0 and skip;
     int return<==0 and skip;
     TORSION *v_torsion_bp and skip;
     float v_torsion_x1,v_torsion_y1,v_torsion_z1,v_torsion_x2,v_torsion_y2,v_torsion_z2,v_torsion_x3,v_torsion_y3,v_torsion_z3 and skip;
     float v_torsion_r,v_torsion_cx1,v_torsion_cy1,v_torsion_cz1,v_torsion_cx2,v_torsion_cy2,v_torsion_cz2 and skip;
     float v_torsion_dp and skip;
     ATOM *v_torsion_a1,*v_torsion_a2,*v_torsion_a3,*v_torsion_a4 and skip;
     v_torsion_bp:=torsion_first;
     if(v_torsion_bp=NULL) then 
     {
         return<==1 and RValue:=1;
         skip
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         while( return=0 AND  1)
         {
             continue<==0 and skip;
             if(v_torsion_bp=NULL) then 
             {
                 return<==1 and RValue:=0;
                 skip
             }
             else 
             {
                  skip 
             };
             if(return=0)   then 
             {
                 v_torsion_a1:=v_torsion_bp->atom1;
                 v_torsion_a2:=v_torsion_bp->atom2;
                 v_torsion_a3:=v_torsion_bp->atom3;
                 v_torsion_a4:=v_torsion_bp->atom4;
                 if(v_torsion_a1->active OR v_torsion_a2->active OR v_torsion_a3->active OR v_torsion_a4->active) then 
                 {
                     v_torsion_x1:=(v_torsion_a1->x-v_torsion_a2->x+lambda*(v_torsion_a1->dx-v_torsion_a2->dx));
                     v_torsion_y1:=(v_torsion_a1->y-v_torsion_a2->y+lambda*(v_torsion_a1->dy-v_torsion_a2->dy));
                     v_torsion_z1:=(v_torsion_a1->z-v_torsion_a2->z+lambda*(v_torsion_a1->dz-v_torsion_a2->dz));
                     v_torsion_x2:=(v_torsion_a3->x-v_torsion_a2->x+lambda*(v_torsion_a3->dx-v_torsion_a2->dx));
                     v_torsion_y2:=(v_torsion_a3->y-v_torsion_a2->y+lambda*(v_torsion_a3->dy-v_torsion_a2->dy));
                     v_torsion_z2:=(v_torsion_a3->z-v_torsion_a2->z+lambda*(v_torsion_a3->dz-v_torsion_a2->dz));
                     v_torsion_x3:=(v_torsion_a4->x-v_torsion_a3->x+lambda*(v_torsion_a4->dx-v_torsion_a3->dx));
                     v_torsion_y3:=(v_torsion_a4->y-v_torsion_a3->y+lambda*(v_torsion_a4->dy-v_torsion_a3->dy));
                     v_torsion_z3:=(v_torsion_a4->z-v_torsion_a3->z+lambda*(v_torsion_a4->dz-v_torsion_a3->dz));
                     v_torsion_cx1:=v_torsion_y1*v_torsion_z2-v_torsion_y2*v_torsion_z1;
                     v_torsion_cy1:=-v_torsion_x1*v_torsion_z2+v_torsion_x2*v_torsion_z1;
                     v_torsion_cz1:=v_torsion_x1*v_torsion_y2-v_torsion_x2*v_torsion_y1;
                     v_torsion_r:=v_torsion_cx1*v_torsion_cx1+v_torsion_cy1*v_torsion_cy1+v_torsion_cz1*v_torsion_cz1;
                     if(v_torsion_r<1.e-8) then 
                     {
                         if(v_torsion_bp=v_torsion_bp->next$) then 
                         {
                             return<==1 and RValue:=1;
                             skip
                         }
                         else 
                         {
                              skip 
                         };
                         if(return=0)   then 
                         {
                             v_torsion_bp:=v_torsion_bp->next$;
                             continue<==1 and skip
                          }
                         else
                         {
                             skip
                         }
                     }
                     else
                     {
                         skip
                     }
                     
                 }
                 else 
                 {
                      skip 
                 };
                 if(continue=0)   then 
                 {
                     if(return=0)  then
                     {
                         v_torsion_r:=1/ sqrt(v_torsion_r);
                         v_torsion_cx1:=v_torsion_cx1*v_torsion_r;
                         v_torsion_cy1:=v_torsion_cy1*v_torsion_r;
                         v_torsion_cz1:=v_torsion_cz1*v_torsion_r;
                         v_torsion_cx2:=v_torsion_y3*v_torsion_z2-v_torsion_y2*v_torsion_z3;
                         v_torsion_cy2:=-v_torsion_x3*v_torsion_z2+v_torsion_x2*v_torsion_z3;
                         v_torsion_cz2:=v_torsion_x3*v_torsion_y2-v_torsion_x2*v_torsion_y3;
                         v_torsion_r:=v_torsion_cx2*v_torsion_cx2+v_torsion_cy2*v_torsion_cy2+v_torsion_cz2*v_torsion_cz2;
                         if(v_torsion_r<1.e-8) then 
                         {
                             if(v_torsion_bp=v_torsion_bp->next$) then 
                             {
                                 return<==1 and RValue:=1;
                                 skip
                             }
                             else 
                             {
                                  skip 
                             };
                             if(return=0)   then 
                             {
                                 v_torsion_bp:=v_torsion_bp->next$;
                                 continue<==1 and skip
                              }
                             else
                             {
                                 skip
                             }
                         }
                         else
                         {
                             skip
                         }
                         
                     }
                     else 
                     {
                          skip 
                     };
                     if(continue=0)   then 
                     {
                         if(return=0)  then
                         {
                             v_torsion_r:=1/ sqrt(v_torsion_r);
                             v_torsion_cx2:=v_torsion_cx2*v_torsion_r;
                             v_torsion_cy2:=v_torsion_cy2*v_torsion_r;
                             v_torsion_cz2:=v_torsion_cz2*v_torsion_r;
                             v_torsion_dp:=v_torsion_cx1*v_torsion_cx2+v_torsion_cy1*v_torsion_cy2+v_torsion_cz1*v_torsion_cz2;
                             if(v_torsion_dp>1.0) then 
                             {
                                 v_torsion_dp:=1.0
                             }
                             else 
                             {
                                  skip 
                             };
                             if(v_torsion_dp<-1.0) then 
                             {
                                 v_torsion_dp:=-1.0
                             }
                             else 
                             {
                                  skip 
                             };
                             v_torsion_dp:=acos(v_torsion_dp);
                             v_torsion_r:=v_torsion_cx1*v_torsion_x3+v_torsion_cy1*v_torsion_y3+v_torsion_cz1*v_torsion_z3;
                             if(v_torsion_r>0) then 
                             {
                                 v_torsion_dp:=-v_torsion_dp
                             }
                             else 
                             {
                                  skip 
                             };
                             * V:=* V+0.5*(v_torsion_bp->k)*(1.0+cos(v_torsion_bp->n*v_torsion_dp-v_torsion_bp->offset))
                         }
                         else
                         {
                             skip
                         }
                     }
                     else
                     {
                         skip
                     }
                 }
                 else
                 {
                     skip
                 }
                 
             }
             else 
             {
                  skip 
             };
             if(continue=0)  then
             {
                 if(return=0)  then
                 {
                     if(v_torsion_bp=v_torsion_bp->next$) then 
                     {
                         return<==1 and RValue:=1;
                         skip
                     }
                     else 
                     {
                          skip 
                     };
                     if(return=0)   then 
                     {
                         v_torsion_bp:=v_torsion_bp->next$
                     }
                     else
                     {
                         skip
                     }
                 }
                 else
                 {
                     skip
                 }
             }
             else
             {
                 skip
             }
         };
         continue<==0 and skip
     }
     else
     {
         skip
     }
     )
     }; 
  function f_torsion ( float lambda,int RValue )
 {
     frame(f_torsion_bp,f_torsion_x1,f_torsion_y1,f_torsion_z1,f_torsion_x2,f_torsion_y2,f_torsion_z2,f_torsion_x3,f_torsion_y3,f_torsion_z3,f_torsion_r,f_torsion_cx1,f_torsion_cy1,f_torsion_cz1,f_torsion_cx2,f_torsion_cy2,f_torsion_cz2,f_torsion_dp,f_torsion_sdp,f_torsion_r1,f_torsion_r2,f_torsion_r3,f_torsion_c1,f_torsion_c2,f_torsion_s1,f_torsion_s2,f_torsion_ux,f_torsion_uy,f_torsion_uz,f_torsion_i,f_torsion_a1,f_torsion_a2,f_torsion_a3,f_torsion_a4,return,continue) and ( 
     int continue<==0 and skip;
     int return<==0 and skip;
     TORSION *f_torsion_bp and skip;
     float f_torsion_x1,f_torsion_y1,f_torsion_z1,f_torsion_x2,f_torsion_y2,f_torsion_z2,f_torsion_x3,f_torsion_y3,f_torsion_z3 and skip;
     float f_torsion_r,f_torsion_cx1,f_torsion_cy1,f_torsion_cz1,f_torsion_cx2,f_torsion_cy2,f_torsion_cz2 and skip;
     float f_torsion_dp,f_torsion_sdp and skip;
     float f_torsion_r1,f_torsion_r2,f_torsion_r3,f_torsion_c1,f_torsion_c2,f_torsion_s1,f_torsion_s2 and skip;
     float f_torsion_ux,f_torsion_uy,f_torsion_uz and skip;
     int f_torsion_i and skip;
     ATOM *f_torsion_a1,*f_torsion_a2,*f_torsion_a3,*f_torsion_a4 and skip;
     f_torsion_bp:=torsion_first;
     if(f_torsion_bp=NULL) then 
     {
         return<==1 and RValue:=1;
         skip
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         f_torsion_i:=0;
         while( return=0 AND  1)
         {
             continue<==0 and skip;
             if(f_torsion_bp=NULL) then 
             {
                 return<==1 and RValue:=0;
                 skip
             }
             else 
             {
                  skip 
             };
             if(return=0)   then 
             {
                 f_torsion_a1:=f_torsion_bp->atom1;
                 f_torsion_a2:=f_torsion_bp->atom2;
                 f_torsion_a3:=f_torsion_bp->atom3;
                 f_torsion_a4:=f_torsion_bp->atom4;
                 if(f_torsion_a1->active OR f_torsion_a2->active OR f_torsion_a3->active OR f_torsion_a4->active) then 
                 {
                     f_torsion_x1:=(f_torsion_a1->x-f_torsion_a2->x+lambda*(f_torsion_a1->dx-f_torsion_a2->dx));
                     f_torsion_y1:=(f_torsion_a1->y-f_torsion_a2->y+lambda*(f_torsion_a1->dy-f_torsion_a2->dy));
                     f_torsion_z1:=(f_torsion_a1->z-f_torsion_a2->z+lambda*(f_torsion_a1->dz-f_torsion_a2->dz));
                     f_torsion_x2:=(f_torsion_a3->x-f_torsion_a2->x+lambda*(f_torsion_a3->dx-f_torsion_a2->dx));
                     f_torsion_y2:=(f_torsion_a3->y-f_torsion_a2->y+lambda*(f_torsion_a3->dy-f_torsion_a2->dy));
                     f_torsion_z2:=(f_torsion_a3->z-f_torsion_a2->z+lambda*(f_torsion_a3->dz-f_torsion_a2->dz));
                     f_torsion_x3:=(f_torsion_a4->x-f_torsion_a3->x+lambda*(f_torsion_a4->dx-f_torsion_a3->dx));
                     f_torsion_y3:=(f_torsion_a4->y-f_torsion_a3->y+lambda*(f_torsion_a4->dy-f_torsion_a3->dy));
                     f_torsion_z3:=(f_torsion_a4->z-f_torsion_a3->z+lambda*(f_torsion_a4->dz-f_torsion_a3->dz));
                     f_torsion_r1:=sqrt(f_torsion_x1*f_torsion_x1+f_torsion_y1*f_torsion_y1+f_torsion_z1*f_torsion_z1);
                     f_torsion_r2:=sqrt(f_torsion_x2*f_torsion_x2+f_torsion_y2*f_torsion_y2+f_torsion_z2*f_torsion_z2);
                     f_torsion_r3:=sqrt(f_torsion_x3*f_torsion_x3+f_torsion_y3*f_torsion_y3+f_torsion_z3*f_torsion_z3);
                     f_torsion_c1:=(f_torsion_x1*f_torsion_x2+f_torsion_y1*f_torsion_y2+f_torsion_z1*f_torsion_z2)/ f_torsion_r1/ f_torsion_r2;
                     f_torsion_c2:=-(f_torsion_x2*f_torsion_x3+f_torsion_y2*f_torsion_y3+f_torsion_z2*f_torsion_z3)/ f_torsion_r2/ f_torsion_r3;
                     f_torsion_s1:=(1.0-f_torsion_c1*f_torsion_c1);
                     f_torsion_s2:=(1.0-f_torsion_c2*f_torsion_c2);
                     if(f_torsion_s1<1.e-8) then 
                     {
                         if(f_torsion_bp=f_torsion_bp->next$) then 
                         {
                             return<==1 and RValue:=1;
                             skip
                         }
                         else 
                         {
                              skip 
                         };
                         if(return=0)   then 
                         {
                             f_torsion_bp:=f_torsion_bp->next$;
                             continue<==1 and skip
                          }
                         else
                         {
                             skip
                         }
                     }
                     else
                     {
                         skip
                     }
                     
                 }
                 else 
                 {
                      skip 
                 };
                 if(continue=0)   then 
                 {
                     if(return=0)  then
                     {
                         if(f_torsion_s2<1.e-8) then 
                         {
                             if(f_torsion_bp=f_torsion_bp->next$) then 
                             {
                                 return<==1 and RValue:=1;
                                 skip
                             }
                             else 
                             {
                                  skip 
                             };
                             if(return=0)   then 
                             {
                                 f_torsion_bp:=f_torsion_bp->next$;
                                 continue<==1 and skip
                              }
                             else
                             {
                                 skip
                             }
                         }
                         else
                         {
                             skip
                         }
                         
                     }
                     else 
                     {
                          skip 
                     };
                     if(continue=0)   then 
                     {
                         if(return=0)  then
                         {
                             f_torsion_cx1:=f_torsion_y1*f_torsion_z2-f_torsion_y2*f_torsion_z1;
                             f_torsion_cy1:=-f_torsion_x1*f_torsion_z2+f_torsion_x2*f_torsion_z1;
                             f_torsion_cz1:=f_torsion_x1*f_torsion_y2-f_torsion_x2*f_torsion_y1;
                             f_torsion_r:=f_torsion_cx1*f_torsion_cx1+f_torsion_cy1*f_torsion_cy1+f_torsion_cz1*f_torsion_cz1;
                             if(f_torsion_r<1.e-8) then 
                             {
                                 if(f_torsion_bp=f_torsion_bp->next$) then 
                                 {
                                     return<==1 and RValue:=1;
                                     skip
                                 }
                                 else 
                                 {
                                      skip 
                                 };
                                 if(return=0)   then 
                                 {
                                     f_torsion_bp:=f_torsion_bp->next$;
                                     continue<==1 and skip
                                  }
                                 else
                                 {
                                     skip
                                 }
                             }
                             else
                             {
                                 skip
                             }
                             
                         }
                         else 
                         {
                              skip 
                         };
                         if(continue=0)   then 
                         {
                             if(return=0)  then
                             {
                                 f_torsion_r:=1/ sqrt(f_torsion_r);
                                 f_torsion_cx1:=f_torsion_cx1*f_torsion_r;
                                 f_torsion_cy1:=f_torsion_cy1*f_torsion_r;
                                 f_torsion_cz1:=f_torsion_cz1*f_torsion_r;
                                 f_torsion_cx2:=f_torsion_y3*f_torsion_z2-f_torsion_y2*f_torsion_z3;
                                 f_torsion_cy2:=-f_torsion_x3*f_torsion_z2+f_torsion_x2*f_torsion_z3;
                                 f_torsion_cz2:=f_torsion_x3*f_torsion_y2-f_torsion_x2*f_torsion_y3;
                                 f_torsion_r:=f_torsion_cx2*f_torsion_cx2+f_torsion_cy2*f_torsion_cy2+f_torsion_cz2*f_torsion_cz2;
                                 if(f_torsion_r<1.e-8) then 
                                 {
                                     if(f_torsion_bp=f_torsion_bp->next$) then 
                                     {
                                         return<==1 and RValue:=1;
                                         skip
                                     }
                                     else 
                                     {
                                          skip 
                                     };
                                     if(return=0)   then 
                                     {
                                         f_torsion_bp:=f_torsion_bp->next$;
                                         continue<==1 and skip
                                      }
                                     else
                                     {
                                         skip
                                     }
                                 }
                                 else
                                 {
                                     skip
                                 }
                                 
                             }
                             else 
                             {
                                  skip 
                             };
                             if(continue=0)   then 
                             {
                                 if(return=0)  then
                                 {
                                     f_torsion_r:=1/ sqrt(f_torsion_r);
                                     f_torsion_cx2:=f_torsion_cx2*f_torsion_r;
                                     f_torsion_cy2:=f_torsion_cy2*f_torsion_r;
                                     f_torsion_cz2:=f_torsion_cz2*f_torsion_r;
                                     f_torsion_dp:=f_torsion_cx1*f_torsion_cx2+f_torsion_cy1*f_torsion_cy2+f_torsion_cz1*f_torsion_cz2;
                                     if(f_torsion_dp>1.0) then 
                                     {
                                         f_torsion_dp:=1.0
                                     }
                                     else 
                                     {
                                          skip 
                                     };
                                     if(f_torsion_dp<-1.0) then 
                                     {
                                         f_torsion_dp:=-1.0
                                     }
                                     else 
                                     {
                                          skip 
                                     };
                                     f_torsion_dp:=acos(f_torsion_dp);
                                     f_torsion_r:=sqrt(f_torsion_x3*f_torsion_x3+f_torsion_y3*f_torsion_y3+f_torsion_z3*f_torsion_z3)*sqrt(f_torsion_x2*f_torsion_x2+f_torsion_y2*f_torsion_y2+f_torsion_z2*f_torsion_z2);
                                     f_torsion_sdp:=f_torsion_x3*f_torsion_x2+f_torsion_y3*f_torsion_y2+f_torsion_z3*f_torsion_z2;
                                     f_torsion_sdp:=f_torsion_sdp/ f_torsion_r;
                                     f_torsion_ux:=f_torsion_x3-f_torsion_sdp*f_torsion_x2;
                                     f_torsion_uy:=f_torsion_y3-f_torsion_sdp*f_torsion_y2;
                                     f_torsion_uz:=f_torsion_z3-f_torsion_sdp*f_torsion_z2;
                                     f_torsion_r:=f_torsion_cx1*f_torsion_ux+f_torsion_cy1*f_torsion_uy+f_torsion_cz1*f_torsion_uz;
                                     if(f_torsion_r>=0) then 
                                     {
                                         f_torsion_dp:=-f_torsion_dp
                                     }
                                     else 
                                     {
                                          skip 
                                     };
                                     f_torsion_r:=-0.5*f_torsion_bp->k*f_torsion_bp->n*sin(f_torsion_bp->n*f_torsion_dp-f_torsion_bp->offset);
                                     f_torsion_s1:=1/ f_torsion_s1;
                                     f_torsion_s2:=1/ f_torsion_s2;
                                     if(f_torsion_a1->active) then 
                                     {
                                         f_torsion_a1->fx:=f_torsion_a1->fx-f_torsion_r*f_torsion_cx1/ f_torsion_r1*f_torsion_s1;
                                         f_torsion_a1->fy:=f_torsion_a1->fy-f_torsion_r*f_torsion_cy1/ f_torsion_r1*f_torsion_s1;
                                         f_torsion_a1->fz:=f_torsion_a1->fz-f_torsion_r*f_torsion_cz1/ f_torsion_r1*f_torsion_s1
                                         
                                     }
                                     else 
                                     {
                                          skip 
                                     };
                                     if(f_torsion_a2->active) then 
                                     {
                                         f_torsion_a2->fx:=f_torsion_a2->fx+f_torsion_r*f_torsion_cx1*(f_torsion_r2-f_torsion_c1*f_torsion_r1)/ f_torsion_r2/ f_torsion_r1*f_torsion_s1;
                                         f_torsion_a2->fy:=f_torsion_a2->fy+f_torsion_r*f_torsion_cy1*(f_torsion_r2-f_torsion_c1*f_torsion_r1)/ f_torsion_r2/ f_torsion_r1*f_torsion_s1;
                                         f_torsion_a2->fz:=f_torsion_a2->fz+f_torsion_r*f_torsion_cz1*(f_torsion_r2-f_torsion_c1*f_torsion_r1)/ f_torsion_r2/ f_torsion_r1*f_torsion_s1;
                                         f_torsion_a2->fx:=f_torsion_a2->fx-f_torsion_r*f_torsion_cx2*f_torsion_c2/ f_torsion_r2*f_torsion_s2;
                                         f_torsion_a2->fy:=f_torsion_a2->fy-f_torsion_r*f_torsion_cy2*f_torsion_c2/ f_torsion_r2*f_torsion_s2;
                                         f_torsion_a2->fz:=f_torsion_a2->fz-f_torsion_r*f_torsion_cz2*f_torsion_c2/ f_torsion_r2*f_torsion_s2
                                         
                                     }
                                     else 
                                     {
                                          skip 
                                     };
                                     if(f_torsion_a3->active) then 
                                     {
                                         f_torsion_a3->fx:=f_torsion_a3->fx-f_torsion_r*f_torsion_cx2*(f_torsion_r2-f_torsion_c2*f_torsion_r3)/ f_torsion_r2/ f_torsion_r3*f_torsion_s2;
                                         f_torsion_a3->fy:=f_torsion_a3->fy-f_torsion_r*f_torsion_cy2*(f_torsion_r2-f_torsion_c2*f_torsion_r3)/ f_torsion_r2/ f_torsion_r3*f_torsion_s2;
                                         f_torsion_a3->fz:=f_torsion_a3->fz-f_torsion_r*f_torsion_cz2*(f_torsion_r2-f_torsion_c2*f_torsion_r3)/ f_torsion_r2/ f_torsion_r3*f_torsion_s2;
                                         f_torsion_a3->fx:=f_torsion_a3->fx+f_torsion_r*f_torsion_cx1*f_torsion_c1/ f_torsion_r2*f_torsion_s1;
                                         f_torsion_a3->fy:=f_torsion_a3->fy+f_torsion_r*f_torsion_cy1*f_torsion_c1/ f_torsion_r2*f_torsion_s1;
                                         f_torsion_a3->fz:=f_torsion_a3->fz+f_torsion_r*f_torsion_cz1*f_torsion_c1/ f_torsion_r2*f_torsion_s1
                                         
                                     }
                                     else 
                                     {
                                          skip 
                                     };
                                     if(f_torsion_a4->active) then 
                                     {
                                         f_torsion_a4->fx:=f_torsion_a4->fx+f_torsion_r*f_torsion_cx2/ f_torsion_r3*f_torsion_s2;
                                         f_torsion_a4->fy:=f_torsion_a4->fy+f_torsion_r*f_torsion_cy2/ f_torsion_r3*f_torsion_s2;
                                         f_torsion_a4->fz:=f_torsion_a4->fz+f_torsion_r*f_torsion_cz2/ f_torsion_r3*f_torsion_s2
                                         
                                     }
                                     else 
                                     {
                                          skip 
                                     }
                                 }
                                 else
                                 {
                                     skip
                                 }
                             }
                             else
                             {
                                 skip
                             }
                         }
                         else
                         {
                             skip
                         }
                     }
                     else
                     {
                         skip
                     }
                 }
                 else
                 {
                     skip
                 }
                 
             }
             else 
             {
                  skip 
             };
             if(continue=0)  then
             {
                 if(return=0)  then
                 {
                     if(f_torsion_bp=f_torsion_bp->next$) then 
                     {
                         return<==1 and RValue:=1;
                         skip
                     }
                     else 
                     {
                          skip 
                     };
                     if(return=0)   then 
                     {
                         f_torsion_bp:=f_torsion_bp->next$
                     }
                     else
                     {
                         skip
                     }
                 }
                 else
                 {
                     skip
                 }
             }
             else
             {
                 skip
             }
         };
         continue<==0 and skip
     }
     else
     {
         skip
     }
     )
     }; 
  function get_torsion ( ATOM *a1,ATOM **bonded,int mbond,int *inbond )
 {
     frame(get_torsion_mine,return) and ( 
     int return<==0 and skip;
     TORSION *get_torsion_mine and skip;
     get_torsion_mine:=torsion_first;
     * inbond:=0;
     while( return=0 AND  1)
     {
         if((get_torsion_mine=NULL)) then 
         {
              return<==1 and skip
             
         }
         else 
         {
              skip 
         };
         if(return=0)   then 
         {
             if(get_torsion_mine->atom1=a1) then 
             {
                 bonded[(* inbond)]:=get_torsion_mine->atom4;
                 (* inbond):=(* inbond)+1
                 
             }
             else 
             {
                  skip 
             };
             if(get_torsion_mine->atom4=a1) then 
             {
                 bonded[(* inbond)]:=get_torsion_mine->atom1;
                 (* inbond):=(* inbond)+1
                 
             }
             else 
             {
                  skip 
             };
             if(get_torsion_mine=get_torsion_mine->next$) then 
             {
                  return<==1 and skip
             }
             else 
             {
                  skip 
             };
             if(return=0)   then 
             {
                 get_torsion_mine:=get_torsion_mine->next$;
                 if(* inbond=mbond) then 
                 {
                      return<==1 and skip
                 }
                 else 
                 {
                      skip 
                 }
             }
             else
             {
                 skip
             }
         }
         else
         {
             skip
         }
     }
     )
     }; 
  function dump_torsions ( FILE *where )
 {
     frame(dump_torsions_b,dump_torsions_a1,dump_torsions_a2,dump_torsions_a3,dump_torsions_a4,dump_torsions_rtodeg,return) and ( 
     int return<==0 and skip;
     TORSION *dump_torsions_b and skip;
     ATOM *dump_torsions_a1,*dump_torsions_a2,*dump_torsions_a3,*dump_torsions_a4 and skip;
     float dump_torsions_rtodeg and skip;
     dump_torsions_b:=torsion_first;
     if(dump_torsions_b=NULL) then 
     {
          return<==1 and skip
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         dump_torsions_rtodeg:=180.0/ acos(-1.0);
         while( return=0 AND  (dump_torsions_b->next$!=dump_torsions_b))
         {
             if(dump_torsions_b->next$=NULL) then 
             {
                  return<==1 and skip
             }
             else 
             {
                  skip 
             };
             if(return=0)   then 
             {
                 dump_torsions_a1:=dump_torsions_b->atom1;
                 dump_torsions_a2:=dump_torsions_b->atom2;
                 dump_torsions_a3:=dump_torsions_b->atom3;
                 dump_torsions_a4:=dump_torsions_b->atom4;
                 fprintf(where,"torsion %d %d %d %d %f %d %f ;\n",dump_torsions_a1->serial,dump_torsions_a2->serial,dump_torsions_a3->serial,dump_torsions_a4->serial,dump_torsions_b->k,dump_torsions_b->n,dump_torsions_b->offset*dump_torsions_rtodeg,RValue) and skip;
                 dump_torsions_b:=dump_torsions_b->next$
             }
             else
             {
                 skip
             }
         };
         if(return=0)   then 
         {
             if(dump_torsions_b->next$=NULL) then 
             {
                  return<==1 and skip
             }
             else 
             {
                  skip 
             };
             if(return=0)   then 
             {
                 dump_torsions_a1:=dump_torsions_b->atom1;
                 dump_torsions_a2:=dump_torsions_b->atom2;
                 dump_torsions_a3:=dump_torsions_b->atom3;
                 dump_torsions_a4:=dump_torsions_b->atom4;
                 fprintf(where,"torsion %d %d %d %d %f %d %f ;\n",dump_torsions_a1->serial,dump_torsions_a2->serial,dump_torsions_a3->serial,dump_torsions_a4->serial,dump_torsions_b->k,dump_torsions_b->n,dump_torsions_b->offset*dump_torsions_rtodeg,RValue) and skip
             }
             else
             {
                 skip
             }
         }
         else
         {
             skip
         }
     }
     else
     {
         skip
     }
     )
     }; 
  function a_torsion ( float *V,float lambda,int ilow,int ihigh,FILE *op,int RValue )
 {
     frame(a_torsion_bp,a_torsion_x1,a_torsion_y1,a_torsion_z1,a_torsion_x2,a_torsion_y2,a_torsion_z2,a_torsion_x3,a_torsion_y3,a_torsion_z3,a_torsion_r,a_torsion_cx1,a_torsion_cy1,a_torsion_cz1,a_torsion_cx2,a_torsion_cy2,a_torsion_cz2,a_torsion_dp,a_torsion_a1,a_torsion_a2,a_torsion_a3,a_torsion_a4,a_torsion_2_4_temp$_1,a_torsion_2_4_temp$_2,return,continue) and ( 
     int continue<==0 and skip;
     int return<==0 and skip;
     TORSION *a_torsion_bp and skip;
     float a_torsion_x1,a_torsion_y1,a_torsion_z1,a_torsion_x2,a_torsion_y2,a_torsion_z2,a_torsion_x3,a_torsion_y3,a_torsion_z3 and skip;
     float a_torsion_r,a_torsion_cx1,a_torsion_cy1,a_torsion_cz1,a_torsion_cx2,a_torsion_cy2,a_torsion_cz2 and skip;
     float a_torsion_dp and skip;
     ATOM *a_torsion_a1,*a_torsion_a2,*a_torsion_a3,*a_torsion_a4 and skip;
     a_torsion_bp:=torsion_first;
     if(a_torsion_bp=NULL) then 
     {
         return<==1 and RValue:=1;
         skip
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         while( return=0 AND  1)
         {
             continue<==0 and skip;
             if(a_torsion_bp=NULL) then 
             {
                 return<==1 and RValue:=0;
                 skip
             }
             else 
             {
                  skip 
             };
             if(return=0)   then 
             {
                 a_torsion_a1:=a_torsion_bp->atom1;
                 a_torsion_a2:=a_torsion_bp->atom2;
                 a_torsion_a3:=a_torsion_bp->atom3;
                 a_torsion_a4:=a_torsion_bp->atom4;
                 if((a_torsion_a1->serial>=ilow AND a_torsion_a1->serial<=ihigh) OR (a_torsion_a2->serial>=ilow AND a_torsion_a2->serial<=ihigh) OR (a_torsion_a3->serial>=ilow AND a_torsion_a3->serial<=ihigh) OR (a_torsion_a4->serial>=ilow AND a_torsion_a4->serial<=ihigh)) then 
                 {
                     a_torsion_x1:=(a_torsion_a1->x-a_torsion_a2->x+lambda*(a_torsion_a1->dx-a_torsion_a2->dx));
                     a_torsion_y1:=(a_torsion_a1->y-a_torsion_a2->y+lambda*(a_torsion_a1->dy-a_torsion_a2->dy));
                     a_torsion_z1:=(a_torsion_a1->z-a_torsion_a2->z+lambda*(a_torsion_a1->dz-a_torsion_a2->dz));
                     a_torsion_x2:=(a_torsion_a3->x-a_torsion_a2->x+lambda*(a_torsion_a3->dx-a_torsion_a2->dx));
                     a_torsion_y2:=(a_torsion_a3->y-a_torsion_a2->y+lambda*(a_torsion_a3->dy-a_torsion_a2->dy));
                     a_torsion_z2:=(a_torsion_a3->z-a_torsion_a2->z+lambda*(a_torsion_a3->dz-a_torsion_a2->dz));
                     a_torsion_x3:=(a_torsion_a4->x-a_torsion_a3->x+lambda*(a_torsion_a4->dx-a_torsion_a3->dx));
                     a_torsion_y3:=(a_torsion_a4->y-a_torsion_a3->y+lambda*(a_torsion_a4->dy-a_torsion_a3->dy));
                     a_torsion_z3:=(a_torsion_a4->z-a_torsion_a3->z+lambda*(a_torsion_a4->dz-a_torsion_a3->dz));
                     a_torsion_cx1:=a_torsion_y1*a_torsion_z2-a_torsion_y2*a_torsion_z1;
                     a_torsion_cy1:=-a_torsion_x1*a_torsion_z2+a_torsion_x2*a_torsion_z1;
                     a_torsion_cz1:=a_torsion_x1*a_torsion_y2-a_torsion_x2*a_torsion_y1;
                     a_torsion_r:=a_torsion_cx1*a_torsion_cx1+a_torsion_cy1*a_torsion_cy1+a_torsion_cz1*a_torsion_cz1;
                     if(a_torsion_r<1.e-8) then 
                     {
                         if(a_torsion_bp=a_torsion_bp->next$) then 
                         {
                             return<==1 and RValue:=1;
                             skip
                         }
                         else 
                         {
                              skip 
                         };
                         if(return=0)   then 
                         {
                             a_torsion_bp:=a_torsion_bp->next$;
                             continue<==1 and skip
                          }
                         else
                         {
                             skip
                         }
                     }
                     else
                     {
                         skip
                     }
                     
                 }
                 else 
                 {
                      skip 
                 };
                 if(continue=0)   then 
                 {
                     if(return=0)  then
                     {
                         a_torsion_r:=sqrt(a_torsion_r);
                         a_torsion_cx1:=a_torsion_cx1/ a_torsion_r;
                         a_torsion_cy1:=a_torsion_cy1/ a_torsion_r;
                         a_torsion_cz1:=a_torsion_cz1/ a_torsion_r;
                         a_torsion_cx2:=a_torsion_y3*a_torsion_z2-a_torsion_y2*a_torsion_z3;
                         a_torsion_cy2:=-a_torsion_x3*a_torsion_z2+a_torsion_x2*a_torsion_z3;
                         a_torsion_cz2:=a_torsion_x3*a_torsion_y2-a_torsion_x2*a_torsion_y3;
                         a_torsion_r:=a_torsion_cx2*a_torsion_cx2+a_torsion_cy2*a_torsion_cy2+a_torsion_cz2*a_torsion_cz2;
                         if(a_torsion_r<1.e-8) then 
                         {
                             if(a_torsion_bp=a_torsion_bp->next$) then 
                             {
                                 return<==1 and RValue:=1;
                                 skip
                             }
                             else 
                             {
                                  skip 
                             };
                             if(return=0)   then 
                             {
                                 a_torsion_bp:=a_torsion_bp->next$;
                                 continue<==1 and skip
                              }
                             else
                             {
                                 skip
                             }
                         }
                         else
                         {
                             skip
                         }
                         
                     }
                     else 
                     {
                          skip 
                     };
                     if(continue=0)   then 
                     {
                         if(return=0)  then
                         {
                             a_torsion_r:=sqrt(a_torsion_r);
                             a_torsion_cx2:=a_torsion_cx2/ a_torsion_r;
                             a_torsion_cy2:=a_torsion_cy2/ a_torsion_r;
                             a_torsion_cz2:=a_torsion_cz2/ a_torsion_r;
                             a_torsion_dp:=a_torsion_cx1*a_torsion_cx2+a_torsion_cy1*a_torsion_cy2+a_torsion_cz1*a_torsion_cz2;
                             if(a_torsion_dp>1.0) then 
                             {
                                 a_torsion_dp:=1.0
                             }
                             else 
                             {
                                  skip 
                             };
                             if(a_torsion_dp<-1.0) then 
                             {
                                 a_torsion_dp:=-1.0
                             }
                             else 
                             {
                                  skip 
                             };
                             a_torsion_dp:=acos(a_torsion_dp);
                             a_torsion_r:=a_torsion_cx1*a_torsion_x3+a_torsion_cy1*a_torsion_y3+a_torsion_cz1*a_torsion_z3;
                             if(a_torsion_r>0) then 
                             {
                                 a_torsion_dp:=-a_torsion_dp
                             }
                             else 
                             {
                                  skip 
                             };
                             a_torsion_z2:=0.5*(a_torsion_bp->k)*(1.0+cos(a_torsion_bp->n*a_torsion_dp-a_torsion_bp->offset));
                             * V:=* V+a_torsion_z2;
                             int a_torsion_2_4_temp$_1 and skip;
                             a_torsion_2_4_temp$_1:=cos(a_torsion_bp->n*a_torsion_dp-a_torsion_bp->offset);
                             int a_torsion_2_4_temp$_2 and skip;
                             a_torsion_2_4_temp$_2:=acos(-(a_torsion_2_4_temp$_1));
                             fprintf(op,"Torsion %s %d %s %d %s %d %s %d E %f Angle %f error %f\n",a_torsion_a1->name,a_torsion_a1->serial,a_torsion_a2->name,a_torsion_a2->serial,a_torsion_a3->name,a_torsion_a3->serial,a_torsion_a4->name,a_torsion_a4->serial,a_torsion_z2,a_torsion_dp*180.0/ 3.14159265,a_torsion_2_4_temp$_2*180.0/ 3.14159265,RValue) and skip
                         }
                         else
                         {
                             skip
                         }
                     }
                     else
                     {
                         skip
                     }
                 }
                 else
                 {
                     skip
                 }
                 
             }
             else 
             {
                  skip 
             };
             if(continue=0)  then
             {
                 if(return=0)  then
                 {
                     if(a_torsion_bp=a_torsion_bp->next$) then 
                     {
                         return<==1 and RValue:=1;
                         skip
                     }
                     else 
                     {
                          skip 
                     };
                     if(return=0)   then 
                     {
                         a_torsion_bp:=a_torsion_bp->next$
                     }
                     else
                     {
                         skip
                     }
                 }
                 else
                 {
                     skip
                 }
             }
             else
             {
                 skip
             }
         };
         continue<==0 and skip
     }
     else
     {
         skip
     }
     )
     }; 
  function gsdg_torsion ( ATOM *ap,int RValue )
 {
     frame(gsdg_torsion_tp,gsdg_torsion_b1,gsdg_torsion_b2,gsdg_torsion_b3,return) and ( 
     int return<==0 and skip;
     TORSION *gsdg_torsion_tp and skip;
     float gsdg_torsion_b1,gsdg_torsion_b2,gsdg_torsion_b3 and skip;
     gsdg_torsion_tp:=torsion_first;
     while( return=0 AND  1)
     {
         if(gsdg_torsion_tp=NULL) then 
         {
             return<==1 and RValue:=0;
             skip
         }
         else 
         {
              skip 
         };
         if(return=0)   then 
         {
             if(gsdg_torsion_tp->atom1=ap) then 
             {
                 gsdg_torsion_b1:=bond_length(ap,gsdg_torsion_tp->atom2,RValue);
                 gsdg_torsion_b2:=bond_length(gsdg_torsion_tp->atom2,gsdg_torsion_tp->atom3,RValue);
                 gsdg_torsion_b3:=bond_length(gsdg_torsion_tp->atom3,gsdg_torsion_tp->atom4,RValue);
                 ap->vx:=gsdg_torsion_b2+0.75*(gsdg_torsion_b1+gsdg_torsion_b3);
                 ap->vx:=ap->vx*ap->vx;
                 ap->vy:=10.0
                 
             }
             else 
             {
                  skip 
             };
             if(gsdg_torsion_tp->atom4=ap) then 
             {
                 gsdg_torsion_b1:=bond_length(ap,gsdg_torsion_tp->atom3,RValue);
                 gsdg_torsion_b2:=bond_length(gsdg_torsion_tp->atom2,gsdg_torsion_tp->atom3,RValue);
                 gsdg_torsion_b3:=bond_length(gsdg_torsion_tp->atom2,gsdg_torsion_tp->atom1,RValue);
                 ap->vx:=gsdg_torsion_b2+0.75*(gsdg_torsion_b1+gsdg_torsion_b3);
                 ap->vx:=ap->vx*ap->vx;
                 ap->vy:=10.0
                 
             }
             else 
             {
                  skip 
             };
             if(gsdg_torsion_tp=gsdg_torsion_tp->next$) then 
             {
                 return<==1 and RValue:=0;
                 skip
             }
             else 
             {
                  skip 
             };
             if(return=0)   then 
             {
                 gsdg_torsion_tp:=gsdg_torsion_tp->next$
             }
             else
             {
                 skip
             }
         }
         else
         {
             skip
         }
     }
     )
     }; 
  function tset ( FILE *op,int echo,int i1,int i2,int i3,int i4,float alpha,int RValue )
 {
     frame(tset_ap,tset_ap1,tset_ap2,tset_ap3,tset_ap4,tset_original,tset_delta,tset_numatom,tset_7_temp$_1,return) and ( 
     int return<==0 and skip;
     ATOM *tset_ap,*tset_ap1,*tset_ap2,*tset_ap3,*tset_ap4 and skip;
     float tset_original,tset_delta and skip;
     int tset_numatom and skip;
     tset_numatom:=a_number(RValue);
     if(tset_numatom<=0) then 
     {
         return<==1 and RValue:=1;
         skip
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         tset_ap1:=a_m_serial(i1,RValue);
         if(tset_ap1=NULL) then 
         {
             aaerror("An atom in tset is not defined");
             return<==1 and RValue:=1;
             skip
             
         }
         else 
         {
              skip 
         };
         if(return=0)   then 
         {
             tset_ap2:=a_m_serial(i2,RValue);
             if(tset_ap2=NULL) then 
             {
                 aaerror("An atom in tset is not defined");
                 return<==1 and RValue:=1;
                 skip
                 
             }
             else 
             {
                  skip 
             };
             if(return=0)   then 
             {
                 tset_ap3:=a_m_serial(i3,RValue);
                 if(tset_ap3=NULL) then 
                 {
                     aaerror("An atom in tset is not defined");
                     return<==1 and RValue:=1;
                     skip
                     
                 }
                 else 
                 {
                      skip 
                 };
                 if(return=0)   then 
                 {
                     tset_ap4:=a_m_serial(i4,RValue);
                     if(tset_ap4=NULL) then 
                     {
                         aaerror("An atom in tset is not defined");
                         return<==1 and RValue:=1;
                         skip
                         
                     }
                     else 
                     {
                          skip 
                     };
                     if(return=0)   then 
                     {
                         tset_original:=get_torsion_value(tset_ap1,tset_ap2,tset_ap3,tset_ap4,RValue);
                         if(fabs(tset_original-alpha)<1.e-3) then 
                         {
                             return<==1 and RValue:=1;
                             skip
                         }
                         else 
                         {
                              skip 
                         };
                         if(return=0)   then 
                         {
                             tset_bond_build(tset_ap1,tset_ap2,tset_ap3,tset_ap4,RValue);
                             tset_delta:=alpha-tset_original;
                             set_torsion(tset_ap1,tset_ap2,tset_ap3,tset_ap4,tset_delta,RValue);
                             int tset_7_temp$_1 and skip;
                             tset_7_temp$_1:=get_torsion_value(tset_ap1,tset_ap2,tset_ap3,tset_ap4,RValue);
                             if(echo) then 
                             {
                                 fprintf(op,"tset> original  %f delta %f final %f\n",tset_original*180/ 3.14159,tset_delta*180/ 3.14159,tset_7_temp$_1*180/ 3.14159,RValue) and skip
                             }
                             else 
                             {
                                  skip 
                             };
                             return<==1 and RValue:=0;
                             skip
                         }
                         else
                         {
                             skip
                         }
                     }
                     else
                     {
                         skip
                     }
                 }
                 else
                 {
                     skip
                 }
             }
             else
             {
                 skip
             }
         }
         else
         {
             skip
         }
     }
     else
     {
         skip
     }
     )
     }; 
  function tmin ( FILE *op,int echo,int i1,int i2,int i3,int i4,int nstep, void (*vfs[])(float*, float, int RValue),int nfs,int RValue )
 {
     frame(tmin_ap,tmin_ap1,tmin_ap2,tmin_ap3,tmin_ap4,tmin_original,tmin_delta,tmin_vtemp,tmin_vmax,tmin_numatom,tmin_i,tmin_imax,tmin_ifs,tmin_9_temp$_1,return) and ( 
     int return<==0 and skip;
     ATOM *tmin_ap,*tmin_ap1,*tmin_ap2,*tmin_ap3,*tmin_ap4 and skip;
     float tmin_original,tmin_delta and skip;
     float tmin_vtemp,tmin_vmax and skip;
     int tmin_numatom and skip;
     int tmin_i,tmin_imax,tmin_ifs and skip;
     tmin_numatom:=a_number(RValue);
     if(tmin_numatom<=0) then 
     {
         return<==1 and RValue:=1;
         skip
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         tmin_ap1:=a_m_serial(i1,RValue);
         if(tmin_ap1=NULL) then 
         {
             aaerror("An atom in tset is not defined");
             return<==1 and RValue:=1;
             skip
             
         }
         else 
         {
              skip 
         };
         if(return=0)   then 
         {
             tmin_ap2:=a_m_serial(i2,RValue);
             if(tmin_ap2=NULL) then 
             {
                 aaerror("An atom in tset is not defined");
                 return<==1 and RValue:=1;
                 skip
                 
             }
             else 
             {
                  skip 
             };
             if(return=0)   then 
             {
                 tmin_ap3:=a_m_serial(i3,RValue);
                 if(tmin_ap3=NULL) then 
                 {
                     aaerror("An atom in tset is not defined");
                     return<==1 and RValue:=1;
                     skip
                     
                 }
                 else 
                 {
                      skip 
                 };
                 if(return=0)   then 
                 {
                     tmin_ap4:=a_m_serial(i4,RValue);
                     if(tmin_ap4=NULL) then 
                     {
                         aaerror("An atom in tset is not defined");
                         return<==1 and RValue:=1;
                         skip
                         
                     }
                     else 
                     {
                          skip 
                     };
                     if(return=0)   then 
                     {
                         if(nstep<=0) then 
                         {
                             nstep:=12
                         }
                         else 
                         {
                              skip 
                         };
                         tmin_original:=get_torsion_value(tmin_ap1,tmin_ap2,tmin_ap3,tmin_ap4,RValue);
                         tset_bond_build(tmin_ap1,tmin_ap2,tmin_ap3,tmin_ap4,RValue);
                         tmin_delta:=-tmin_original;
                         set_torsion(tmin_ap1,tmin_ap2,tmin_ap3,tmin_ap4,tmin_delta,RValue);
                         tmin_imax:=-1;
                         tmin_vmax:=10e20;
                         tmin_delta:=2*3.141592653589793/ (float)nstep;
                         tmin_i:=0;
                         
                         while(tmin_i<nstep)
                         {
                             tmin_vtemp:=0.0;
                             tmin_ifs:=0;
                             
                             while(tmin_ifs<nfs)
                             {
                                 vfs[tmin_ifs](&tmin_vtemp,0.0,RValue);
                                 tmin_ifs:=tmin_ifs+1
                                 
                             };
                             if(tmin_vtemp<tmin_vmax) then 
                             {
                                 tmin_vmax:=tmin_vtemp;
                                 tmin_imax:=tmin_i
                                 
                             }
                             else 
                             {
                                  skip 
                             };
                             set_torsion(tmin_ap1,tmin_ap2,tmin_ap3,tmin_ap4,tmin_delta,RValue);
                             tmin_i:=tmin_i+1
                             
                         };
                         set_torsion(tmin_ap1,tmin_ap2,tmin_ap3,tmin_ap4,tmin_imax*tmin_delta,RValue);
                         int tmin_9_temp$_1 and skip;
                         tmin_9_temp$_1:=get_torsion_value(tmin_ap1,tmin_ap2,tmin_ap3,tmin_ap4,RValue);
                         if(echo) then 
                         {
                             fprintf(op,"tset> original  %f  final %f\n",tmin_original*180/ 3.14159,tmin_9_temp$_1*180/ 3.14159,RValue) and skip
                         }
                         else 
                         {
                              skip 
                         };
                         return<==1 and RValue:=0;
                         skip
                     }
                     else
                     {
                         skip
                     }
                 }
                 else
                 {
                     skip
                 }
             }
             else
             {
                 skip
             }
         }
         else
         {
             skip
         }
     }
     else
     {
         skip
     }
     )
     }; 
  function tset_bond_build ( ATOM *ap1,ATOM *ap2,ATOM *ap3,ATOM *ap4,int RValue )
 {
     frame(tset_bond_build_ap,tset_bond_build_bonded,tset_bond_build_i,tset_bond_build_numatom,tset_bond_build_inbond,tset_bond_build_j,tset_bond_build_tobonded,return) and ( 
     int return<==0 and skip;
     ATOM *tset_bond_build_ap,*tset_bond_build_bonded[20] and skip;
     int tset_bond_build_i,tset_bond_build_numatom,tset_bond_build_inbond and skip;
     int tset_bond_build_j,tset_bond_build_tobonded and skip;
     tset_bond_build_numatom:=a_number(RValue);
     tset_bond_build_i:=0;
     
     while(tset_bond_build_i<tset_bond_build_numatom)
     {
         tset_bond_build_ap:=a_next(tset_bond_build_i,RValue);
         tset_bond_build_ap->gx:=-1.0;
         tset_bond_build_i:=tset_bond_build_i+1
         
     };
     tset_bond_build_tobonded:=0;
     get_bond(ap3,tset_bond_build_bonded,20,&tset_bond_build_inbond);
     tset_bond_build_i:=0;
     
     while(tset_bond_build_i<tset_bond_build_inbond)
     {
         if(tset_bond_build_bonded[tset_bond_build_i]!=ap1 AND tset_bond_build_bonded[tset_bond_build_i]!=ap2) then 
         {
             tset_bond_build_bonded[tset_bond_build_i]->gx:=0.0;
             tset_bond_build_tobonded:=tset_bond_build_tobonded+1
             
         }
         else 
         {
              skip 
         };
         tset_bond_build_i:=tset_bond_build_i+1
         
     };
     get_bond(ap4,tset_bond_build_bonded,20,&tset_bond_build_inbond);
     tset_bond_build_i:=0;
     
     while(tset_bond_build_i<tset_bond_build_inbond)
     {
         if(tset_bond_build_bonded[tset_bond_build_i]!=ap1 AND tset_bond_build_bonded[tset_bond_build_i]!=ap2) then 
         {
             tset_bond_build_bonded[tset_bond_build_i]->gx:=0.0;
             tset_bond_build_tobonded:=tset_bond_build_tobonded+1
             
         }
         else 
         {
              skip 
         };
         tset_bond_build_i:=tset_bond_build_i+1
         
     };
     ap3->gx:=1.0;
     ap4->gx:=1.0;
     while(tset_bond_build_tobonded>0)
     {
         tset_bond_build_tobonded:=0;
         tset_bond_build_i:=0;
         
         while(tset_bond_build_i<tset_bond_build_numatom)
         {
             tset_bond_build_ap:=a_next(tset_bond_build_i,RValue);
             if(tset_bond_build_ap!=ap1 AND tset_bond_build_ap!=ap2) then 
             {
                 if(tset_bond_build_ap->gx=0.0) then 
                 {
                     tset_bond_build_ap->gx:=1.0;
                     get_bond(tset_bond_build_ap,tset_bond_build_bonded,20,&tset_bond_build_inbond);
                     tset_bond_build_j:=0;
                     
                     while(tset_bond_build_j<tset_bond_build_inbond)
                     {
                         if(tset_bond_build_bonded[tset_bond_build_j]->gx<1.0) then 
                         {
                             tset_bond_build_bonded[tset_bond_build_j]->gx:=0.0;
                             tset_bond_build_tobonded:=tset_bond_build_tobonded+1
                             
                         }
                         else 
                         {
                              skip 
                         };
                         tset_bond_build_j:=tset_bond_build_j+1
                         
                     }
                     
                 }
                 else 
                 {
                      skip 
                 }
                 
             }
             else 
             {
                  skip 
             };
             tset_bond_build_i:=tset_bond_build_i+1
             
         }
     };
     return<==1 and RValue:=1;
     skip
     )
     }; 
  function get_torsion_value ( ATOM *a1,ATOM *a2,ATOM *a3,ATOM *a4,float RValue )
 {
     frame(get_torsion_value_x1,get_torsion_value_x2,get_torsion_value_x3,get_torsion_value_y1,get_torsion_value_y2,get_torsion_value_y3,get_torsion_value_z1,get_torsion_value_z2,get_torsion_value_z3,get_torsion_value_cx1,get_torsion_value_cy1,get_torsion_value_cz1,get_torsion_value_cx2,get_torsion_value_cy2,get_torsion_value_cz2,get_torsion_value_dp,get_torsion_value_r,return) and ( 
     int return<==0 and skip;
     float get_torsion_value_x1,get_torsion_value_x2,get_torsion_value_x3,get_torsion_value_y1,get_torsion_value_y2,get_torsion_value_y3,get_torsion_value_z1,get_torsion_value_z2,get_torsion_value_z3 and skip;
     float get_torsion_value_cx1,get_torsion_value_cy1,get_torsion_value_cz1,get_torsion_value_cx2,get_torsion_value_cy2,get_torsion_value_cz2 and skip;
     float get_torsion_value_dp,get_torsion_value_r and skip;
     get_torsion_value_x1:=(a1->x-a2->x);
     get_torsion_value_y1:=(a1->y-a2->y);
     get_torsion_value_z1:=(a1->z-a2->z);
     get_torsion_value_x2:=(a3->x-a2->x);
     get_torsion_value_y2:=(a3->y-a2->y);
     get_torsion_value_z2:=(a3->z-a2->z);
     get_torsion_value_x3:=(a4->x-a3->x);
     get_torsion_value_y3:=(a4->y-a3->y);
     get_torsion_value_z3:=(a4->z-a3->z);
     get_torsion_value_cx1:=get_torsion_value_y1*get_torsion_value_z2-get_torsion_value_y2*get_torsion_value_z1;
     get_torsion_value_cy1:=-get_torsion_value_x1*get_torsion_value_z2+get_torsion_value_x2*get_torsion_value_z1;
     get_torsion_value_cz1:=get_torsion_value_x1*get_torsion_value_y2-get_torsion_value_x2*get_torsion_value_y1;
     get_torsion_value_r:=get_torsion_value_cx1*get_torsion_value_cx1+get_torsion_value_cy1*get_torsion_value_cy1+get_torsion_value_cz1*get_torsion_value_cz1;
     if(get_torsion_value_r<1.e-4) then 
     {
         return<==1 and RValue:=0;
         skip
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         get_torsion_value_r:=1.0/ sqrt(get_torsion_value_r);
         get_torsion_value_cx1:=get_torsion_value_cx1*get_torsion_value_r;
         get_torsion_value_cy1:=get_torsion_value_cy1*get_torsion_value_r;
         get_torsion_value_cz1:=get_torsion_value_cz1*get_torsion_value_r;
         get_torsion_value_cx2:=get_torsion_value_y3*get_torsion_value_z2-get_torsion_value_y2*get_torsion_value_z3;
         get_torsion_value_cy2:=-get_torsion_value_x3*get_torsion_value_z2+get_torsion_value_x2*get_torsion_value_z3;
         get_torsion_value_cz2:=get_torsion_value_x3*get_torsion_value_y2-get_torsion_value_x2*get_torsion_value_y3;
         get_torsion_value_r:=get_torsion_value_cx2*get_torsion_value_cx2+get_torsion_value_cy2*get_torsion_value_cy2+get_torsion_value_cz2*get_torsion_value_cz2;
         if(get_torsion_value_r<1.e-4) then 
         {
             return<==1 and RValue:=0;
             skip
         }
         else 
         {
              skip 
         };
         if(return=0)   then 
         {
             get_torsion_value_r:=1.0/ sqrt(get_torsion_value_r);
             get_torsion_value_cx2:=get_torsion_value_cx2*get_torsion_value_r;
             get_torsion_value_cy2:=get_torsion_value_cy2*get_torsion_value_r;
             get_torsion_value_cz2:=get_torsion_value_cz2*get_torsion_value_r;
             get_torsion_value_dp:=get_torsion_value_cx1*get_torsion_value_cx2+get_torsion_value_cy1*get_torsion_value_cy2+get_torsion_value_cz1*get_torsion_value_cz2;
             if(get_torsion_value_dp>1.0) then 
             {
                 get_torsion_value_dp:=1.0
             }
             else 
             {
                  skip 
             };
             if(get_torsion_value_dp<-1.0) then 
             {
                 get_torsion_value_dp:=-1.0
             }
             else 
             {
                  skip 
             };
             get_torsion_value_dp:=acos(get_torsion_value_dp);
             get_torsion_value_r:=get_torsion_value_cx1*get_torsion_value_x3+get_torsion_value_cy1*get_torsion_value_y3+get_torsion_value_cz1*get_torsion_value_z3;
             if(get_torsion_value_r>0) then 
             {
                 get_torsion_value_dp:=-get_torsion_value_dp
             }
             else 
             {
                  skip 
             };
             return<==1 and RValue:=get_torsion_value_dp;
             skip;
             return<==1 and RValue:=0;
             skip
         }
         else
         {
             skip
         }
     }
     else
     {
         skip
     }
     )
     }; 
  function set_torsion ( ATOM *ap1,ATOM *ap2,ATOM *ap3,ATOM *ap4,float howmuch,int RValue )
 {
     frame(set_torsion_nx,set_torsion_ny,set_torsion_nz,set_torsion_phi,set_torsion_cphi,set_torsion_sphi,set_torsion_xphi,set_torsion_rx,set_torsion_ry,set_torsion_rz,set_torsion_nnrx,set_torsion_nnry,set_torsion_nnrz,set_torsion_rnx,set_torsion_rny,set_torsion_rnz,set_torsion_ap,set_torsion_b1,set_torsion_b2,set_torsion_numatom,set_torsion_i,return) and ( 
     int return<==0 and skip;
     float set_torsion_nx,set_torsion_ny,set_torsion_nz and skip;
     float set_torsion_phi,set_torsion_cphi,set_torsion_sphi,set_torsion_xphi and skip;
     float set_torsion_rx,set_torsion_ry,set_torsion_rz,set_torsion_nnrx,set_torsion_nnry,set_torsion_nnrz,set_torsion_rnx,set_torsion_rny,set_torsion_rnz and skip;
     ATOM *set_torsion_ap,*set_torsion_b1,*set_torsion_b2 and skip;
     int set_torsion_numatom and skip;
     int set_torsion_i and skip;
     set_torsion_numatom:=a_number(RValue);
     set_torsion_b1:=ap2;
     set_torsion_b2:=ap3;
     set_torsion_nx:=set_torsion_b2->x-set_torsion_b1->x;
     set_torsion_ny:=set_torsion_b2->y-set_torsion_b1->y;
     set_torsion_nz:=set_torsion_b2->z-set_torsion_b1->z;
     set_torsion_rx:=sqrt(set_torsion_nx*set_torsion_nx+set_torsion_ny*set_torsion_ny+set_torsion_nz*set_torsion_nz);
     if(set_torsion_rx<1.e-6) then 
     {
         aaerror(" bad torsion radius in set_torsion \n");
         return<==1 and RValue:=1;
         skip
         
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         set_torsion_nx:=set_torsion_nx/ set_torsion_rx;
         set_torsion_ny:=set_torsion_ny/ set_torsion_rx;
         set_torsion_nz:=set_torsion_nz/ set_torsion_rx;
         set_torsion_cphi:=cos(howmuch);
         set_torsion_sphi:=sin(howmuch);
         set_torsion_phi:=(1.0-set_torsion_cphi);
         set_torsion_i:=0;
         
         while(set_torsion_i<set_torsion_numatom)
         {
             set_torsion_ap:=a_next(set_torsion_i,RValue);
             if(set_torsion_ap->gx>0.0 AND set_torsion_ap!=set_torsion_b2) then 
             {
                 set_torsion_rx:=set_torsion_ap->x-set_torsion_b1->x;
                 set_torsion_ry:=set_torsion_ap->y-set_torsion_b1->y;
                 set_torsion_rz:=set_torsion_ap->z-set_torsion_b1->z;
                 set_torsion_xphi:=set_torsion_nx*set_torsion_rx+set_torsion_ny*set_torsion_ry+set_torsion_nz*set_torsion_rz;
                 set_torsion_nnrx:=set_torsion_xphi*set_torsion_nx;
                 set_torsion_nnry:=set_torsion_xphi*set_torsion_ny;
                 set_torsion_nnrz:=set_torsion_xphi*set_torsion_nz;
                 set_torsion_rnx:=set_torsion_ny*set_torsion_rz-set_torsion_nz*set_torsion_ry;
                 set_torsion_rny:=-set_torsion_nx*set_torsion_rz+set_torsion_nz*set_torsion_rx;
                 set_torsion_rnz:=set_torsion_nx*set_torsion_ry-set_torsion_ny*set_torsion_rx;
                 set_torsion_rx:=set_torsion_cphi*set_torsion_rx+set_torsion_phi*set_torsion_nnrx+set_torsion_sphi*set_torsion_rnx;
                 set_torsion_ry:=set_torsion_cphi*set_torsion_ry+set_torsion_phi*set_torsion_nnry+set_torsion_sphi*set_torsion_rny;
                 set_torsion_rz:=set_torsion_cphi*set_torsion_rz+set_torsion_phi*set_torsion_nnrz+set_torsion_sphi*set_torsion_rnz;
                 set_torsion_ap->x:=set_torsion_rx+set_torsion_b1->x;
                 set_torsion_ap->y:=set_torsion_ry+set_torsion_b1->y;
                 set_torsion_ap->z:=set_torsion_rz+set_torsion_b1->z
                 
             }
             else 
             {
                  skip 
             };
             set_torsion_i:=set_torsion_i+1
             
         };
         return<==1 and RValue:=1;
         skip
     }
     else
     {
         skip
     }
     )
     }; 
  function tmap ( FILE *op,int echo,void (*vfs[])(float*, float, int RValue),int nfs,int i1,int i2,int i3,int i4,int j1,int j2,int j3,int j4,int nistep,int njstep,int RValue )
 {
     frame(tmap_ap,tmap_numatm,tmap_i,tmap_j,tmap_ifs,tmap_V,tmap_x,tmap_dx,tmap_y,tmap_dy,return) and ( 
     int return<==0 and skip;
     ATOM *tmap_ap and skip;
     int tmap_numatm and skip;
     int tmap_i,tmap_j,tmap_ifs and skip;
     float tmap_V and skip;
     float tmap_x,tmap_dx,tmap_y,tmap_dy and skip;
     tmap_numatm:=a_number(RValue);
     if(tmap_numatm<5) then 
     {
         return<==1 and RValue:=1;
         skip
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         tmap_i:=0;
         
         while(tmap_i<tmap_numatm)
         {
             tmap_ap:=a_next(tmap_i,RValue);
             tmap_ap->vx:=tmap_ap->x;
             tmap_ap->vy:=tmap_ap->y;
             tmap_ap->vz:=tmap_ap->z;
             tmap_i:=tmap_i+1
             
         };
         tmap_x:=0.0;
         tmap_y:=0.0;
         tmap_x:=-3.141592653589793;
         tmap_dx:=0.0;
         tmap_dy:=0.0;
         if(nistep>1) then 
         {
             tmap_dx:=3.141592653589793*2.0/ nistep
         }
         else 
         {
              skip 
         };
         if(njstep>1) then 
         {
             tmap_dy:=3.141592653589793*2.0/ njstep
         }
         else 
         {
              skip 
         };
         fprintf(op,"%d %d Torsion map  %f %f steps\n",nistep,njstep,tmap_dx*180.0/ 3.141592653589793,tmap_dy*180.0/ 3.141592653589793,RValue) and skip;
         tmap_i:=0;
         
         while(tmap_i<nistep)
         {
             tset(op,0,i1,i2,i3,i4,tmap_x,RValue);
             tmap_y:=0.0;
             tmap_y:=-3.141592653589793;
             tmap_j:=0;
             
             while(tmap_j<njstep)
             {
                 tset(op,0,j1,j2,j3,j4,tmap_y,RValue);
                 tmap_V:=0.0;
                 tmap_ifs:=0;
                 
                 while(tmap_ifs<nfs)
                 {
                     vfs[tmap_ifs](&tmap_V,0.0,RValue);
                     tmap_ifs:=tmap_ifs+1
                     
                 };
                 fprintf(op,"%f ",tmap_V,RValue) and skip;
                 tmap_y:=tmap_y+tmap_dy;
                 tmap_j:=tmap_j+1
                 
             };
             fprintf(op,"\n",RValue) and skip;
             tmap_x:=tmap_x+tmap_dx;
             tmap_i:=tmap_i+1
             
         };
         tmap_i:=0;
         
         while(tmap_i<tmap_numatm)
         {
             tmap_ap:=a_next(tmap_i,RValue);
             tmap_ap->x:=tmap_ap->vx;
             tmap_ap->y:=tmap_ap->vy;
             tmap_ap->z:=tmap_ap->vz;
             tmap_i:=tmap_i+1
             
         };
         return<==1 and RValue:=1;
         skip
     }
     else
     {
         skip
     }
     )
     }; 
  function u_v_nonbon ( float *V,float lambda,int RValue )
 {
     frame(u_v_nonbon_r,u_v_nonbon_r0,u_v_nonbon_xt,u_v_nonbon_yt,u_v_nonbon_zt,u_v_nonbon_lcutoff,u_v_nonbon_cutoff,u_v_nonbon_rdebye,u_v_nonbon_inbond,u_v_nonbon_inangle,u_v_nonbon_i,u_v_nonbon_a1,u_v_nonbon_a2,u_v_nonbon_bonded,u_v_nonbon_angled,u_v_nonbon_use,u_v_nonbon_nuse,u_v_nonbon_used,u_v_nonbon_cp,u_v_nonbon_bp,u_v_nonbon_inbuffer,u_v_nonbon_buffer,u_v_nonbon_xx,u_v_nonbon_yy,u_v_nonbon_zz,u_v_nonbon_invector,u_v_nonbon_atomsused,u_v_nonbon_ii,u_v_nonbon_jj,u_v_nonbon_imax,u_v_nonbon_vector,u_v_nonbon_atms,u_v_nonbon_dielectric,return) and ( 
     int return<==0 and skip;
     float u_v_nonbon_r,u_v_nonbon_r0,u_v_nonbon_xt,u_v_nonbon_yt,u_v_nonbon_zt and skip;
     float u_v_nonbon_lcutoff,u_v_nonbon_cutoff and skip;
     float u_v_nonbon_rdebye and skip;
     int u_v_nonbon_inbond,u_v_nonbon_inangle,u_v_nonbon_i and skip;
     ATOM *u_v_nonbon_a1,*u_v_nonbon_a2,*u_v_nonbon_bonded[10],*u_v_nonbon_angled[10] and skip;
     ATOM **u_v_nonbon_use and skip;
     int u_v_nonbon_nuse,u_v_nonbon_used and skip;
     ATOM *u_v_nonbon_cp,*u_v_nonbon_bp and skip;
     int u_v_nonbon_inbuffer and skip;
     float *u_v_nonbon_buffer,u_v_nonbon_xx,u_v_nonbon_yy,u_v_nonbon_zz and skip;
     int u_v_nonbon_invector,u_v_nonbon_atomsused,u_v_nonbon_ii,u_v_nonbon_jj,u_v_nonbon_imax and skip;
     float *u_v_nonbon_vector and skip;
     ATOM **u_v_nonbon_atms and skip;
     float u_v_nonbon_dielectric and skip;
     u_v_nonbon_cutoff:=get_f_variable("cutoff",RValue);
     if(u_v_nonbon_cutoff<1.0) then 
     {
         v_nonbon(V,lambda,RValue);
         return<==1 and RValue:=1;
         skip
         
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         u_v_nonbon_rdebye:=u_v_nonbon_cutoff/ 2.0;
         u_v_nonbon_dielectric:=get_f_variable("dielec",RValue);
         if(u_v_nonbon_dielectric<1.0) then 
         {
             u_v_nonbon_dielectric:=1.0
         }
         else 
         {
              skip 
         };
         u_v_nonbon_dielectric:=332.17752/ u_v_nonbon_dielectric;
         if(!extern uselist(&u_v_nonbon_use,&u_v_nonbon_nuse,u_v_nonbon_cutoff,RValue)) then 
         {
             return<==1 and RValue:=0;
             skip
         }
         else 
         {
              skip 
         };
         if(return=0)   then 
         {
             u_v_nonbon_i:=a_number(RValue);
             u_v_nonbon_buffer:=malloc(3*u_v_nonbon_i*sizeof(float));
             if(u_v_nonbon_buffer=NULL) then 
             {
                 aaerror("cannot allocate memory in u_v_nonbon\n");
                 return<==1 and RValue:=0;
                 skip
                 
             }
             else 
             {
                  skip 
             };
             if(return=0)   then 
             {
                 u_v_nonbon_vector:=malloc(u_v_nonbon_i*sizeof(float));
                 if(u_v_nonbon_vector=NULL) then 
                 {
                     aaerror("cannot allocate memory in u_v_nonbon\n");
                     return<==1 and RValue:=0;
                     skip
                     
                 }
                 else 
                 {
                      skip 
                 };
                 if(return=0)   then 
                 {
                     u_v_nonbon_atms:=malloc(u_v_nonbon_i*sizeof(ATOM *));
                     if(u_v_nonbon_atms=NULL) then 
                     {
                         aaerror("cannot allocate memory in u_v_nonbon\n");
                         return<==1 and RValue:=0;
                         skip
                         
                     }
                     else 
                     {
                          skip 
                     };
                     if(return=0)   then 
                     {
                         u_v_nonbon_a1:=a_next(-1,RValue);
                         u_v_nonbon_a1:=u_v_nonbon_a1->next$;
                         u_v_nonbon_imax:=a_number(RValue);
                         u_v_nonbon_used:=0;
                         u_v_nonbon_jj:=1;
                         
                         while( return=0 AND  u_v_nonbon_jj<u_v_nonbon_imax)
                         {
                             u_v_nonbon_bp:=u_v_nonbon_a1->next$;
                             u_v_nonbon_inbuffer:=0;
                             if(u_v_nonbon_use[u_v_nonbon_used]=u_v_nonbon_a1) then 
                             {
                                 u_v_nonbon_used:=u_v_nonbon_used+1
                                 
                             }
                             else
                             {
                                 aaerror("error in uselist - must abort");
                                 return<==1 and RValue:=0;
                                 skip
                             };
                             if(return=0)  then
                             {
                                 while(u_v_nonbon_use[u_v_nonbon_used]!=u_v_nonbon_a1)
                                 {
                                     u_v_nonbon_atms[u_v_nonbon_inbuffer]:=u_v_nonbon_use[u_v_nonbon_used];
                                     u_v_nonbon_inbuffer:=u_v_nonbon_inbuffer+1;
                                     u_v_nonbon_used:=u_v_nonbon_used+1
                                 };
                                 u_v_nonbon_used:=u_v_nonbon_used+1;
                                 if(u_v_nonbon_inbuffer>0) then 
                                 {
                                     u_v_nonbon_i:=0;
                                     
                                     while(u_v_nonbon_i<u_v_nonbon_inbuffer)
                                     {
                                         u_v_nonbon_buffer[3*u_v_nonbon_i]:=u_v_nonbon_atms[u_v_nonbon_i]->x;
                                         u_v_nonbon_buffer[3*u_v_nonbon_i+1]:=u_v_nonbon_atms[u_v_nonbon_i]->y;
                                         u_v_nonbon_buffer[3*u_v_nonbon_i+2]:=u_v_nonbon_atms[u_v_nonbon_i]->z;
                                         u_v_nonbon_i:=u_v_nonbon_i+1
                                         
                                     };
                                     if(lambda!=0.0) then 
                                     {
                                         u_v_nonbon_i:=0;
                                         
                                         while(u_v_nonbon_i<u_v_nonbon_inbuffer)
                                         {
                                             u_v_nonbon_buffer[3*u_v_nonbon_i]:=u_v_nonbon_atms[u_v_nonbon_i]->x+u_v_nonbon_atms[u_v_nonbon_i]->dx*lambda;
                                             u_v_nonbon_buffer[3*u_v_nonbon_i+1]:=u_v_nonbon_atms[u_v_nonbon_i]->y+u_v_nonbon_atms[u_v_nonbon_i]->dy*lambda;
                                             u_v_nonbon_buffer[3*u_v_nonbon_i+2]:=u_v_nonbon_atms[u_v_nonbon_i]->z+u_v_nonbon_atms[u_v_nonbon_i]->dz*lambda;
                                             u_v_nonbon_i:=u_v_nonbon_i+1
                                             
                                         }
                                         
                                     }
                                     else 
                                     {
                                          skip 
                                     };
                                     u_v_nonbon_xx:=u_v_nonbon_a1->x+lambda*u_v_nonbon_a1->dx;
                                     u_v_nonbon_yy:=u_v_nonbon_a1->y+lambda*u_v_nonbon_a1->dy;
                                     u_v_nonbon_zz:=u_v_nonbon_a1->z+lambda*u_v_nonbon_a1->dz;
                                     u_v_nonbon_i:=0;
                                     
                                     while(u_v_nonbon_i<u_v_nonbon_inbuffer)
                                     {
                                         u_v_nonbon_xt:=u_v_nonbon_xx-u_v_nonbon_buffer[3*u_v_nonbon_i];
                                         u_v_nonbon_yt:=u_v_nonbon_yy-u_v_nonbon_buffer[3*u_v_nonbon_i+1];
                                         u_v_nonbon_zt:=u_v_nonbon_zz-u_v_nonbon_buffer[3*u_v_nonbon_i+2];
                                         u_v_nonbon_r:=u_v_nonbon_xt*u_v_nonbon_xt+u_v_nonbon_yt*u_v_nonbon_yt+u_v_nonbon_zt*u_v_nonbon_zt;
                                         if(u_v_nonbon_r<2.0) then 
                                         {
                                             u_v_nonbon_r:=2.0
                                         }
                                         else 
                                         {
                                              skip 
                                         };
                                         u_v_nonbon_r0:=sqrt(u_v_nonbon_r);
                                         u_v_nonbon_r:=u_v_nonbon_r*u_v_nonbon_r*u_v_nonbon_r;
                                         u_v_nonbon_vector[u_v_nonbon_i]:=u_v_nonbon_a1->q*u_v_nonbon_atms[u_v_nonbon_i]->q/ u_v_nonbon_r0*u_v_nonbon_dielectric*exp(-u_v_nonbon_r0/ u_v_nonbon_rdebye)-u_v_nonbon_a1->a*u_v_nonbon_atms[u_v_nonbon_i]->a/ u_v_nonbon_r+u_v_nonbon_a1->b*u_v_nonbon_atms[u_v_nonbon_i]->b/ u_v_nonbon_r/ u_v_nonbon_r;
                                         u_v_nonbon_i:=u_v_nonbon_i+1
                                         
                                     };
                                     u_v_nonbon_i:=0;
                                     
                                     while(u_v_nonbon_i<u_v_nonbon_inbuffer)
                                     {
                                         * V:=* V+u_v_nonbon_vector[u_v_nonbon_i];
                                         u_v_nonbon_i:=u_v_nonbon_i+1
                                         
                                     }
                                     
                                 }
                                 else 
                                 {
                                      skip 
                                 };
                                 u_v_nonbon_jj:=u_v_nonbon_jj+1 and u_v_nonbon_a1:=u_v_nonbon_bp
                             }
                             else
                             {
                                 skip
                             }
                             
                         };
                         if(return=0)   then 
                         {
                             free(u_v_nonbon_atms) and skip;
                             free(u_v_nonbon_buffer) and skip;
                             free(u_v_nonbon_vector) and skip;
                             return<==1 and RValue:=1;
                             skip
                         }
                         else
                         {
                             skip
                         }
                     }
                     else
                     {
                         skip
                     }
                 }
                 else
                 {
                     skip
                 }
             }
             else
             {
                 skip
             }
         }
         else
         {
             skip
         }
     }
     else
     {
         skip
     }
     )
     }; 
  function u_f_nonbon ( float lambda,int RValue )
 {
     frame(u_f_nonbon_r,u_f_nonbon_r0,u_f_nonbon_xt,u_f_nonbon_yt,u_f_nonbon_zt,u_f_nonbon_lcutoff,u_f_nonbon_cutoff,u_f_nonbon_rdebye,u_f_nonbon_inbond,u_f_nonbon_inangle,u_f_nonbon_i,u_f_nonbon_a1,u_f_nonbon_a2,u_f_nonbon_bonded,u_f_nonbon_angled,u_f_nonbon_use,u_f_nonbon_nuse,u_f_nonbon_used,u_f_nonbon_cp,u_f_nonbon_bp,u_f_nonbon_inbuffer,u_f_nonbon_buffer,u_f_nonbon_xx,u_f_nonbon_yy,u_f_nonbon_zz,u_f_nonbon_k,u_f_nonbon_invector,u_f_nonbon_atomsused,u_f_nonbon_ii,u_f_nonbon_jj,u_f_nonbon_imax,u_f_nonbon_vector,u_f_nonbon_atms,u_f_nonbon_dielectric,return) and ( 
     int return<==0 and skip;
     float u_f_nonbon_r,u_f_nonbon_r0,u_f_nonbon_xt,u_f_nonbon_yt,u_f_nonbon_zt and skip;
     float u_f_nonbon_lcutoff,u_f_nonbon_cutoff and skip;
     float u_f_nonbon_rdebye and skip;
     int u_f_nonbon_inbond,u_f_nonbon_inangle,u_f_nonbon_i and skip;
     ATOM *u_f_nonbon_a1,*u_f_nonbon_a2,*u_f_nonbon_bonded[10],*u_f_nonbon_angled[10] and skip;
     ATOM **u_f_nonbon_use and skip;
     int u_f_nonbon_nuse,u_f_nonbon_used and skip;
     ATOM *u_f_nonbon_cp,*u_f_nonbon_bp and skip;
     int u_f_nonbon_inbuffer and skip;
     float *u_f_nonbon_buffer,u_f_nonbon_xx,u_f_nonbon_yy,u_f_nonbon_zz,u_f_nonbon_k and skip;
     int u_f_nonbon_invector,u_f_nonbon_atomsused,u_f_nonbon_ii,u_f_nonbon_jj,u_f_nonbon_imax and skip;
     float *u_f_nonbon_vector and skip;
     ATOM **u_f_nonbon_atms and skip;
     float u_f_nonbon_dielectric and skip;
     u_f_nonbon_cutoff:=get_f_variable("cutoff",RValue);
     if(u_f_nonbon_cutoff<1.0) then 
     {
         f_nonbon(lambda,RValue);
         return<==1 and RValue:=1;
         skip
         
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         u_f_nonbon_rdebye:=u_f_nonbon_cutoff/ 2.0;
         u_f_nonbon_dielectric:=get_f_variable("dielec",RValue);
         if(u_f_nonbon_dielectric<1.0) then 
         {
             u_f_nonbon_dielectric:=1.0
         }
         else 
         {
              skip 
         };
         u_f_nonbon_dielectric:=332.17752/ u_f_nonbon_dielectric;
         if(!extern uselist(&u_f_nonbon_use,&u_f_nonbon_nuse,u_f_nonbon_cutoff,RValue)) then 
         {
             return<==1 and RValue:=0;
             skip
         }
         else 
         {
              skip 
         };
         if(return=0)   then 
         {
             u_f_nonbon_i:=a_number(RValue);
             u_f_nonbon_buffer:=malloc(3*u_f_nonbon_i*sizeof(float));
             if(u_f_nonbon_buffer=NULL) then 
             {
                 aaerror("cannot allocate memory in u_v_nonbon\n");
                 return<==1 and RValue:=0;
                 skip
                 
             }
             else 
             {
                  skip 
             };
             if(return=0)   then 
             {
                 u_f_nonbon_vector:=malloc(3*u_f_nonbon_i*sizeof(float));
                 if(u_f_nonbon_vector=NULL) then 
                 {
                     aaerror("cannot allocate memory in u_v_nonbon\n");
                     return<==1 and RValue:=0;
                     skip
                     
                 }
                 else 
                 {
                      skip 
                 };
                 if(return=0)   then 
                 {
                     u_f_nonbon_atms:=malloc(u_f_nonbon_i*sizeof(ATOM *));
                     if(u_f_nonbon_atms=NULL) then 
                     {
                         aaerror("cannot allocate memory in u_v_nonbon\n");
                         return<==1 and RValue:=0;
                         skip
                         
                     }
                     else 
                     {
                          skip 
                     };
                     if(return=0)   then 
                     {
                         u_f_nonbon_a1:=a_next(-1,RValue);
                         u_f_nonbon_a1:=u_f_nonbon_a1->next$;
                         u_f_nonbon_imax:=a_number(RValue);
                         u_f_nonbon_used:=0;
                         u_f_nonbon_jj:=1;
                         
                         while( return=0 AND  u_f_nonbon_jj<u_f_nonbon_imax)
                         {
                             u_f_nonbon_bp:=u_f_nonbon_a1->next$;
                             u_f_nonbon_inbuffer:=0;
                             if(u_f_nonbon_use[u_f_nonbon_used]=u_f_nonbon_a1) then 
                             {
                                 u_f_nonbon_used:=u_f_nonbon_used+1
                                 
                             }
                             else
                             {
                                 aaerror("error in uselist - must abort");
                                 return<==1 and RValue:=0;
                                 skip
                             };
                             if(return=0)  then
                             {
                                 while(u_f_nonbon_use[u_f_nonbon_used]!=u_f_nonbon_a1)
                                 {
                                     u_f_nonbon_atms[u_f_nonbon_inbuffer]:=u_f_nonbon_use[u_f_nonbon_used];
                                     u_f_nonbon_inbuffer:=u_f_nonbon_inbuffer+1;
                                     u_f_nonbon_used:=u_f_nonbon_used+1
                                 };
                                 u_f_nonbon_used:=u_f_nonbon_used+1;
                                 if(u_f_nonbon_inbuffer>0) then 
                                 {
                                     u_f_nonbon_i:=0;
                                     
                                     while(u_f_nonbon_i<u_f_nonbon_inbuffer)
                                     {
                                         u_f_nonbon_buffer[3*u_f_nonbon_i]:=u_f_nonbon_atms[u_f_nonbon_i]->x;
                                         u_f_nonbon_buffer[3*u_f_nonbon_i+1]:=u_f_nonbon_atms[u_f_nonbon_i]->y;
                                         u_f_nonbon_buffer[3*u_f_nonbon_i+2]:=u_f_nonbon_atms[u_f_nonbon_i]->z;
                                         u_f_nonbon_i:=u_f_nonbon_i+1
                                         
                                     };
                                     if(lambda!=0.0) then 
                                     {
                                         u_f_nonbon_i:=0;
                                         
                                         while(u_f_nonbon_i<u_f_nonbon_inbuffer)
                                         {
                                             u_f_nonbon_buffer[3*u_f_nonbon_i]:=u_f_nonbon_atms[u_f_nonbon_i]->x+u_f_nonbon_atms[u_f_nonbon_i]->dx*lambda;
                                             u_f_nonbon_buffer[3*u_f_nonbon_i+1]:=u_f_nonbon_atms[u_f_nonbon_i]->y+u_f_nonbon_atms[u_f_nonbon_i]->dy*lambda;
                                             u_f_nonbon_buffer[3*u_f_nonbon_i+2]:=u_f_nonbon_atms[u_f_nonbon_i]->z+u_f_nonbon_atms[u_f_nonbon_i]->dz*lambda;
                                             u_f_nonbon_i:=u_f_nonbon_i+1
                                             
                                         }
                                         
                                     }
                                     else 
                                     {
                                          skip 
                                     };
                                     u_f_nonbon_xx:=u_f_nonbon_a1->x+lambda*u_f_nonbon_a1->dx;
                                     u_f_nonbon_yy:=u_f_nonbon_a1->y+lambda*u_f_nonbon_a1->dy;
                                     u_f_nonbon_zz:=u_f_nonbon_a1->z+lambda*u_f_nonbon_a1->dz;
                                     u_f_nonbon_i:=0;
                                     
                                     while(u_f_nonbon_i<u_f_nonbon_inbuffer)
                                     {
                                         u_f_nonbon_xt:=u_f_nonbon_xx-u_f_nonbon_buffer[3*u_f_nonbon_i];
                                         u_f_nonbon_yt:=u_f_nonbon_yy-u_f_nonbon_buffer[3*u_f_nonbon_i+1];
                                         u_f_nonbon_zt:=u_f_nonbon_zz-u_f_nonbon_buffer[3*u_f_nonbon_i+2];
                                         u_f_nonbon_r:=u_f_nonbon_xt*u_f_nonbon_xt+u_f_nonbon_yt*u_f_nonbon_yt+u_f_nonbon_zt*u_f_nonbon_zt;
                                         if(u_f_nonbon_r<=1.0) then 
                                         {
                                             u_f_nonbon_r:=1.0
                                             
                                         }
                                         else 
                                         {
                                              skip 
                                         };
                                         u_f_nonbon_r0:=sqrt(u_f_nonbon_r);
                                         u_f_nonbon_xt:=u_f_nonbon_xt/ u_f_nonbon_r0;
                                         u_f_nonbon_yt:=u_f_nonbon_yt/ u_f_nonbon_r0;
                                         u_f_nonbon_zt:=u_f_nonbon_zt/ u_f_nonbon_r0;
                                         u_f_nonbon_k:=-u_f_nonbon_a1->q*u_f_nonbon_atms[u_f_nonbon_i]->q*u_f_nonbon_dielectric*exp(-u_f_nonbon_r0/ u_f_nonbon_rdebye)*(1.0/ (u_f_nonbon_rdebye*u_f_nonbon_r0)+1.0/ u_f_nonbon_r);
                                         u_f_nonbon_r:=u_f_nonbon_r*u_f_nonbon_r*u_f_nonbon_r;
                                         u_f_nonbon_k:=u_f_nonbon_k+u_f_nonbon_a1->a*u_f_nonbon_atms[u_f_nonbon_i]->a/ u_f_nonbon_r/ u_f_nonbon_r0*6;
                                         u_f_nonbon_k:=u_f_nonbon_k-u_f_nonbon_a1->b*u_f_nonbon_atms[u_f_nonbon_i]->b/ u_f_nonbon_r/ u_f_nonbon_r/ u_f_nonbon_r0*12;
                                         u_f_nonbon_vector[3*u_f_nonbon_i]:=u_f_nonbon_xt*u_f_nonbon_k;
                                         u_f_nonbon_vector[3*u_f_nonbon_i+1]:=u_f_nonbon_yt*u_f_nonbon_k;
                                         u_f_nonbon_vector[3*u_f_nonbon_i+2]:=u_f_nonbon_zt*u_f_nonbon_k;
                                         u_f_nonbon_i:=u_f_nonbon_i+1
                                         
                                     };
                                     u_f_nonbon_i:=0;
                                     
                                     while(u_f_nonbon_i<u_f_nonbon_inbuffer)
                                     {
                                         u_f_nonbon_a1->fx:=u_f_nonbon_a1->fx-u_f_nonbon_vector[3*u_f_nonbon_i];
                                         u_f_nonbon_a1->fy:=u_f_nonbon_a1->fy-u_f_nonbon_vector[3*u_f_nonbon_i+1];
                                         u_f_nonbon_a1->fz:=u_f_nonbon_a1->fz-u_f_nonbon_vector[3*u_f_nonbon_i+2];
                                         u_f_nonbon_atms[u_f_nonbon_i]->fx:=u_f_nonbon_atms[u_f_nonbon_i]->fx+u_f_nonbon_vector[3*u_f_nonbon_i];
                                         u_f_nonbon_atms[u_f_nonbon_i]->fy:=u_f_nonbon_atms[u_f_nonbon_i]->fy+u_f_nonbon_vector[3*u_f_nonbon_i+1];
                                         u_f_nonbon_atms[u_f_nonbon_i]->fz:=u_f_nonbon_atms[u_f_nonbon_i]->fz+u_f_nonbon_vector[3*u_f_nonbon_i+2];
                                         u_f_nonbon_i:=u_f_nonbon_i+1
                                         
                                     }
                                     
                                 }
                                 else 
                                 {
                                      skip 
                                 };
                                 u_f_nonbon_jj:=u_f_nonbon_jj+1 and u_f_nonbon_a1:=u_f_nonbon_bp
                             }
                             else
                             {
                                 skip
                             }
                             
                         };
                         if(return=0)   then 
                         {
                             free(u_f_nonbon_atms) and skip;
                             free(u_f_nonbon_buffer) and skip;
                             free(u_f_nonbon_vector) and skip;
                             return<==1 and RValue:=1;
                             skip
                         }
                         else
                         {
                             skip
                         }
                     }
                     else
                     {
                         skip
                     }
                 }
                 else
                 {
                     skip
                 }
             }
             else
             {
                 skip
             }
         }
         else
         {
             skip
         }
     }
     else
     {
         skip
     }
     )
     }; 
	 int uselist_oldatomnumber<==0 and skip;
     int uselist_since<==0,uselist_lsize and skip;
     ATOM **uselist_local and skip;
     float uselist_oldcutoff<==-1 and skip;
  function uselist ( ATOM ***thelist,int *thesize,float cutoff,int RValue )
 {
     frame(uselist_ok,uselist_a1,uselist_a2,uselist_ap,uselist_bp,uselist_i,uselist_j,uselist_k,uselist_max,uselist_lcutoff,uselist_x,uselist_y,uselist_z,uselist_r,uselist_rcut,return,break$,continue) and ( 
     int continue<==0 and skip;
     int break$<==0 and skip;
     int return<==0 and skip;
     int uselist_ok and skip;
     
     ATOM *uselist_a1,*uselist_a2,*uselist_ap,*uselist_bp and skip;
     int uselist_i,uselist_j,uselist_k,uselist_max and skip;
     float uselist_lcutoff and skip;
     float uselist_x,uselist_y,uselist_z,uselist_r,uselist_rcut and skip;
     uselist_i:=a_number(RValue);
     uselist_j:=get_i_variable("nbstep",RValue);
     if(uselist_j<=0) then 
     {
         uselist_j:=10
     }
     else 
     {
          skip 
     };
     if((uselist_i=uselist_oldatomnumber) AND (uselist_since<uselist_j) AND (cutoff=uselist_oldcutoff)) then 
     {
         * thelist:=uselist_local;
         * thesize:=uselist_lsize;
         uselist_since:=uselist_since+1;
         return<==1 and RValue:=1;
         skip
         
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         uselist_ok:=0;
         while(1)
         {
             continue<==0 and skip;
             if(uselist_oldatomnumber>0) then 
             {
                 free(uselist_local) and skip
             }
             else 
             {
                  skip 
             };
             uselist_oldcutoff:=cutoff;
             uselist_lcutoff:=-cutoff;
             uselist_since:=0;
             uselist_oldatomnumber:=uselist_i;
             uselist_j:=get_i_variable("nbdeep",RValue);
             if(uselist_j<=0) then 
             {
                 uselist_j:=20
             }
             else 
             {
                  skip 
             };
             uselist_max:=uselist_i*uselist_j;
             uselist_local:=malloc(uselist_max*sizeof(ATOM *));
             if(uselist_local=NULL) then 
             {
                 aaerror("cannot allocate uselist memory");
                 exit(0) and skip 
                 
             }
             else 
             {
                  skip 
             };
             * thelist:=uselist_local;
             * thesize:=0;
             uselist_rcut:=cutoff*cutoff;
             uselist_a1:=a_next(-1,RValue);
             uselist_a1:=uselist_a1->next$;
             break$<==0 and skip;
             uselist_i:=1;
             
             while( break$=0 AND  uselist_i<uselist_oldatomnumber)
             {
                 uselist_ap:=uselist_a1->next$;
                 uselist_local[* thesize]:=uselist_a1;
                 * thesize:=* thesize+1;
                 uselist_a2:=a_next(-1,RValue);
                 continue<==0 and skip;
                 break$<==0 and skip;
                 uselist_j:=0;
                 
                 while( break$=0 AND  uselist_j<uselist_i)
                 {
                      continue<==0 and skip;
                     uselist_ok:=0;
                     continue<==0 and skip;
                     uselist_k:=0;
                     
                     while(uselist_k<uselist_a1->dontuse)
                     {
                          continue<==0 and skip;
                         if(uselist_a2=uselist_a1->excluded[uselist_k]) then 
                         {
                             uselist_ok:=1;
                             continue<==1 and skip;
                              uselist_k:=uselist_k+1
                         }
                         else 
                         {
                              skip 
                         };
                         if(continue=0)   then 
                         {
                             uselist_k:=uselist_k+1
                         }
                         else
                         {
                             skip
                         }
                         
                     };
                     continue<==0 and skip;
                     if(uselist_ok=1) then 
                     {
                         uselist_bp:=a_next(1,RValue);
                         continue<==1 and skip
                          
                     }
                     else 
                     {
                          skip 
                     };
                     if(continue=0)   then 
                     {
                         if((uselist_a2->x-uselist_a1->x)>cutoff) then 
                         {
                             uselist_bp:=a_next(1,RValue);
                             continue<==1 and skip
                              
                         }
                         else 
                         {
                              skip 
                         };
                         if(continue=0)   then 
                         {
                             if((uselist_a2->x-uselist_a1->x)<uselist_lcutoff) then 
                             {
                                 uselist_bp:=a_next(1,RValue);
                                 continue<==1 and skip
                                  
                             }
                             else 
                             {
                                  skip 
                             };
                             if(continue=0)   then 
                             {
                                 if((uselist_a2->y-uselist_a1->y)>cutoff) then 
                                 {
                                     uselist_bp:=a_next(1,RValue);
                                     continue<==1 and skip
                                      
                                 }
                                 else 
                                 {
                                      skip 
                                 };
                                 if(continue=0)   then 
                                 {
                                     if((uselist_a2->y-uselist_a1->y)<uselist_lcutoff) then 
                                     {
                                         uselist_bp:=a_next(1,RValue);
                                         continue<==1 and skip
                                          
                                     }
                                     else 
                                     {
                                          skip 
                                     };
                                     if(continue=0)   then 
                                     {
                                         if((uselist_a2->z-uselist_a1->z)>cutoff) then 
                                         {
                                             uselist_bp:=a_next(1,RValue);
                                             continue<==1 and skip
                                              
                                         }
                                         else 
                                         {
                                              skip 
                                         };
                                         if(continue=0)   then 
                                         {
                                             if((uselist_a2->z-uselist_a1->z)<uselist_lcutoff) then 
                                             {
                                                 uselist_bp:=a_next(1,RValue);
                                                 continue<==1 and skip
                                                  
                                             }
                                             else 
                                             {
                                                  skip 
                                             };
                                             if(continue=0)   then 
                                             {
                                                 uselist_x:=uselist_a2->x-uselist_a1->x;
                                                 uselist_y:=uselist_a2->y-uselist_a1->y;
                                                 uselist_z:=uselist_a2->z-uselist_a1->z;
                                                 uselist_r:=uselist_x*uselist_x+uselist_y*uselist_y+uselist_z*uselist_z;
                                                 if(uselist_r>uselist_rcut) then 
                                                 {
                                                     uselist_bp:=a_next(1,RValue);
                                                     continue<==1 and skip
                                                      
                                                 }
                                                 else 
                                                 {
                                                      skip 
                                                 };
                                                 if(continue=0)   then 
                                                 {
                                                     uselist_local[* thesize]:=uselist_a2;
                                                     * thesize:=* thesize+1;
                                                     if(* thesize>=uselist_max) then 
                                                     {
                                                         aaerror("please increase nbdeep (seti nbdeep (>20);)");
                                                         uselist_i:=a_number(RValue);
                                                         uselist_j:=get_i_variable("nbdeep",RValue);
                                                         if(uselist_j=0) then 
                                                         {
                                                             uselist_j:=20
                                                         }
                                                         else 
                                                         {
                                                              skip 
                                                         };
                                                         if(uselist_j=uselist_i+2) then 
                                                         {
                                                             aaerror("Terrible error in uselist, too many interactions");
                                                             exit(0) and skip 
                                                             
                                                         }
                                                         else 
                                                         {
                                                              skip 
                                                         };
                                                         uselist_j:=2*uselist_j;
                                                         if(uselist_j>uselist_i+2) then 
                                                         {
                                                             uselist_j:=uselist_i+2
                                                         }
                                                         else 
                                                         {
                                                              skip 
                                                         };
                                                         set_i_variable("nbdeep",uselist_j,RValue);
                                                         uselist_ok:=2;
                                                         break$<==1 and skip
                                                          
                                                     }
                                                     else 
                                                     {
                                                          skip 
                                                     };
                                                     if(break$=0)   then
                                                     {
                                                         uselist_bp:=a_next(1,RValue);
                                                         uselist_j:=uselist_j+1 and uselist_a2:=uselist_bp
                                                     }
                                                     else
                                                     {
                                                         skip
                                                     }
                                                 }
                                                 else
                                                 {
                                                     skip
                                                 }
                                             }
                                             else
                                             {
                                                 skip
                                             }
                                         }
                                         else
                                         {
                                             skip
                                         }
                                     }
                                     else
                                     {
                                         skip
                                     }
                                 }
                                 else
                                 {
                                     skip
                                 }
                             }
                             else
                             {
                                 skip
                             }
                         }
                         else
                         {
                             skip
                         }
                     }
                     else
                     {
                         skip
                     }
                     
                 };
                 break$<==0 and skip;
                 continue<==0 and skip;
                 if(uselist_ok=2) then 
                 {
                     break$<==1 and skip
                  }
                 else 
                 {
                      skip 
                 };
                 if(break$=0)   then
                 {
                     uselist_local[* thesize]:=uselist_a1;
                     * thesize:=* thesize+1;
                     uselist_lsize:=* thesize;
                     uselist_i:=uselist_i+1 and uselist_a1:=uselist_ap
                 }
                 else
                 {
                     skip
                 }
                 
             };
             break$<==0 and skip;
             if(uselist_ok=2) then 
             {
                 continue<==1 and skip
              }
             else 
             {
                  skip 
             };
             if(continue=0)   then 
             {
                 break$<==1 and skip
              }
             else
             {
                 skip
             }
         };
         continue<==0 and skip;
         return<==1 and RValue:=1;
         skip
     }
     else
     {
         skip
     }
     )
     }; 
   

 VARIABLE *variableFIRST<==NULL and skip;
 VARIABLE *variableLAST<==NULL and skip;
 function match_variable ( char *name,VARIABLE* RValue )
 {
     frame(match_variable_vp,return) and ( 
     int return<==0 and skip;
     VARIABLE *match_variable_vp and skip;
     match_variable_vp:=variableFIRST;
     while( return=0 AND  1)
     {
         if(match_variable_vp=NULL) then 
         {
             return<==1 and RValue:=match_variable_vp;
             skip
         }
         else 
         {
              skip 
         };
         if(return=0)   then 
         {
             if(strcmp(&(match_variable_vp->name[0]),name)=0) then 
             {
                 return<==1 and RValue:=match_variable_vp;
                 skip
             }
             else 
             {
                  skip 
             };
             if(return=0)   then 
             {
                 if(match_variable_vp=match_variable_vp->next$) then 
                 {
                     return<==1 and RValue:=NULL;
                     skip
                 }
                 else 
                 {
                      skip 
                 };
                 if(return=0)   then 
                 {
                     match_variable_vp:=match_variable_vp->next$
                 }
                 else
                 {
                     skip
                 }
             }
             else
             {
                 skip
             }
         }
         else
         {
             skip
         }
     }
     )
     }; 
  function set_f_variable ( char *name,float f,int RValue )
 {
     frame(set_f_variable_new,set_f_variable_i,return,break$) and ( 
     int break$<==0 and skip;
     int return<==0 and skip;
     VARIABLE *set_f_variable_new and skip;
     int set_f_variable_i and skip;
     set_f_variable_new:=match_variable(name,RValue);
     if(set_f_variable_new=NULL) then 
     {
         set_f_variable_new:=malloc(sizeof(VARIABLE)) ;
         if((set_f_variable_new)=NULL) then 
         {
             return<==1 and RValue:=0;
             skip
             
         }
         else 
         {
              skip 
         };
         if(return=0)   then 
         {
             set_f_variable_new->next$:=NULL;
             if(variableFIRST=NULL) then 
             {
                 variableFIRST:=set_f_variable_new
             }
             else 
             {
                  skip 
             };
             if(variableLAST=NULL) then 
             {
                 variableLAST:=set_f_variable_new
             }
             else 
             {
                  skip 
             }
         }
         else
         {
             skip
         }
         
     }
     else 
     {
          skip 
     };
     if(return=0)  then
     {
         set_f_variable_new->value.f:=f;
         set_f_variable_new->type:=1;
         break$<==0 and skip;
         set_f_variable_i:=0;
         
         while( break$=0 AND  set_f_variable_i<7)
         {
             set_f_variable_new->name[set_f_variable_i]:=* name;
             if(* name='\0') then 
             {
                 break$<==1 and skip
              }
             else 
             {
                  skip 
             };
             if(break$=0)   then
             {
                 name:=name+1;
                 set_f_variable_i:=set_f_variable_i+1
             }
             else
             {
                 skip
             }
             
         };
         break$<==0 and skip;
         if(set_f_variable_new->next$=NULL) then 
         {
             set_f_variable_new->next$:=set_f_variable_new;
             variableLAST->next$:=set_f_variable_new;
             variableLAST:=set_f_variable_new
             
         }
         else 
         {
              skip 
         };
         return<==1 and RValue:=1;
         skip
     }
     else
     {
         skip
     }
     )
     }; 
  function set_i_variable ( char *name,int f,int RValue )
 {
     frame(set_i_variable_new,set_i_variable_i,return,break$) and ( 
     int break$<==0 and skip;
     int return<==0 and skip;
     VARIABLE *set_i_variable_new and skip;
     int set_i_variable_i and skip;
     set_i_variable_new:=match_variable(name,RValue);
     if(set_i_variable_new=NULL) then 
     {
         set_i_variable_new:=malloc(sizeof(VARIABLE)) ;
         if((set_i_variable_new)=NULL) then 
         {
             return<==1 and RValue:=0;
             skip
             
         }
         else 
         {
              skip 
         };
         if(return=0)   then 
         {
             set_i_variable_new->next$:=NULL;
             if(variableFIRST=NULL) then 
             {
                 variableFIRST:=set_i_variable_new
             }
             else 
             {
                  skip 
             };
             if(variableLAST=NULL) then 
             {
                 variableLAST:=set_i_variable_new
             }
             else 
             {
                  skip 
             }
         }
         else
         {
             skip
         }
         
     }
     else 
     {
          skip 
     };
     if(return=0)  then
     {
         set_i_variable_new->value.i:=f;
         set_i_variable_new->type:=0;
         break$<==0 and skip;
         set_i_variable_i:=0;
         
         while( break$=0 AND  set_i_variable_i<7)
         {
             set_i_variable_new->name[set_i_variable_i]:=* name;
             if(* name='\0') then 
             {
                 break$<==1 and skip
              }
             else 
             {
                  skip 
             };
             if(break$=0)   then
             {
                 name:=name+1;
                 set_i_variable_i:=set_i_variable_i+1
             }
             else
             {
                 skip
             }
             
         };
         break$<==0 and skip;
         if(set_i_variable_new->next$=NULL) then 
         {
             set_i_variable_new->next$:=set_i_variable_new;
             variableLAST->next$:=set_i_variable_new;
             variableLAST:=set_i_variable_new
             
         }
         else 
         {
              skip 
         };
         return<==1 and RValue:=1;
         skip
     }
     else
     {
         skip
     }
     )
     }; 
  function get_f_variable ( char *name,float RValue )
 {
     frame(get_f_variable_vp,return) and ( 
     int return<==0 and skip;
     VARIABLE *get_f_variable_vp and skip;
     get_f_variable_vp:=match_variable(name,RValue);
     if(get_f_variable_vp=NULL) then 
     {
         return<==1 and RValue:=0.0;
         skip
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         if(get_f_variable_vp->type=1) then 
         {
             return<==1 and RValue:=get_f_variable_vp->value.f;
             skip
         }
         else 
         {
              skip 
         };
         if(return=0)   then 
         {
             return<==1 and RValue:=(float)get_f_variable_vp->value.i;
             skip
         }
         else
         {
             skip
         }
     }
     else
     {
         skip
     }
     )
     }; 
  function get_i_variable ( char *name,int RValue )
 {
     frame(get_i_variable_vp,return) and ( 
     int return<==0 and skip;
     VARIABLE *get_i_variable_vp and skip;
     get_i_variable_vp:=match_variable(name,RValue);
     if(get_i_variable_vp=NULL) then 
     {
         return<==1 and RValue:=0;
         skip
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         if(get_i_variable_vp->type=0) then 
         {
             return<==1 and RValue:=get_i_variable_vp->value.i;
             skip
         }
         else 
         {
              skip 
         };
         if(return=0)   then 
         {
             return<==1 and RValue:=(int)get_i_variable_vp->value.f;
             skip
         }
         else
         {
             skip
         }
     }
     else
     {
         skip
     }
     )
     }; 
  function dump_variable ( FILE *where )
 {
     frame(dump_variable_vp,return) and ( 
     int return<==0 and skip;
     VARIABLE *dump_variable_vp and skip;
     dump_variable_vp:=variableFIRST;
     while( return=0 AND  1)
     {
         if(dump_variable_vp->next$=NULL) then 
         {
              return<==1 and skip
         }
         else 
         {
              skip 
         };
         if(return=0)   then 
         {
             if(dump_variable_vp->type=0) then 
             {
                 fprintf(where,"seti %s %d ;\n",&dump_variable_vp->name[0],dump_variable_vp->value.i,RValue) and skip
                 
             }
             else
             {
                 fprintf(where,"setf %s %f ;\n",&dump_variable_vp->name[0],dump_variable_vp->value.f,RValue) and skip
             };
             if(dump_variable_vp->next$=dump_variable_vp) then 
             {
                  return<==1 and skip
             }
             else 
             {
                  skip 
             };
             if(return=0)   then 
             {
                 dump_variable_vp:=dump_variable_vp->next$
             }
             else
             {
                 skip
             }
         }
         else
         {
             skip
         }
     }
     )
     }; 
	 float fv_update_nonbon_dielecold<==-1.0 and skip;
  function fv_update_nonbon ( float lambda,int RValue )
 {
     frame(fv_update_nonbon_ok,fv_update_nonbon_r,fv_update_nonbon_r0,fv_update_nonbon_xt,fv_update_nonbon_yt,fv_update_nonbon_zt,fv_update_nonbon_k,fv_update_nonbon_k1,fv_update_nonbon_k2,fv_update_nonbon_k3,fv_update_nonbon_k4,fv_update_nonbon_k5,fv_update_nonbon_ka3,fv_update_nonbon_ka2,fv_update_nonbon_kb3,fv_update_nonbon_kb2,fv_update_nonbon_inbond,fv_update_nonbon_inangle,fv_update_nonbon_i,fv_update_nonbon_a1,fv_update_nonbon_a2,fv_update_nonbon_bonded,fv_update_nonbon_angled,fv_update_nonbon_indexes,fv_update_nonbon_inindex,fv_update_nonbon_in,fv_update_nonbon_ii,fv_update_nonbon_j,fv_update_nonbon_jj,fv_update_nonbon_imax,fv_update_nonbon_inclose,fv_update_nonbon_vector,fv_update_nonbon_close,fv_update_nonbon_atomall,fv_update_nonbon_mxdq,fv_update_nonbon_dielectric,fv_update_nonbon_mxcut,return,break$,continue) and ( 
     int continue<==0 and skip;
     int break$<==0 and skip;
     int return<==0 and skip;
     int fv_update_nonbon_ok and skip;
     float fv_update_nonbon_r,fv_update_nonbon_r0,fv_update_nonbon_xt,fv_update_nonbon_yt,fv_update_nonbon_zt and skip;
     float fv_update_nonbon_k,fv_update_nonbon_k1,fv_update_nonbon_k2,fv_update_nonbon_k3,fv_update_nonbon_k4,fv_update_nonbon_k5 and skip;
     float fv_update_nonbon_ka3,fv_update_nonbon_ka2 and skip;
     float fv_update_nonbon_kb3,fv_update_nonbon_kb2 and skip;
     int fv_update_nonbon_inbond,fv_update_nonbon_inangle,fv_update_nonbon_i and skip;
     ATOM *fv_update_nonbon_a1,*fv_update_nonbon_a2,*fv_update_nonbon_bonded[10],*fv_update_nonbon_angled[10] and skip;
     int *fv_update_nonbon_indexes,fv_update_nonbon_inindex,fv_update_nonbon_in and skip;
     int fv_update_nonbon_ii,fv_update_nonbon_j,fv_update_nonbon_jj,fv_update_nonbon_imax,fv_update_nonbon_inclose and skip;
     float *fv_update_nonbon_vector and skip;
     ATOM *fv_update_nonbon_close[200],**fv_update_nonbon_atomall and skip;
     float fv_update_nonbon_mxdq,fv_update_nonbon_dielectric,fv_update_nonbon_mxcut and skip;
     
     fv_update_nonbon_mxdq:=get_f_variable("mxdq",RValue);
     fv_update_nonbon_mxcut:=get_f_variable("mxcut",RValue);
     if(fv_update_nonbon_mxcut<0.0) then 
     {
         fv_update_nonbon_mxcut:=5.0
     }
     else 
     {
          skip 
     };
     if(fv_update_nonbon_mxdq>0.0) then 
     {
         fv_update_nonbon_mxdq:=fv_update_nonbon_mxdq*fv_update_nonbon_mxdq
     }
     else 
     {
          skip 
     };
     fv_update_nonbon_dielectric:=get_f_variable("dielec",RValue);
     if(fv_update_nonbon_dielectric<1.0) then 
     {
         fv_update_nonbon_dielectric:=1.0
     }
     else 
     {
          skip 
     };
     if(fv_update_nonbon_dielecold!=fv_update_nonbon_dielectric) then 
     {
         fv_update_nonbon_dielecold:=fv_update_nonbon_dielectric;
         fv_update_nonbon_mxdq:=-1.0
         
     }
     else 
     {
          skip 
     };
     fv_update_nonbon_dielectric:=332.17752/ fv_update_nonbon_dielectric;
     fv_update_nonbon_i:=a_number(RValue);
     fv_update_nonbon_vector:=malloc(4*fv_update_nonbon_i*sizeof(float));
     if(fv_update_nonbon_vector=NULL) then 
     {
         aaerror("cannot allocate memory in v_nonbon\n");
         return<==1 and RValue:=0;
         skip
         
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         fv_update_nonbon_atomall:=malloc(fv_update_nonbon_i*sizeof(ATOM *));
         if(fv_update_nonbon_atomall=NULL) then 
         {
             aaerror("cannot allocate memory in v_nonbon\n");
             return<==1 and RValue:=0;
             skip
             
         }
         else 
         {
              skip 
         };
         if(return=0)   then 
         {
             fv_update_nonbon_imax:=a_number(RValue);
             fv_update_nonbon_i:=0;
             
             while(fv_update_nonbon_i<fv_update_nonbon_imax)
             {
                 fv_update_nonbon_atomall[fv_update_nonbon_i]:=a_next(fv_update_nonbon_i,RValue);
                 fv_update_nonbon_i:=fv_update_nonbon_i+1
                 
             };
             fv_update_nonbon_ok:=0;
             break$<==0 and skip;
             fv_update_nonbon_ii:=0;
             
             while( break$=0 AND  fv_update_nonbon_ii<fv_update_nonbon_imax)
             {
                 fv_update_nonbon_a1:=fv_update_nonbon_atomall[fv_update_nonbon_ii];
                 fv_update_nonbon_xt:=fv_update_nonbon_a1->dx*lambda+fv_update_nonbon_a1->x-fv_update_nonbon_a1->px;
                 fv_update_nonbon_yt:=fv_update_nonbon_a1->dy*lambda+fv_update_nonbon_a1->y-fv_update_nonbon_a1->py;
                 fv_update_nonbon_zt:=fv_update_nonbon_a1->dz*lambda+fv_update_nonbon_a1->z-fv_update_nonbon_a1->pz;
                 fv_update_nonbon_r:=fv_update_nonbon_xt*fv_update_nonbon_xt+fv_update_nonbon_yt*fv_update_nonbon_yt+fv_update_nonbon_zt*fv_update_nonbon_zt;
                 if(fv_update_nonbon_r>fv_update_nonbon_mxdq) then 
                 {
                     fv_update_nonbon_ok:=1;
                     break$<==1 and skip
                      
                 }
                 else 
                 {
                      skip 
                 };
                 if(break$=0)   then
                 {
                     fv_update_nonbon_ii:=fv_update_nonbon_ii+1
                 }
                 else
                 {
                     skip
                 }
                 
             };
             break$<==0 and skip;
             if(fv_update_nonbon_ok=0) then 
             {
                 free(fv_update_nonbon_vector) and skip;
                 free(fv_update_nonbon_atomall) and skip;
                 return<==1 and RValue:=1;
                 skip
                 
             }
             else 
             {
                  skip 
             };
             if(return=0)   then 
             {
                 fv_update_nonbon_xt:=get_f_variable("mmbox",RValue);
                 if(fv_update_nonbon_xt>0.0) then 
                 {
                     free(fv_update_nonbon_vector) and skip;
                     free(fv_update_nonbon_atomall) and skip;
                     mm_fv_update_nonbon(lambda,RValue);
                     return<==1 and RValue:=1;
                     skip
                     
                 }
                 else 
                 {
                      skip 
                 };
                 if(return=0)   then 
                 {
                     fv_update_nonbon_indexes:=malloc(fv_update_nonbon_imax*sizeof(int));
                     if(fv_update_nonbon_indexes=NULL) then 
                     {
                         aaerror(" cannot allocate memory in fv_update\n");
                         return<==1 and RValue:=0;
                         skip
                         
                     }
                     else 
                     {
                          skip 
                     };
                     if(return=0)   then 
                     {
                         fv_update_nonbon_ii:=0;
                         
                         while(fv_update_nonbon_ii<fv_update_nonbon_imax)
                         {
                             fv_update_nonbon_a1:=fv_update_nonbon_atomall[fv_update_nonbon_ii];
                             fv_update_nonbon_a1->VP:=0.0;
                             fv_update_nonbon_a1->dpx:=0.0;
                             fv_update_nonbon_a1->dpy:=0.0;
                             fv_update_nonbon_a1->dpz:=0.0;
                             fv_update_nonbon_a1->qxx:=0.0;
                             fv_update_nonbon_a1->qxy:=0.0;
                             fv_update_nonbon_a1->qxz:=0.0;
                             fv_update_nonbon_a1->qyy:=0.0;
                             fv_update_nonbon_a1->qyz:=0.0;
                             fv_update_nonbon_a1->qzz:=0.0;
                             fv_update_nonbon_j:=0;
                             
                             while(fv_update_nonbon_j<200)
                             {
                                 fv_update_nonbon_a1->close[fv_update_nonbon_j]:=NULL;
                                 fv_update_nonbon_j:=fv_update_nonbon_j+1
                                 
                             };
                             fv_update_nonbon_ii:=fv_update_nonbon_ii+1
                             
                         };
                         fv_update_nonbon_ii:=0;
                         
                         while(fv_update_nonbon_ii<fv_update_nonbon_imax)
                         {
                             fv_update_nonbon_a1:=fv_update_nonbon_atomall[fv_update_nonbon_ii];
                             fv_update_nonbon_inclose:=0;
                             if(lambda!=0.0) then 
                             {
                                 fv_update_nonbon_i:=fv_update_nonbon_ii+1;
                                 
                                 while(fv_update_nonbon_i<fv_update_nonbon_imax)
                                 {
                                     fv_update_nonbon_a2:=fv_update_nonbon_atomall[fv_update_nonbon_i];
                                     fv_update_nonbon_j:=fv_update_nonbon_i*4;
                                     fv_update_nonbon_vector[fv_update_nonbon_j]:=fv_update_nonbon_a2->x-fv_update_nonbon_a1->x+lambda*(fv_update_nonbon_a2->dx-fv_update_nonbon_a1->dx);
                                     fv_update_nonbon_vector[fv_update_nonbon_j+1]:=fv_update_nonbon_a2->y-fv_update_nonbon_a1->y+lambda*(fv_update_nonbon_a2->dy-fv_update_nonbon_a1->dy);
                                     fv_update_nonbon_vector[fv_update_nonbon_j+2]:=fv_update_nonbon_a2->z-fv_update_nonbon_a1->z+lambda*(fv_update_nonbon_a2->dz-fv_update_nonbon_a1->dz);
                                     fv_update_nonbon_i:=fv_update_nonbon_i+1
                                     
                                 }
                                 
                             }
                             else
                             {
                                 fv_update_nonbon_i:=fv_update_nonbon_ii+1;
                                 
                                 while(fv_update_nonbon_i<fv_update_nonbon_imax)
                                 {
                                     fv_update_nonbon_a2:=fv_update_nonbon_atomall[fv_update_nonbon_i];
                                     fv_update_nonbon_j:=fv_update_nonbon_i*4;
                                     fv_update_nonbon_vector[fv_update_nonbon_j]:=fv_update_nonbon_a2->x-fv_update_nonbon_a1->x;
                                     fv_update_nonbon_vector[fv_update_nonbon_j+1]:=fv_update_nonbon_a2->y-fv_update_nonbon_a1->y;
                                     fv_update_nonbon_vector[fv_update_nonbon_j+2]:=fv_update_nonbon_a2->z-fv_update_nonbon_a1->z;
                                     fv_update_nonbon_i:=fv_update_nonbon_i+1
                                     
                                 }
                             };
                             fv_update_nonbon_i:=fv_update_nonbon_ii+1;
                             
                             while(fv_update_nonbon_i<fv_update_nonbon_imax)
                             {
                                 fv_update_nonbon_j:=fv_update_nonbon_i*4;
                                 fv_update_nonbon_vector[fv_update_nonbon_j+3]:=sqrt(fv_update_nonbon_vector[fv_update_nonbon_j]*fv_update_nonbon_vector[fv_update_nonbon_j]+fv_update_nonbon_vector[fv_update_nonbon_j+1]*fv_update_nonbon_vector[fv_update_nonbon_j+1]+fv_update_nonbon_vector[fv_update_nonbon_j+2]*fv_update_nonbon_vector[fv_update_nonbon_j+2]);
                                 fv_update_nonbon_i:=fv_update_nonbon_i+1
                                 
                             };
                             fv_update_nonbon_inindex:=0;
                             continue<==0 and skip;
                             fv_update_nonbon_i:=fv_update_nonbon_ii+1;
                             
                             while(fv_update_nonbon_i<fv_update_nonbon_imax)
                             {
                                  continue<==0 and skip;
                                 fv_update_nonbon_a2:=fv_update_nonbon_atomall[fv_update_nonbon_i];
                                 fv_update_nonbon_ok:=0;
                                 break$<==0 and skip;
                                 fv_update_nonbon_j:=0;
                                 
                                 while( break$=0 AND  fv_update_nonbon_j<fv_update_nonbon_a1->dontuse)
                                 {
                                     if(fv_update_nonbon_a2=fv_update_nonbon_a1->excluded[fv_update_nonbon_j]) then 
                                     {
                                         fv_update_nonbon_ok:=1;
                                         break$<==1 and skip
                                          
                                     }
                                     else 
                                     {
                                          skip 
                                     };
                                     if(break$=0)   then
                                     {
                                         fv_update_nonbon_j:=fv_update_nonbon_j+1
                                     }
                                     else
                                     {
                                         skip
                                     }
                                     
                                 };
                                 break$<==0 and skip;
                                 if(fv_update_nonbon_ok=1) then 
                                 {
                                     fv_update_nonbon_i:=fv_update_nonbon_i;
                                     continue<==1 and skip
                                      
                                 }
                                 else 
                                 {
                                      skip 
                                 };
                                 if(continue=0)   then 
                                 {
                                     fv_update_nonbon_j:=fv_update_nonbon_i*4;
                                     if(fv_update_nonbon_vector[fv_update_nonbon_j+3]>fv_update_nonbon_mxcut OR fv_update_nonbon_inclose>200) then 
                                     {
                                         fv_update_nonbon_indexes[fv_update_nonbon_inindex]:=fv_update_nonbon_i;
                                         fv_update_nonbon_inindex:=fv_update_nonbon_inindex+1
                                         
                                     }
                                     else
                                     {
                                         fv_update_nonbon_a1->close[fv_update_nonbon_inclose]:=fv_update_nonbon_atomall[fv_update_nonbon_i];
                                         fv_update_nonbon_inclose:=fv_update_nonbon_inclose+1
                                     };
                                     if(fv_update_nonbon_inclose=200) then 
                                     {
                                         aaerror(" fv_update_nonbon> too many atoms increase NCLOSE or decrease mxcut")
                                         
                                     }
                                     else 
                                     {
                                          skip 
                                     };
                                     fv_update_nonbon_i:=fv_update_nonbon_i;
                                     fv_update_nonbon_i:=fv_update_nonbon_i+1
                                 }
                                 else
                                 {
                                     skip
                                 }
                                 
                             };
                             continue<==0 and skip;
                             fv_update_nonbon_in:=0;
                             
                             while(fv_update_nonbon_in<fv_update_nonbon_inindex)
                             {
                                 fv_update_nonbon_i:=fv_update_nonbon_indexes[fv_update_nonbon_in];
                                 fv_update_nonbon_a2:=fv_update_nonbon_atomall[fv_update_nonbon_i];
                                 fv_update_nonbon_j:=fv_update_nonbon_i*4;
                                 fv_update_nonbon_r0:=1/ fv_update_nonbon_vector[fv_update_nonbon_j+3];
                                 fv_update_nonbon_r:=fv_update_nonbon_r0*fv_update_nonbon_r0;
                                 fv_update_nonbon_r:=fv_update_nonbon_r*fv_update_nonbon_r*fv_update_nonbon_r;
                                 fv_update_nonbon_xt:=fv_update_nonbon_a1->q*fv_update_nonbon_a2->q*fv_update_nonbon_dielectric*fv_update_nonbon_r0;
                                 fv_update_nonbon_yt:=fv_update_nonbon_a1->a*fv_update_nonbon_a2->a*fv_update_nonbon_r;
                                 fv_update_nonbon_zt:=fv_update_nonbon_a1->b*fv_update_nonbon_a2->b*fv_update_nonbon_r*fv_update_nonbon_r;
                                 fv_update_nonbon_k:=fv_update_nonbon_xt-fv_update_nonbon_yt+fv_update_nonbon_zt;
                                 fv_update_nonbon_xt:=fv_update_nonbon_xt*fv_update_nonbon_r0;
                                 fv_update_nonbon_yt:=fv_update_nonbon_yt*fv_update_nonbon_r0;
                                 fv_update_nonbon_zt:=fv_update_nonbon_zt*fv_update_nonbon_r0;
                                 fv_update_nonbon_k1:=fv_update_nonbon_xt-fv_update_nonbon_yt*6+fv_update_nonbon_zt*12;
                                 fv_update_nonbon_xt:=fv_update_nonbon_xt*fv_update_nonbon_r0;
                                 fv_update_nonbon_yt:=fv_update_nonbon_yt*fv_update_nonbon_r0;
                                 fv_update_nonbon_zt:=fv_update_nonbon_zt*fv_update_nonbon_r0;
                                 fv_update_nonbon_k2:=fv_update_nonbon_xt*3;
                                 fv_update_nonbon_ka2:=-fv_update_nonbon_yt*48.0;
                                 fv_update_nonbon_kb2:=fv_update_nonbon_zt*168.0;
                                 fv_update_nonbon_k1:=-fv_update_nonbon_k1;
                                 fv_update_nonbon_xt:=fv_update_nonbon_vector[fv_update_nonbon_j]*fv_update_nonbon_r0;
                                 fv_update_nonbon_yt:=fv_update_nonbon_vector[fv_update_nonbon_j+1]*fv_update_nonbon_r0;
                                 fv_update_nonbon_zt:=fv_update_nonbon_vector[fv_update_nonbon_j+2]*fv_update_nonbon_r0;
                                 fv_update_nonbon_a1->VP:=fv_update_nonbon_a1->VP+fv_update_nonbon_k;
                                 fv_update_nonbon_a2->dpx:=fv_update_nonbon_a2->dpx-fv_update_nonbon_k1*fv_update_nonbon_xt;
                                 fv_update_nonbon_a1->dpx:=fv_update_nonbon_a1->dpx+fv_update_nonbon_k1*fv_update_nonbon_xt;
                                 fv_update_nonbon_a2->dpy:=fv_update_nonbon_a2->dpy-fv_update_nonbon_k1*fv_update_nonbon_yt;
                                 fv_update_nonbon_a1->dpy:=fv_update_nonbon_a1->dpy+fv_update_nonbon_k1*fv_update_nonbon_yt;
                                 fv_update_nonbon_a2->dpz:=fv_update_nonbon_a2->dpz-fv_update_nonbon_k1*fv_update_nonbon_zt;
                                 fv_update_nonbon_a1->dpz:=fv_update_nonbon_a1->dpz+fv_update_nonbon_k1*fv_update_nonbon_zt;
                                 fv_update_nonbon_a2->qxx:=fv_update_nonbon_a2->qxx-fv_update_nonbon_k2*(fv_update_nonbon_xt*fv_update_nonbon_xt-1.0/ 3)+fv_update_nonbon_ka2*(fv_update_nonbon_xt*fv_update_nonbon_xt-1.0/ 8)+fv_update_nonbon_kb2*(fv_update_nonbon_xt*fv_update_nonbon_xt-1.0/ 14);
                                 fv_update_nonbon_a1->qxx:=fv_update_nonbon_a1->qxx-fv_update_nonbon_k2*(fv_update_nonbon_xt*fv_update_nonbon_xt-1.0/ 3)+fv_update_nonbon_ka2*(fv_update_nonbon_xt*fv_update_nonbon_xt-1.0/ 8)+fv_update_nonbon_kb2*(fv_update_nonbon_xt*fv_update_nonbon_xt-1.0/ 14);
                                 fv_update_nonbon_a2->qxy:=fv_update_nonbon_a2->qxy-(fv_update_nonbon_k2+fv_update_nonbon_ka2+fv_update_nonbon_kb2)*fv_update_nonbon_yt*fv_update_nonbon_xt;
                                 fv_update_nonbon_a1->qxy:=fv_update_nonbon_a1->qxy-(fv_update_nonbon_k2+fv_update_nonbon_ka2+fv_update_nonbon_kb2)*fv_update_nonbon_yt*fv_update_nonbon_xt;
                                 fv_update_nonbon_a2->qxz:=fv_update_nonbon_a2->qxz-(fv_update_nonbon_k2+fv_update_nonbon_ka2+fv_update_nonbon_kb2)*fv_update_nonbon_zt*fv_update_nonbon_xt;
                                 fv_update_nonbon_a1->qxz:=fv_update_nonbon_a1->qxz-(fv_update_nonbon_k2+fv_update_nonbon_ka2+fv_update_nonbon_kb2)*fv_update_nonbon_zt*fv_update_nonbon_xt;
                                 fv_update_nonbon_a2->qyy:=fv_update_nonbon_a2->qyy-fv_update_nonbon_k2*(fv_update_nonbon_yt*fv_update_nonbon_yt-1.0/ 3)+fv_update_nonbon_ka2*(fv_update_nonbon_yt*fv_update_nonbon_yt-1.0/ 8)+fv_update_nonbon_kb2*(fv_update_nonbon_yt*fv_update_nonbon_yt-1.0/ 14);
                                 fv_update_nonbon_a1->qyy:=fv_update_nonbon_a1->qyy-fv_update_nonbon_k2*(fv_update_nonbon_yt*fv_update_nonbon_yt-1.0/ 3)+fv_update_nonbon_ka2*(fv_update_nonbon_yt*fv_update_nonbon_yt-1.0/ 8)+fv_update_nonbon_kb2*(fv_update_nonbon_yt*fv_update_nonbon_yt-1.0/ 14);
                                 fv_update_nonbon_a2->qyz:=fv_update_nonbon_a2->qyz-(fv_update_nonbon_k2+fv_update_nonbon_ka2+fv_update_nonbon_kb2)*fv_update_nonbon_yt*fv_update_nonbon_zt;
                                 fv_update_nonbon_a1->qyz:=fv_update_nonbon_a1->qyz-(fv_update_nonbon_k2+fv_update_nonbon_ka2+fv_update_nonbon_kb2)*fv_update_nonbon_yt*fv_update_nonbon_zt;
                                 fv_update_nonbon_a2->qzz:=fv_update_nonbon_a2->qzz-fv_update_nonbon_k2*(fv_update_nonbon_zt*fv_update_nonbon_zt-1.0/ 3)+fv_update_nonbon_ka2*(fv_update_nonbon_zt*fv_update_nonbon_zt-1.0/ 8)+fv_update_nonbon_kb2*(fv_update_nonbon_zt*fv_update_nonbon_zt-1.0/ 14);
                                 fv_update_nonbon_a1->qzz:=fv_update_nonbon_a1->qzz-fv_update_nonbon_k2*(fv_update_nonbon_zt*fv_update_nonbon_zt-1.0/ 3)+fv_update_nonbon_ka2*(fv_update_nonbon_zt*fv_update_nonbon_zt-1.0/ 8)+fv_update_nonbon_kb2*(fv_update_nonbon_zt*fv_update_nonbon_zt-1.0/ 14);
                                 fv_update_nonbon_in:=fv_update_nonbon_in+1
                                 
                             };
                             fv_update_nonbon_a1->px:=fv_update_nonbon_a1->dx*lambda+fv_update_nonbon_a1->x;
                             fv_update_nonbon_a1->py:=fv_update_nonbon_a1->dy*lambda+fv_update_nonbon_a1->y;
                             fv_update_nonbon_a1->pz:=fv_update_nonbon_a1->dz*lambda+fv_update_nonbon_a1->z;
                             fv_update_nonbon_ii:=fv_update_nonbon_ii+1
                             
                         };
                         a_inactive_f_zero();
                         free(fv_update_nonbon_indexes) and skip;
                         free(fv_update_nonbon_vector) and skip;
                         free(fv_update_nonbon_atomall) and skip;
                         return<==1 and RValue:=1;
                         skip
                     }
                     else
                     {
                         skip
                     }
                 }
                 else
                 {
                     skip
                 }
             }
             else
             {
                 skip
             }
         }
         else
         {
             skip
         }
     }
     else
     {
         skip
     }
     )
     }; 
  function f_nonbon ( float lambda,int RValue )
 {
     frame(imax,f_nonbon_ux,f_nonbon_uy,f_nonbon_uz,f_nonbon_k,f_nonbon_r,f_nonbon_r0,f_nonbon_xt,f_nonbon_yt,f_nonbon_zt,f_nonbon_lcutoff,f_nonbon_cutoff,f_nonbon_inbond,f_nonbon_inangle,f_nonbon_i,f_nonbon_test,f_nonbon_a1,f_nonbon_a2,f_nonbon_bonded,f_nonbon_angled,f_nonbon_buffer,f_nonbon_invector,f_nonbon_atomsused,f_nonbon_ii,f_nonbon_jj,f_nonbon_vector,f_nonbon_atms,f_nonbon_atomall,f_nonbon_dielectric,f_nonbon_fx,f_nonbon_fy,f_nonbon_fz,f_nonbon_xt2,f_nonbon_xt3,f_nonbon_xt4,f_nonbon_yt2,f_nonbon_yt3,f_nonbon_yt4,f_nonbon_zt2,f_nonbon_zt3,f_nonbon_zt4,return,break$) and ( 
     int imax and skip;
	 int break$<==0 and skip;
     int return<==0 and skip;
     float f_nonbon_ux,f_nonbon_uy,f_nonbon_uz and skip;
     float f_nonbon_k,f_nonbon_r,f_nonbon_r0,f_nonbon_xt,f_nonbon_yt,f_nonbon_zt and skip;
     float f_nonbon_lcutoff,f_nonbon_cutoff and skip;
     int f_nonbon_inbond,f_nonbon_inangle,f_nonbon_i,f_nonbon_test and skip;
     ATOM *f_nonbon_a1,*f_nonbon_a2,*f_nonbon_bonded[10],*f_nonbon_angled[10] and skip;
     float *f_nonbon_buffer and skip;
     int f_nonbon_invector,f_nonbon_atomsused,f_nonbon_ii,f_nonbon_jj and skip;
     float *f_nonbon_vector and skip;
     ATOM **f_nonbon_atms,**f_nonbon_atomall and skip;
     float f_nonbon_dielectric and skip;
     float f_nonbon_fx,f_nonbon_fy,f_nonbon_fz and skip;
     float f_nonbon_xt2,f_nonbon_xt3,f_nonbon_xt4 and skip;
     float f_nonbon_yt2,f_nonbon_yt3,f_nonbon_yt4 and skip;
     float f_nonbon_zt2,f_nonbon_zt3,f_nonbon_zt4 and skip;
     fv_update_nonbon(lambda,RValue);
     f_nonbon_dielectric:=get_f_variable("dielec",RValue);
     if(f_nonbon_dielectric<1.0) then 
     {
         f_nonbon_dielectric:=1.0
     }
     else 
     {
          skip 
     };
     f_nonbon_dielectric:=332.17752/ f_nonbon_dielectric;
     f_nonbon_i:=a_number(RValue);
     f_nonbon_atomall:=malloc(f_nonbon_i*sizeof(ATOM *));
     if(f_nonbon_atomall=NULL) then 
     {
         aaerror("cannot allocate memory in f_nonbon");
         return<==1 and RValue:=0;
         skip
         
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         imax:=a_number(RValue);
         f_nonbon_i:=0;
         
         while(f_nonbon_i<imax)
         {
             f_nonbon_atomall[f_nonbon_i]:=a_next(f_nonbon_i,RValue);
             f_nonbon_i:=f_nonbon_i+1
             
         };
         f_nonbon_i:=0;
         
         while(f_nonbon_i<imax)
         {
             f_nonbon_fx:=0.0;
             f_nonbon_fy:=0.0;
             f_nonbon_fz:=0.0;
             f_nonbon_a1:=f_nonbon_atomall[f_nonbon_i];
             f_nonbon_xt:=f_nonbon_a1->dx*lambda+f_nonbon_a1->x-f_nonbon_a1->px;
             f_nonbon_yt:=f_nonbon_a1->dy*lambda+f_nonbon_a1->y-f_nonbon_a1->py;
             f_nonbon_zt:=f_nonbon_a1->dz*lambda+f_nonbon_a1->z-f_nonbon_a1->pz;
             f_nonbon_fx:=(f_nonbon_a1->qxx*f_nonbon_xt+f_nonbon_a1->qxy*f_nonbon_yt+f_nonbon_a1->qxz*f_nonbon_zt);
             f_nonbon_fy:=(f_nonbon_a1->qxy*f_nonbon_xt+f_nonbon_a1->qyy*f_nonbon_yt+f_nonbon_a1->qyz*f_nonbon_zt);
             f_nonbon_fz:=(f_nonbon_a1->qxz*f_nonbon_xt+f_nonbon_a1->qyz*f_nonbon_yt+f_nonbon_a1->qzz*f_nonbon_zt);
             f_nonbon_a1->fx:=f_nonbon_a1->fx+f_nonbon_fx+f_nonbon_a1->dpx;
             f_nonbon_a1->fy:=f_nonbon_a1->fy+f_nonbon_fy+f_nonbon_a1->dpy;
             f_nonbon_a1->fz:=f_nonbon_a1->fz+f_nonbon_fz+f_nonbon_a1->dpz;
             break$<==0 and skip;
             f_nonbon_jj:=0;
             
             while( break$=0 AND  f_nonbon_jj<200)
             {
                 if(f_nonbon_a1->close[f_nonbon_jj]=NULL) then 
                 {
                     break$<==1 and skip
                  }
                 else 
                 {
                      skip 
                 };
                 if(break$=0)   then
                 {
                     f_nonbon_jj:=f_nonbon_jj+1
                 }
                 else
                 {
                     skip
                 }
                 
             };
             break$<==0 and skip;
             f_nonbon_ii:=0;
             
             while(f_nonbon_ii<f_nonbon_jj)
             {
                 f_nonbon_a2:=f_nonbon_a1->close[f_nonbon_ii];
                 f_nonbon_ux:=(f_nonbon_a2->dx-f_nonbon_a1->dx)*lambda+(f_nonbon_a2->x-f_nonbon_a1->x);
                 f_nonbon_uy:=(f_nonbon_a2->dy-f_nonbon_a1->dy)*lambda+(f_nonbon_a2->y-f_nonbon_a1->y);
                 f_nonbon_uz:=(f_nonbon_a2->dz-f_nonbon_a1->dz)*lambda+(f_nonbon_a2->z-f_nonbon_a1->z);
                 f_nonbon_r:=1/ (f_nonbon_ux*f_nonbon_ux+f_nonbon_uy*f_nonbon_uy+f_nonbon_uz*f_nonbon_uz);
                 f_nonbon_r0:=sqrt(f_nonbon_r);
                 f_nonbon_ux:=f_nonbon_ux*f_nonbon_r0;
                 f_nonbon_uy:=f_nonbon_uy*f_nonbon_r0;
                 f_nonbon_uz:=f_nonbon_uz*f_nonbon_r0;
                 f_nonbon_k:=-f_nonbon_dielectric*f_nonbon_a1->q*f_nonbon_a2->q*f_nonbon_r;
                 f_nonbon_r:=f_nonbon_r*f_nonbon_r*f_nonbon_r;
                 f_nonbon_k:=f_nonbon_k+f_nonbon_a1->a*f_nonbon_a2->a*f_nonbon_r*f_nonbon_r0*6;
                 f_nonbon_k:=f_nonbon_k-f_nonbon_a1->b*f_nonbon_a2->b*f_nonbon_r*f_nonbon_r*f_nonbon_r0*12;
                 f_nonbon_a1->fx:=f_nonbon_a1->fx+f_nonbon_ux*f_nonbon_k;
                 f_nonbon_a1->fy:=f_nonbon_a1->fy+f_nonbon_uy*f_nonbon_k;
                 f_nonbon_a1->fz:=f_nonbon_a1->fz+f_nonbon_uz*f_nonbon_k;
                 f_nonbon_a2->fx:=f_nonbon_a2->fx-f_nonbon_ux*f_nonbon_k;
                 f_nonbon_a2->fy:=f_nonbon_a2->fy-f_nonbon_uy*f_nonbon_k;
                 f_nonbon_a2->fz:=f_nonbon_a2->fz-f_nonbon_uz*f_nonbon_k;
                 f_nonbon_ii:=f_nonbon_ii+1
                 
             };
             f_nonbon_i:=f_nonbon_i+1
             
         };
         a_inactive_f_zero();
         free(f_nonbon_atomall) and skip;
         return<==1 and RValue:=1;
         skip
     }
     else
     {
         skip
     }
     )
     }; 
  function v_nonbon ( float *V,float lambda,int RValue )
 {
     frame(v_nonbon_r,v_nonbon_r0,v_nonbon_xt,v_nonbon_yt,v_nonbon_zt,v_nonbon_k,v_nonbon_inbond,v_nonbon_inangle,v_nonbon_i,v_nonbon_a1,v_nonbon_a2,v_nonbon_bonded,v_nonbon_angled,v_nonbon_inbuffer,v_nonbon_invector,v_nonbon_atomsused,v_nonbon_ii,v_nonbon_jj,v_nonbon_imax,v_nonbon_vector,v_nonbon_vx,v_nonbon_k2,v_nonbon_atomall,v_nonbon_dielectric,v_nonbon_xt2,v_nonbon_xt3,v_nonbon_xt4,v_nonbon_xt5,v_nonbon_yt2,v_nonbon_yt3,v_nonbon_yt4,v_nonbon_yt5,v_nonbon_zt2,v_nonbon_zt3,v_nonbon_zt4,v_nonbon_zt5,return,break$) and ( 
     int break$<==0 and skip;
     int return<==0 and skip;
     float v_nonbon_r,v_nonbon_r0,v_nonbon_xt,v_nonbon_yt,v_nonbon_zt and skip;
     float v_nonbon_k and skip;
     int v_nonbon_inbond,v_nonbon_inangle,v_nonbon_i and skip;
     ATOM *v_nonbon_a1,*v_nonbon_a2,*v_nonbon_bonded[10],*v_nonbon_angled[10] and skip;
     int v_nonbon_inbuffer and skip;
     int v_nonbon_invector,v_nonbon_atomsused,v_nonbon_ii,v_nonbon_jj,v_nonbon_imax and skip;
     float *v_nonbon_vector and skip;
     float v_nonbon_vx and skip;
     float v_nonbon_k2 and skip;
     ATOM **v_nonbon_atomall and skip;
     float v_nonbon_dielectric and skip;
     float v_nonbon_xt2,v_nonbon_xt3,v_nonbon_xt4,v_nonbon_xt5 and skip;
     float v_nonbon_yt2,v_nonbon_yt3,v_nonbon_yt4,v_nonbon_yt5 and skip;
     float v_nonbon_zt2,v_nonbon_zt3,v_nonbon_zt4,v_nonbon_zt5 and skip;
     fv_update_nonbon(lambda,RValue);
     v_nonbon_dielectric:=get_f_variable("dielec",RValue);
     if(v_nonbon_dielectric<1.0) then 
     {
         v_nonbon_dielectric:=1.0
     }
     else 
     {
          skip 
     };
     v_nonbon_dielectric:=332.17752/ v_nonbon_dielectric;
     v_nonbon_i:=a_number(RValue);
     v_nonbon_atomall:=malloc(v_nonbon_i*sizeof(ATOM *));
     if(v_nonbon_atomall=NULL) then 
     {
         aaerror("cannot allocate memory in v_nonbon");
         return<==1 and RValue:=0;
         skip
         
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         v_nonbon_imax:=a_number(RValue);
         v_nonbon_i:=0;
         
         while(v_nonbon_i<v_nonbon_imax)
         {
             v_nonbon_atomall[v_nonbon_i]:=a_next(v_nonbon_i,RValue);
             v_nonbon_i:=v_nonbon_i+1
             
         };
         v_nonbon_i:=0;
         
         while(v_nonbon_i<v_nonbon_imax)
         {
             v_nonbon_a1:=v_nonbon_atomall[v_nonbon_i];
             v_nonbon_vx:=v_nonbon_a1->VP;
             v_nonbon_xt:=v_nonbon_a1->dx*lambda+v_nonbon_a1->x-v_nonbon_a1->px;
             v_nonbon_yt:=v_nonbon_a1->dy*lambda+v_nonbon_a1->y-v_nonbon_a1->py;
             v_nonbon_zt:=v_nonbon_a1->dz*lambda+v_nonbon_a1->z-v_nonbon_a1->pz;
             v_nonbon_vx:=v_nonbon_vx-(v_nonbon_a1->dpx*v_nonbon_xt+v_nonbon_a1->dpy*v_nonbon_yt+v_nonbon_a1->dpz*v_nonbon_zt);
             v_nonbon_vx:=v_nonbon_vx-((v_nonbon_xt*(0.5*v_nonbon_a1->qxx*v_nonbon_xt+v_nonbon_a1->qxy*v_nonbon_yt+v_nonbon_a1->qxz*v_nonbon_zt)+v_nonbon_yt*(0.5*v_nonbon_a1->qyy*v_nonbon_yt+v_nonbon_a1->qyz*v_nonbon_zt)+0.5*v_nonbon_zt*v_nonbon_a1->qzz*v_nonbon_zt));
             break$<==0 and skip;
             v_nonbon_jj:=0;
             
             while( break$=0 AND  v_nonbon_jj<200)
             {
                 if(v_nonbon_a1->close[v_nonbon_jj]=NULL) then 
                 {
                     break$<==1 and skip
                  }
                 else 
                 {
                      skip 
                 };
                 if(break$=0)   then
                 {
                     v_nonbon_jj:=v_nonbon_jj+1
                 }
                 else
                 {
                     skip
                 }
                 
             };
             break$<==0 and skip;
             v_nonbon_ii:=0;
             
             while(v_nonbon_ii<v_nonbon_jj)
             {
                 v_nonbon_a2:=v_nonbon_a1->close[v_nonbon_ii];
                 v_nonbon_xt:=(v_nonbon_a2->dx-v_nonbon_a1->dx)*lambda+(v_nonbon_a2->x-v_nonbon_a1->x);
                 v_nonbon_yt:=(v_nonbon_a2->dy-v_nonbon_a1->dy)*lambda+(v_nonbon_a2->y-v_nonbon_a1->y);
                 v_nonbon_zt:=(v_nonbon_a2->dz-v_nonbon_a1->dz)*lambda+(v_nonbon_a2->z-v_nonbon_a1->z);
                 v_nonbon_r:=1/ (v_nonbon_xt*v_nonbon_xt+v_nonbon_yt*v_nonbon_yt+v_nonbon_zt*v_nonbon_zt);
                 v_nonbon_r0:=sqrt(v_nonbon_r);
                 v_nonbon_k:=v_nonbon_dielectric*v_nonbon_a1->q*v_nonbon_a2->q*v_nonbon_r0;
                 v_nonbon_r:=v_nonbon_r*v_nonbon_r*v_nonbon_r;
                 v_nonbon_k:=v_nonbon_k-v_nonbon_a1->a*v_nonbon_a2->a*v_nonbon_r;
                 v_nonbon_k:=v_nonbon_k+v_nonbon_a1->b*v_nonbon_a2->b*v_nonbon_r*v_nonbon_r;
                 v_nonbon_vx:=v_nonbon_vx+v_nonbon_k;
                 v_nonbon_ii:=v_nonbon_ii+1
                 
             };
             * V:=* V+v_nonbon_vx;
             v_nonbon_i:=v_nonbon_i+1
             
         };
         a_inactive_f_zero();
         free(v_nonbon_atomall) and skip;
         return<==1 and RValue:=1;
         skip
     }
     else
     {
         skip
     }
     )
     }; 
  function zone_nonbon ( float *V,float lambda,ATOM ***alist,int inalist,int RValue )
 {
     frame(zone_nonbon_ok,zone_nonbon_r,zone_nonbon_r0,zone_nonbon_xt,zone_nonbon_yt,zone_nonbon_zt,zone_nonbon_lcutoff,zone_nonbon_cutoff,zone_nonbon_inbond,zone_nonbon_inangle,zone_nonbon_i,zone_nonbon_ii,zone_nonbon_a1,zone_nonbon_a2,zone_nonbon_dielectric,zone_nonbon_ve,zone_nonbon_va,zone_nonbon_vh,return,break$,continue) and (
     int continue<==0 and skip;
     int break$<==0 and skip;
     int return<==0 and skip;
     int zone_nonbon_ok and skip;
     float zone_nonbon_r,zone_nonbon_r0,zone_nonbon_xt,zone_nonbon_yt,zone_nonbon_zt and skip;
     float zone_nonbon_lcutoff,zone_nonbon_cutoff and skip;
     int zone_nonbon_inbond,zone_nonbon_inangle,zone_nonbon_i,zone_nonbon_ii and skip;
     ATOM *zone_nonbon_a1,*zone_nonbon_a2 and skip;
     float zone_nonbon_dielectric,zone_nonbon_ve,zone_nonbon_va,zone_nonbon_vh and skip;
     if(inalist<=0) then 
     {
         return<==1 and RValue:=1;
         skip
     }
     else 
     {
          skip 
     };
     if(return=0)   then 
     {
         zone_nonbon_dielectric:=get_f_variable("dielec",RValue);
         if(zone_nonbon_dielectric<1.0) then 
         {
             zone_nonbon_dielectric:=1.0
         }
         else 
         {
              skip 
         };
         zone_nonbon_dielectric:=332.17752/ zone_nonbon_dielectric;
         zone_nonbon_cutoff:=get_f_variable("cutoff",RValue);
         if(zone_nonbon_cutoff<1.0) then 
         {
             zone_nonbon_cutoff:=1.e10
         }
         else 
         {
              skip 
         };
         zone_nonbon_lcutoff:=-zone_nonbon_cutoff;
         continue<==0 and skip;
         zone_nonbon_ii:=0;
         
         while(zone_nonbon_ii<inalist)
         {
              continue<==0 and skip;
             zone_nonbon_a1:=(* alist)[zone_nonbon_ii];
             if(zone_nonbon_a1=NULL) then 
             {
                 zone_nonbon_i:=zone_nonbon_i;
                 continue<==1 and skip;
                  zone_nonbon_ii:=zone_nonbon_ii+1
             }
             else 
             {
                  skip 
             };
             if(continue=0)   then 
             {
                 zone_nonbon_ve:=0.0;
                 zone_nonbon_va:=0.0;
                 zone_nonbon_vh:=0.0;
                 zone_nonbon_a2:=a_next(-1,RValue);
                 break$<==0 and skip;
                 while( break$=0 AND  (zone_nonbon_a2!=NULL) AND (zone_nonbon_a2->next$!=NULL) AND zone_nonbon_a2->next$!=zone_nonbon_a2)
                 {
                     continue<==0 and skip;
                     if(zone_nonbon_a2=zone_nonbon_a1) then 
                     {
                         if(zone_nonbon_a2->next$=zone_nonbon_a2) then 
                         {
                             break$<==1 and skip
                          }
                         else 
                         {
                              skip 
                         };
                         if(break$=0)   then
                         {
                             zone_nonbon_a2:=zone_nonbon_a2->next$;
                             continue<==1 and skip;
                              zone_nonbon_ii:=zone_nonbon_ii+1}
                             else
                             {
                                 skip
                             }
                             
                         }
                         else 
                         {
                              skip 
                         };
                         if(break$=0)   then 
                         {
                             if(continue=0)   then 
                             {
                                 zone_nonbon_ok:=0;
                                 break$<==0 and skip;
                                 zone_nonbon_i:=0;
                                 
                                 while( break$=0 AND  zone_nonbon_i<zone_nonbon_a1->dontuse)
                                 {
                                     if(zone_nonbon_a2=zone_nonbon_a1->excluded[zone_nonbon_i]) then 
                                     {
                                         zone_nonbon_ok:=1;
                                         break$<==1 and skip
                                          
                                     }
                                     else 
                                     {
                                          skip 
                                     };
                                     if(break$=0)   then
                                     {
                                         zone_nonbon_i:=zone_nonbon_i+1
                                     }
                                     else
                                     {
                                         skip
                                     }
                                     
                                 };
                                 break$<==0 and skip;
                                 if(zone_nonbon_ok=1) then 
                                 {
                                     if(zone_nonbon_a2->next$=zone_nonbon_a2) then 
                                     {
                                         break$<==1 and skip
                                      }
                                     else 
                                     {
                                          skip 
                                     };
                                     if(break$=0)   then
                                     {
                                         zone_nonbon_a2:=zone_nonbon_a2->next$;
                                         continue<==1 and skip;
                                          zone_nonbon_ii:=zone_nonbon_ii+1}
                                         else
                                         {
                                             skip
                                         }
                                         
                                     }
                                     else 
                                     {
                                          skip 
                                     };
                                     if(break$=0)   then 
                                     {
                                         if(continue=0)   then 
                                         {
                                             zone_nonbon_xt:=(zone_nonbon_a1->x-zone_nonbon_a2->x)+lambda*(zone_nonbon_a1->dx-zone_nonbon_a2->dx);
                                             if((zone_nonbon_xt>zone_nonbon_cutoff) OR (zone_nonbon_xt<zone_nonbon_lcutoff)) then 
                                             {
                                                 if(zone_nonbon_a2->next$=zone_nonbon_a2) then 
                                                 {
                                                     break$<==1 and skip
                                                  }
                                                 else 
                                                 {
                                                      skip 
                                                 };
                                                 if(break$=0)   then
                                                 {
                                                     zone_nonbon_a2:=zone_nonbon_a2->next$;
                                                     continue<==1 and skip;
                                                      zone_nonbon_ii:=zone_nonbon_ii+1}
                                                     else
                                                     {
                                                         skip
                                                     }
                                                     
                                                 }
                                                 else 
                                                 {
                                                      skip 
                                                 };
                                                 if(break$=0)   then 
                                                 {
                                                     if(continue=0)   then 
                                                     {
                                                         zone_nonbon_yt:=(zone_nonbon_a1->y-zone_nonbon_a2->y)+lambda*(zone_nonbon_a1->dy-zone_nonbon_a2->dy);
                                                         if((zone_nonbon_yt>zone_nonbon_cutoff) OR (zone_nonbon_yt<zone_nonbon_lcutoff)) then 
                                                         {
                                                             if(zone_nonbon_a2->next$=zone_nonbon_a2) then 
                                                             {
                                                                 break$<==1 and skip
                                                              }
                                                             else 
                                                             {
                                                                  skip 
                                                             };
                                                             if(break$=0)   then
                                                             {
                                                                 zone_nonbon_a2:=zone_nonbon_a2->next$;
                                                                 continue<==1 and skip;
                                                                  zone_nonbon_ii:=zone_nonbon_ii+1}
                                                                 else
                                                                 {
                                                                     skip
                                                                 }
                                                                 
                                                             }
                                                             else 
                                                             {
                                                                  skip 
                                                             };
                                                             if(break$=0)   then 
                                                             {
                                                                 if(continue=0)   then 
                                                                 {
                                                                     zone_nonbon_zt:=(zone_nonbon_a1->z-zone_nonbon_a2->z)+lambda*(zone_nonbon_a1->dz-zone_nonbon_a2->dz);
                                                                     if((zone_nonbon_zt>zone_nonbon_cutoff) OR (zone_nonbon_zt<zone_nonbon_lcutoff)) then 
                                                                     {
                                                                         if(zone_nonbon_a2->next$=zone_nonbon_a2) then 
                                                                         {
                                                                             break$<==1 and skip
                                                                          }
                                                                         else 
                                                                         {
                                                                              skip 
                                                                         };
                                                                         if(break$=0)   then
                                                                         {
                                                                             zone_nonbon_a2:=zone_nonbon_a2->next$;
                                                                             continue<==1 and skip;
                                                                              zone_nonbon_ii:=zone_nonbon_ii+1}
                                                                             else
                                                                             {
                                                                                 skip
                                                                             }
                                                                             
                                                                         }
                                                                         else 
                                                                         {
                                                                              skip 
                                                                         };
                                                                         if(break$=0)   then 
                                                                         {
                                                                             if(continue=0)   then 
                                                                             {
                                                                                 zone_nonbon_r:=zone_nonbon_xt*zone_nonbon_xt+zone_nonbon_yt*zone_nonbon_yt+zone_nonbon_zt*zone_nonbon_zt;
                                                                                 if(zone_nonbon_r<1.0) then 
                                                                                 {
                                                                                     zone_nonbon_r:=1.0
                                                                                 }
                                                                                 else 
                                                                                 {
                                                                                      skip 
                                                                                 };
                                                                                 zone_nonbon_r0:=sqrt(zone_nonbon_r);
                                                                                 zone_nonbon_r:=zone_nonbon_r*zone_nonbon_r*zone_nonbon_r;
                                                                                 zone_nonbon_ve:=zone_nonbon_ve+zone_nonbon_dielectric*zone_nonbon_a1->q*zone_nonbon_a2->q/ zone_nonbon_r0;
                                                                                 zone_nonbon_va:=zone_nonbon_va-zone_nonbon_a1->a*zone_nonbon_a2->a/ zone_nonbon_r;
                                                                                 zone_nonbon_vh:=zone_nonbon_vh+zone_nonbon_a1->b*zone_nonbon_a2->b/ zone_nonbon_r/ zone_nonbon_r;
                                                                                 if(zone_nonbon_a2->next$=zone_nonbon_a2) then 
                                                                                 {
                                                                                     break$<==1 and skip
                                                                                  }
                                                                                 else 
                                                                                 {
                                                                                      skip 
                                                                                 };
                                                                                 if(break$=0)   then
                                                                                 {
                                                                                     zone_nonbon_a2:=zone_nonbon_a2->next$
                                                                                 }
                                                                                 else
                                                                                 {
                                                                                     skip
                                                                                 }
                                                                             }
                                                                             else
                                                                             {
                                                                                 skip
                                                                             }
                                                                         }
                                                                         else
                                                                         {
                                                                             skip
                                                                         }
                                                                     }
                                                                     else
                                                                     {
                                                                         skip
                                                                     }
                                                                 }
                                                                 else
                                                                 {
                                                                     skip
                                                                 }
                                                             }
                                                             else
                                                             {
                                                                 skip
                                                             }
                                                         }
                                                         else
                                                         {
                                                             skip
                                                         }
                                                     }
                                                     else
                                                     {
                                                         skip
                                                     }
                                                 }
                                                 else
                                                 {
                                                     skip
                                                 }
                                             }
                                             else
                                             {
                                                 skip
                                             }
                                         }
                                         else
                                         {
                                             skip
                                         }
                                     };
                                     break$<==0 and skip;
                                     continue<==0 and skip;
                                     * V:=* V+zone_nonbon_ve+zone_nonbon_va+zone_nonbon_vh;
                                     zone_nonbon_i:=zone_nonbon_i;
                                     zone_nonbon_ii:=zone_nonbon_ii+1
                                 }
                                 else
                                 {
                                     skip
                                 }
                                 
                             };
                             continue<==0 and skip;
                             return<==1 and RValue:=1;
                             skip
                         }
                         else
                         {
                             skip
                         }
                         )
                     };
                     
                    
 function main ( int RValue )
 {
     frame(return) and ( 
     int return<==0 and skip;
	 file1<==fopen("d:/input/all.init.ammp\0","r") and skip;
	 if(file1 = NULL) then {printf("error") and skip} else{printf("ok") and skip};
	  file2<==fopen("d:/input/short.tether\0","r") and skip;
	 if(file2 = NULL) then {printf("error") and skip} else{printf("ok") and skip};
     set_f_variable("mxdq",0.05,RValue);
     set_f_variable("mxcut",6.0,RValue);
     set_i_variable("nostep",1,RValue);
     read_eval_do(stdin,stdout);

     return<==1 and RValue:=0;
     skip
     )
     };
	  main(RValue) 
	 )